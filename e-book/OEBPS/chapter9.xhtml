<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Chapter 9</title>
</head>

<body>

	<h1 class="heading">Chapter 9 – Star Pusher</h1>
	<hr class="heading"/>

	<h1 class="subheading" id="">How to Play Star Pusher</h1>
	<p class="noindent">Star Pusher is a Sokoban or “Box Pusher” clone. The player is in a room with several stars. There are star marks on the grounds of some of the tile sprites in the room. The player must figure out how to push the stars on top of the tiles with star marks. The player cannot push a star if there is a wall or another star behind it. The player cannot pull stars, so if a star gets pushed into a corner, the player will have to restart the level. When all of the stars have been pushed onto star-marked floor tiles, the level is complete and the next level starts.</p>
	<p>Each level is made up of a 2D grid of tile images. <a href="glossary.xhtml#tile-sprites"><b>Tile sprites</b></a> are images of the same size that can be placed next to each other to form more complex images. With a few floor and wall tiles, we can create levels of many interesting shapes and sizes.</p>
	<p>The level files are not included in the source code. Instead, you can either create the level files yourself or download them. A level file with 201 levels can be downloaded from <a href="https://invpy.com/starPusherLevels.txt">https://invpy.com/starPusherLevels.txt</a>. When you run the Star Pusher program, make sure that this level file is in the same folder as the <i>starpusher.py</i> file. Otherwise you will get this error message: <span class="mono">AssertionError: Cannot find the level file: starPusherLevels.txt</span></p>
	<p>The level designs were originally made David W. Skinner. You can download more puzzles from his website at <a href="http://sneezingtiger.com/sokoban/levels.html">http://sneezingtiger.com/sokoban/levels.html</a>.</p>

	<h1 class="subheading" id="">Source Code to Star Pusher</h1>
	<p class="noindent">This source code can be downloaded from <a href="https://invpy.com/starpusher.py">https://invpy.com/starpusher.py</a>. If you get any error messages, look at the line number that is mentioned in the error message and check your code for any typos. You can also copy and paste your code into the web form at <a href="https://invpy.com/diff/starpusher">https://invpy.com/diff/starpusher</a> to see if the differences between your code and the code in the book.</p>
	<p>The level file can be downloaded from <a href="https://invpy.com/starPusherLevels.txt">https://invpy.com/starPusherLevels.txt</a>. The tiles can be downloaded from <a href="https://invpy.com/starPusherImages.zip">https://invpy.com/starPusherImages.zip</a>.</p>
	<p>Also, just like the squirrel, grass, and enemy “objects” in the Squirrel Eat Squirrel game, when I say “map objects”, “game state objects”, or “level objects” in this chapter, I do not mean objects in the Object-Oriented Programming sense. These “objects” are really just dictionary values, but it is easier to refer to them as objects since they represent things in the game world.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">&#160;&#160;1.</span> <span class="comment"># Star Pusher (a Sokoban clone)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;2.</span> <span class="comment"># By Al Sweigart al@inventwithpython.com</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;3.</span> <span class="comment"># http://inventwithpython.com/pygame</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;4.</span> <span class="comment"># Creative Commons BY-NC-SA 3.0 US</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;5.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;6.</span> import random, sys, copy, os, pygame</p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;7.</span> from pygame.locals import *</p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;8.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;9.</span> FPS = 30 <span class="comment"># frames per second to update the screen</span></p>
		<p class="noindent mono"><span class="line-number">&#160;10.</span>  WINWIDTH = 800 <span class="comment"># width of the program's window, in pixels</span></p>
		<p class="noindent mono"><span class="line-number">&#160;11.</span>  WINHEIGHT = 600 <span class="comment"># height in pixels</span></p>
		<p class="noindent mono"><span class="line-number">&#160;12.</span>  HALF_WINWIDTH = int(WINWIDTH / 2)</p>
		<p class="noindent mono"><span class="line-number">&#160;13.</span>  HALF_WINHEIGHT = int(WINHEIGHT / 2)</p>
		<p class="noindent mono"><span class="line-number">&#160;14.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;15.</span>  <span class="comment"># The total width and height of each tile in pixels.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;16.</span>  TILEWIDTH = 50</p>
		<p class="noindent mono"><span class="line-number">&#160;17.</span>  TILEHEIGHT = 85</p>
		<p class="noindent mono"><span class="line-number">&#160;18.</span>  TILEFLOORHEIGHT = 45</p>
		<p class="noindent mono"><span class="line-number">&#160;19.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;20.</span>  CAM_MOVE_SPEED = 5 <span class="comment"># how many pixels per frame the camera moves</span></p>
		<p class="noindent mono"><span class="line-number">&#160;21.</span> </p>
		<p class="noindent mono"><span class="line-number">&#160;22.</span>  <span class="comment"># The percentage of outdoor tiles that have additional</span></p>
		<p class="noindent mono"><span class="line-number">&#160;23.</span>  <span class="comment"># decoration on them, such as a tree or rock.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;24.</span>  OUTSIDE_DECORATION_PCT = 20</p>
		<p class="noindent mono"><span class="line-number">&#160;25.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;26.</span>  BRIGHTBLUE = (  0, 170, 255)</p>
		<p class="noindent mono"><span class="line-number">&#160;27.</span>  WHITE = (255, 255, 255)</p>
		<p class="noindent mono"><span class="line-number">&#160;28.</span>  BGCOLOR = BRIGHTBLUE</p>
		<p class="noindent mono"><span class="line-number">&#160;29.</span>  TEXTCOLOR = WHITE</p>
		<p class="noindent mono"><span class="line-number">&#160;30.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;31.</span>  UP = 'up'</p>
		<p class="noindent mono"><span class="line-number">&#160;32.</span>  DOWN = 'down'</p>
		<p class="noindent mono"><span class="line-number">&#160;33.</span>  LEFT = 'left'</p>
		<p class="noindent mono"><span class="line-number">&#160;34.</span>  RIGHT = 'right'</p>
		<p class="noindent mono"><span class="line-number">&#160;35.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;36.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;37.</span> def main():</p>
		<p class="noindent mono"><span class="line-number">&#160;38.</span> &#160;&#160;&#160;&#160;global FPSCLOCK, DISPLAYSURF, IMAGESDICT, TILEMAPPING, OUTSIDEDECOMAPPING, BASICFONT, PLAYERIMAGES, currentImage</p>
		<p class="noindent mono"><span class="line-number">&#160;39.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;40.</span> &#160;&#160;&#160;&#160;<span class="comment"># Pygame initialization and basic set up of the global variables.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;41.</span> &#160;&#160;&#160;&#160;pygame.init()</p>
		<p class="noindent mono"><span class="line-number">&#160;42.</span> &#160;&#160;&#160;&#160;FPSCLOCK = pygame.time.Clock()</p>
		<p class="noindent mono"><span class="line-number">&#160;43.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;44.</span> &#160;&#160;&#160;&#160;<span class="comment"># Because the Surface object stored in DISPLAYSURF was returned</span></p>
		<p class="noindent mono"><span class="line-number">&#160;45.</span> &#160;&#160;&#160;&#160;<span class="comment"># from the pygame.display.set_mode() function, this is the</span></p>
		<p class="noindent mono"><span class="line-number">&#160;46.</span> &#160;&#160;&#160;&#160;<span class="comment"># Surface object that is drawn to the actual computer screen</span></p>
		<p class="noindent mono"><span class="line-number">&#160;47.</span> &#160;&#160;&#160;&#160;<span class="comment"># when pygame.display.update() is called.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;48.</span> &#160;&#160;&#160;&#160;DISPLAYSURF = pygame.display.set_mode((WINWIDTH, WINHEIGHT))</p>
		<p class="noindent mono"><span class="line-number">&#160;49.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;50.</span> &#160;&#160;&#160;&#160;pygame.display.set_caption('Star Pusher')</p>
		<p class="noindent mono"><span class="line-number">&#160;51.</span> &#160;&#160;&#160;&#160;BASICFONT = pygame.font.Font('freesansbold.ttf', 18)</p>
		<p class="noindent mono"><span class="line-number">&#160;52.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;53.</span> &#160;&#160;&#160;&#160;<span class="comment"># A global dict value that will contain all the Pygame</span></p>
		<p class="noindent mono"><span class="line-number">&#160;54.</span> &#160;&#160;&#160;&#160;<span class="comment"># Surface objects returned by pygame.image.load().</span></p>
		<p class="noindent mono"><span class="line-number">&#160;55.</span> &#160;&#160;&#160;&#160;IMAGESDICT = {'uncovered goal': pygame.image.load('RedSelector.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;56.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'covered goal': pygame.image.load('Selector.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;57.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'star': pygame.image.load('Star.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;58.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'corner': pygame.image.load('Wall Block Tall.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;59.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'wall': pygame.image.load('Wood Block Tall.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;60.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'inside floor': pygame.image.load('Plain Block.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;61.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'outside floor': pygame.image.load('Grass Block.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;62.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'title': pygame.image.load('star_title.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;63.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'solved': pygame.image.load('star_solved.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;64.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'princess': pygame.image.load('princess.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;65.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'boy': pygame.image.load('boy.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;66.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'catgirl': pygame.image.load('catgirl.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;67.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'horngirl': pygame.image.load('horngirl.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;68.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'pinkgirl': pygame.image.load('pinkgirl.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;69.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'rock': pygame.image.load('Rock.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;70.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'short tree': pygame.image.load('Tree_Short.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;71.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'tall tree': pygame.image.load('Tree_Tall.png'),</p>
		<p class="noindent mono"><span class="line-number">&#160;72.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'ugly tree': pygame.image.load('Tree_Ugly.png')}</p>
		<p class="noindent mono"><span class="line-number">&#160;73.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;74.</span> &#160;&#160;&#160;&#160;<span class="comment"># These dict values are global, and map the character that appears</span></p>
		<p class="noindent mono"><span class="line-number">&#160;75.</span> &#160;&#160;&#160;&#160;<span class="comment"># in the level file to the Surface object it represents.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;76.</span> &#160;&#160;&#160;&#160;TILEMAPPING = {'x': IMAGESDICT['corner'],</p>
		<p class="noindent mono"><span class="line-number">&#160;77.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'#': IMAGESDICT['wall'],</p>
		<p class="noindent mono"><span class="line-number">&#160;78.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'o': IMAGESDICT['inside floor'],</p>
		<p class="noindent mono"><span class="line-number">&#160;79.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;' ': IMAGESDICT['outside floor']}</p>
		<p class="noindent mono"><span class="line-number">&#160;80.</span> &#160;&#160;&#160;&#160;OUTSIDEDECOMAPPING = {'1': IMAGESDICT['rock'],</p>
		<p class="noindent mono"><span class="line-number">&#160;81.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'2': IMAGESDICT['short tree'],</p>
		<p class="noindent mono"><span class="line-number">&#160;82.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'3': IMAGESDICT['tall tree'],</p>
		<p class="noindent mono"><span class="line-number">&#160;83.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'4': IMAGESDICT['ugly tree']}</p>
		<p class="noindent mono"><span class="line-number">&#160;84.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;85.</span> &#160;&#160;&#160;&#160;<span class="comment"># PLAYERIMAGES is a list of all possible characters the player can be.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;86.</span> &#160;&#160;&#160;&#160;<span class="comment"># currentImage is the index of the player's current player image.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;87.</span> &#160;&#160;&#160;&#160;currentImage = 0</p>
		<p class="noindent mono"><span class="line-number">&#160;88.</span> &#160;&#160;&#160;&#160;PLAYERIMAGES = [IMAGESDICT['princess'],</p>
		<p class="noindent mono"><span class="line-number">&#160;89.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGESDICT['boy'],</p>
		<p class="noindent mono"><span class="line-number">&#160;90.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGESDICT['catgirl'],</p>
		<p class="noindent mono"><span class="line-number">&#160;91.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGESDICT['horngirl'],</p>
		<p class="noindent mono"><span class="line-number">&#160;92.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;IMAGESDICT['pinkgirl']]</p>
		<p class="noindent mono"><span class="line-number">&#160;93.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;94.</span> &#160;&#160;&#160;&#160;startScreen() <span class="comment"># show the title screen until the user presses a key</span></p>
		<p class="noindent mono"><span class="line-number">&#160;95.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;96.</span> &#160;&#160;&#160;&#160;<span class="comment"># Read in the levels from the text file. See the readLevelsFile() for</span></p>
		<p class="noindent mono"><span class="line-number">&#160;97.</span> &#160;&#160;&#160;&#160;<span class="comment"># details on the format of this file and how to make your own levels.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;98.</span> &#160;&#160;&#160;&#160;levels = readLevelsFile('starPusherLevels.txt')</p>
		<p class="noindent mono"><span class="line-number">&#160;99.</span> &#160;&#160;&#160;&#160;currentLevelIndex = 0</p>
		<p class="noindent mono"><span class="line-number">100.</span></p>
		<p class="noindent mono"><span class="line-number">101.</span> &#160;&#160;&#160;&#160;<span class="comment"># The main game loop. This loop runs a single level, when the user</span></p>
		<p class="noindent mono"><span class="line-number">102.</span> &#160;&#160;&#160;&#160;<span class="comment"># finishes that level, the next/previous level is loaded.</span></p>
		<p class="noindent mono"><span class="line-number">103.</span> &#160;&#160;&#160;&#160;while True: <span class="comment"># main game loop</span></p>
		<p class="noindent mono"><span class="line-number">104.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Run the level to actually start playing the game:</span></p>
		<p class="noindent mono"><span class="line-number">105.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result = runLevel(levels, currentLevelIndex)</p>
		<p class="noindent mono"><span class="line-number">106.</span></p>
		<p class="noindent mono"><span class="line-number">107.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if result in ('solved', 'next'):</p>
		<p class="noindent mono"><span class="line-number">108.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Go to the next level.</span></p>
		<p class="noindent mono"><span class="line-number">109.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentLevelIndex += 1</p>
		<p class="noindent mono"><span class="line-number">110.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if currentLevelIndex &gt;= len(levels):</p>
		<p class="noindent mono"><span class="line-number">111.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># If there are no more levels, go back to the first one.</span></p>
		<p class="noindent mono"><span class="line-number">112.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentLevelIndex = 0</p>
		<p class="noindent mono"><span class="line-number">113.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif result == 'back':</p>
		<p class="noindent mono"><span class="line-number">114.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Go to the previous level.</span></p>
		<p class="noindent mono"><span class="line-number">115.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentLevelIndex -= 1</p>
		<p class="noindent mono"><span class="line-number">116.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if currentLevelIndex &lt; 0:</p>
		<p class="noindent mono"><span class="line-number">117.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># If there are no previous levels, go to the last one.</span></p>
		<p class="noindent mono"><span class="line-number">118.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentLevelIndex = len(levels)-1</p>
		<p class="noindent mono"><span class="line-number">119.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif result == 'reset':</p>
		<p class="noindent mono"><span class="line-number">120.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pass <span class="comment"># Do nothing. Loop re-calls runLevel() to reset the level</span></p>
		<p class="noindent mono"><span class="line-number">121.</span></p>
		<p class="noindent mono"><span class="line-number">122.</span></p>
		<p class="noindent mono"><span class="line-number">123.</span> def runLevel(levels, levelNum):</p>
		<p class="noindent mono"><span class="line-number">124.</span> &#160;&#160;&#160;&#160;global currentImage</p>
		<p class="noindent mono"><span class="line-number">125.</span> &#160;&#160;&#160;&#160;levelObj = levels[levelnum]</p>
		<p class="noindent mono"><span class="line-number">126.</span> &#160;&#160;&#160;&#160;mapObj = decorateMap(levelObj['mapObj'], levelObj['startState']['player'])</p>
		<p class="noindent mono"><span class="line-number">127.</span> &#160;&#160;&#160;&#160;gameStateObj = copy.deepcopy(levelObj['startState'])</p>
		<p class="noindent mono"><span class="line-number">128.</span> &#160;&#160;&#160;&#160;mapNeedsRedraw = True <span class="comment"># set to True to call drawMap()</span></p>
		<p class="noindent mono"><span class="line-number">129.</span> &#160;&#160;&#160;&#160;levelSurf = BASICFONT.render('Level %s of %s' % (levelObj['levelNum'] + 1, totalNumOfLevels), 1, TEXTCOLOR)</p>
		<p class="noindent mono"><span class="line-number">130.</span> &#160;&#160;&#160;&#160;levelRect = levelSurf.get_rect()</p>
		<p class="noindent mono"><span class="line-number">131.</span> &#160;&#160;&#160;&#160;levelRect.bottomleft = (20, WINHEIGHT - 35)</p>
		<p class="noindent mono"><span class="line-number">132.</span> &#160;&#160;&#160;&#160;mapWidth = len(mapObj) * TILEWIDTH</p>
		<p class="noindent mono"><span class="line-number">133.</span> &#160;&#160;&#160;&#160;mapHeight = (len(mapObj[0]) - 1) * (TILEHEIGHT - TILEFLOORHEIGHT) + TILEHEIGHT</p>
		<p class="noindent mono"><span class="line-number">134.</span> &#160;&#160;&#160;&#160;MAX_CAM_X_PAN = abs(HALF_WINHEIGHT - int(mapHeight / 2)) + TILEWIDTH</p>
		<p class="noindent mono"><span class="line-number">135.</span> &#160;&#160;&#160;&#160;MAX_CAM_Y_PAN = abs(HALF_WINWIDTH - int(mapWidth / 2)) + TILEHEIGHT</p>
		<p class="noindent mono"><span class="line-number">136.</span></p>
		<p class="noindent mono"><span class="line-number">137.</span> &#160;&#160;&#160;&#160;levelIsComplete = False</p>
		<p class="noindent mono"><span class="line-number">138.</span> &#160;&#160;&#160;&#160;<span class="comment"># Track how much the camera has moved:</span></p>
		<p class="noindent mono"><span class="line-number">139.</span> &#160;&#160;&#160;&#160;cameraOffsetX = 0</p>
		<p class="noindent mono"><span class="line-number">140.</span> &#160;&#160;&#160;&#160;cameraOffsetY = 0</p>
		<p class="noindent mono"><span class="line-number">141.</span> &#160;&#160;&#160;&#160;<span class="comment"># Track if the keys to move the camera are being held down:</span></p>
		<p class="noindent mono"><span class="line-number">142.</span> &#160;&#160;&#160;&#160;cameraUp = False</p>
		<p class="noindent mono"><span class="line-number">143.</span> &#160;&#160;&#160;&#160;cameraDown = False</p>
		<p class="noindent mono"><span class="line-number">144.</span> &#160;&#160;&#160;&#160;cameraLeft = False</p>
		<p class="noindent mono"><span class="line-number">145.</span> &#160;&#160;&#160;&#160;cameraRight = False</p>
		<p class="noindent mono"><span class="line-number">146.</span></p>
		<p class="noindent mono"><span class="line-number">147.</span> &#160;&#160;&#160;&#160;while True: <span class="comment"># main game loop</span></p>
		<p class="noindent mono"><span class="line-number">148.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Reset these variables:</span></p>
		<p class="noindent mono"><span class="line-number">149.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;playerMoveTo = None</p>
		<p class="noindent mono"><span class="line-number">150.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyPressed = False</p>
		<p class="noindent mono"><span class="line-number">151.</span></p>
		<p class="noindent mono"><span class="line-number">152.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for event in pygame.event.get(): <span class="comment"># event handling loop</span></p>
		<p class="noindent mono"><span class="line-number">153.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if event.type == QUIT:</p>
		<p class="noindent mono"><span class="line-number">154.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Player clicked the &quot;X&quot; at the corner of the window.</span></p>
		<p class="noindent mono"><span class="line-number">155.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;terminate()</p>
		<p class="noindent mono"><span class="line-number">156.</span></p>
		<p class="noindent mono"><span class="line-number">157.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.type == KEYDOWN:</p>
		<p class="noindent mono"><span class="line-number">158.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Handle key presses</span></p>
		<p class="noindent mono"><span class="line-number">159.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;keyPressed = True</p>
		<p class="noindent mono"><span class="line-number">160.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if event.key == K_LEFT:</p>
		<p class="noindent mono"><span class="line-number">161.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;playerMoveTo = LEFT</p>
		<p class="noindent mono"><span class="line-number">162.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_RIGHT:</p>
		<p class="noindent mono"><span class="line-number">163.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;playerMoveTo = RIGHT</p>
		<p class="noindent mono"><span class="line-number">164.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_UP:</p>
		<p class="noindent mono"><span class="line-number">165.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;playerMoveTo = UP</p>
		<p class="noindent mono"><span class="line-number">166.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_DOWN:</p>
		<p class="noindent mono"><span class="line-number">167.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;playerMoveTo = DOWN</p>
		<p class="noindent mono"><span class="line-number">168.</span></p>
		<p class="noindent mono"><span class="line-number">169.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Set the camera move mode.</span></p>
		<p class="noindent mono"><span class="line-number">170.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_a:</p>
		<p class="noindent mono"><span class="line-number">171.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cameraLeft = True</p>
		<p class="noindent mono"><span class="line-number">172.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_d:</p>
		<p class="noindent mono"><span class="line-number">173.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cameraRight = True</p>
		<p class="noindent mono"><span class="line-number">174.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_w:</p>
		<p class="noindent mono"><span class="line-number">175.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cameraUp = True</p>
		<p class="noindent mono"><span class="line-number">176.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_s:</p>
		<p class="noindent mono"><span class="line-number">177.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cameraDown = True</p>
		<p class="noindent mono"><span class="line-number">178.</span></p>
		<p class="noindent mono"><span class="line-number">179.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_n:</p>
		<p class="noindent mono"><span class="line-number">180.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 'next'</p>
		<p class="noindent mono"><span class="line-number">181.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_b:</p>
		<p class="noindent mono"><span class="line-number">182.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 'back'</p>
		<p class="noindent mono"><span class="line-number">183.</span></p>
		<p class="noindent mono"><span class="line-number">184.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_ESCAPE:</p>
		<p class="noindent mono"><span class="line-number">185.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;terminate() <span class="comment"># Esc key quits.</span></p>
		<p class="noindent mono"><span class="line-number">186.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_BACKSPACE:</p>
		<p class="noindent mono"><span class="line-number">187.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 'reset' <span class="comment"># Reset the level.</span></p>
		<p class="noindent mono"><span class="line-number">188.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.key == K_p:</p>
		<p class="noindent mono"><span class="line-number">189.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Change the player image to the next one.</span></p>
		<p class="noindent mono"><span class="line-number">190.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentImage += 1</p>
		<p class="noindent mono"><span class="line-number">191.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if currentImage &gt;= len(PLAYERIMAGES):</p>
		<p class="noindent mono"><span class="line-number">192.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># After the last player image, use the first one.</span></p>
		<p class="noindent mono"><span class="line-number">193.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;currentImage = 0</p>
		<p class="noindent mono"><span class="line-number">194.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapNeedsRedraw = True</p>
		<p class="noindent mono"><span class="line-number">195.</span></p>
		<p class="noindent mono"><span class="line-number">196.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif event.type == KEYUP:</p>
		<p class="noindent mono"><span class="line-number">197.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Unset the camera move mode.</span></p>
		<p class="noindent mono"><span class="line-number">198.</span>                 if event.key == K_a:</p>
		<p class="noindent mono"><span class="line-number">199.</span>                     cameraLeft = False</p>
		<p class="noindent mono"><span class="line-number">200.</span>                 elif event.key == K_d:</p>
		<p class="noindent mono"><span class="line-number">201.</span>                     cameraRight = False</p>
		<p class="noindent mono"><span class="line-number">202.</span>                 elif event.key == K_w:</p>
		<p class="noindent mono"><span class="line-number">203.</span>                     cameraUp = False</p>
		<p class="noindent mono"><span class="line-number">204.</span>                 elif event.key == K_s:</p>
		<p class="noindent mono"><span class="line-number">205.</span>                     cameraDown = False</p>
		<p class="noindent mono"><span class="line-number">206.</span></p>
		<p class="noindent mono"><span class="line-number">207.</span>         if playerMoveTo != None and not levelIsComplete:</p>
		<p class="noindent mono"><span class="line-number">208.</span>             <span class="comment"># If the player pushed a key to move, make the move</span></p>
		<p class="noindent mono"><span class="line-number">209.</span>             <span class="comment"># (if possible) and push any stars that are pushable.</span></p>
		<p class="noindent mono"><span class="line-number">210.</span>             moved = makeMove(mapObj, gameStateObj, playerMoveTo)</p>
		<p class="noindent mono"><span class="line-number">211.</span></p>
		<p class="noindent mono"><span class="line-number">212.</span>             if moved:</p>
		<p class="noindent mono"><span class="line-number">213.</span>                 <span class="comment"># increment the step counter.</span></p>

		<p class="noindent mono"><span class="line-number">214.</span>                 gameStateObj['stepCounter']
+= 1</p>

		<p class="noindent mono"><span class="line-number">215.</span>                 mapNeedsRedraw
= True</p>

		<p class="noindent mono"><span class="line-number">216.</span> </p>

		<p class="noindent mono"><span class="line-number">217.</span>             if
isLevelFinished(levelObj, gameStateObj):</p>

		<p class="noindent mono"><span class="line-number">218.</span>                 <span
class="comment"># level is solved, we should show the
&quot;Solved!&quot; image.</span></p>

		<p class="noindent mono"><span class="line-number">219.</span>                 levelIsComplete
= True</p>

		<p class="noindent mono"><span class="line-number">220.</span>                 keyPressed
= False</p>

		<p class="noindent mono"><span class="line-number">221.</span> </p>

		<p class="noindent mono"><span class="line-number">222.</span>         DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">223.</span> </p>

		<p class="noindent mono"><span class="line-number">224.</span>         if
mapNeedsRedraw:</p>

		<p class="noindent mono"><span class="line-number">225.</span>             mapSurf
= drawMap(mapObj, gameStateObj, levelObj['goals'])</p>

		<p class="noindent mono"><span class="line-number">226.</span>             mapNeedsRedraw
= False</p>

		<p class="noindent mono"><span class="line-number">227.</span> </p>

		<p class="noindent mono"><span class="line-number">228.</span>         if
cameraUp and cameraOffsetY &lt; MAX_CAM_X_PAN:</p>

		<p class="noindent mono"><span class="line-number">229.</span>             cameraOffsetY
+= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">230.</span>         elif
cameraDown and cameraOffsetY &gt; -MAX_CAM_X_PAN:</p>

		<p class="noindent mono"><span class="line-number">231.</span>             cameraOffsetY
-= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">232.</span>         if
cameraLeft and cameraOffsetX &lt; MAX_CAM_Y_PAN:</p>

		<p class="noindent mono"><span class="line-number">233.</span>             cameraOffsetX
+= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">234.</span>         elif
cameraRight and cameraOffsetX &gt; -MAX_CAM_Y_PAN:</p>

		<p class="noindent mono"><span class="line-number">235.</span>             cameraOffsetX
-= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">236.</span> </p>

		<p class="noindent mono"><span class="line-number">237.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Adjust mapSurf's Rect object based on the camera
offset.</span></p>

		<p class="noindent mono"><span class="line-number">238.</span>         mapSurfRect
= mapSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">239.</span>         mapSurfRect.center
= (HALF_WINWIDTH + cameraOffsetX, HALF_WINHEIGHT + cameraOffsetY)</p>

		<p class="noindent mono"><span class="line-number">240.</span> </p>

		<p class="noindent mono"><span class="line-number">241.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Draw mapSurf to the DISPLAYSURF Surface object.</span></p>

		<p class="noindent mono"><span class="line-number">242.</span>         DISPLAYSURF.blit(mapSurf,
mapSurfRect)</p>

		<p class="noindent mono"><span class="line-number">243.</span> </p>

		<p class="noindent mono"><span class="line-number">244.</span>         DISPLAYSURF.blit(levelSurf,
levelRect)</p>

		<p class="noindent mono"><span class="line-number">245.</span>         stepSurf
= BASICFONT.render('Steps: %s' % (gameStateObj['stepCounter']), 1, TEXTCOLOR)</p>

		<p class="noindent mono"><span class="line-number">246.</span>         stepRect
= stepSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">247.</span>         stepRect.bottomleft
= (20, WINHEIGHT - 10)</p>

		<p class="noindent mono"><span class="line-number">248.</span>         DISPLAYSURF.blit(stepSurf,
stepRect)</p>

		<p class="noindent mono"><span class="line-number">249.</span> </p>

		<p class="noindent mono"><span class="line-number">250.</span>         if
levelIsComplete:</p>

		<p class="noindent mono"><span class="line-number">251.</span>             <span
class="comment"># is solved, show the &quot;Solved!&quot; image until
the player</span></p>

		<p class="noindent mono"><span class="line-number">252.</span>             <span
class="comment"># has pressed a key.</span></p>

		<p class="noindent mono"><span class="line-number">253.</span>             solvedRect
= IMAGESDICT['solved'].get_rect()</p>

		<p class="noindent mono"><span class="line-number">254.</span>             solvedRect.center
= (HALF_WINWIDTH, HALF_WINHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">255.</span>             DISPLAYSURF.blit(IMAGESDICT['solved'],
solvedRect)</p>

		<p class="noindent mono"><span class="line-number">256.</span> </p>

		<p class="noindent mono"><span class="line-number">257.</span>             if
keyPressed:</p>

		<p class="noindent mono"><span class="line-number">258.</span>                 return
'solved'</p>

		<p class="noindent mono"><span class="line-number">259.</span> </p>

		<p class="noindent mono"><span class="line-number">260.</span>         pygame.display.update()
<span class="comment"># draw DISPLAYSURF to the screen.</span></p>

		<p class="noindent mono"><span class="line-number">261.</span>         FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">262.</span></p>

		<p class="noindent mono"><span class="line-number">263.</span></p>

		<p class="noindent mono"><span class="line-number">274.</span> def
decorateMap(mapObj, startxy):</p>

		<p class="noindent mono"><span class="line-number">275.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Makes a copy of the given map object
and modifies it.</span></p>

		<p class="noindent mono"><span class="line-number">276.</span> &#160;&#160;&#160;&#160;<span
class="comment">Here is what is done to it:</span></p>

		<p class="noindent mono"><span class="line-number">277.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment">* Walls that are corners are turned into corner pieces.</span></p>

		<p class="noindent mono"><span class="line-number">278.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment">* The outside/inside floor tile distinction is made.</span></p>

		<p class="noindent mono"><span class="line-number">279.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment">* Tree/rock decorations are randomly added to the
outside tiles.</span></p>

		<p class="noindent mono"><span class="line-number">280.</span> </p>

		<p class="noindent mono"><span class="line-number">281.</span> &#160;&#160;&#160;&#160;<span
class="comment">Returns the decorated map object.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">282.</span> </p>

		<p class="noindent mono"><span class="line-number">283.</span>     startx,
starty = startxy <span class="comment"># Syntactic sugar</span></p>

		<p class="noindent mono"><span class="line-number">284.</span> </p>

		<p class="noindent mono"><span class="line-number">285.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Copy the map object so we don't modify the original
passed</span></p>

		<p class="noindent mono"><span class="line-number">286.</span>     mapObjCopy
= copy.deepcopy(mapObj)</p>

		<p class="noindent mono"><span class="line-number">287.</span> </p>

		<p class="noindent mono"><span class="line-number">288.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Remove the non-wall characters from the map data</span></p>

		<p class="noindent mono"><span class="line-number">289.</span>     for
x in range(len(mapObjCopy)):</p>

		<p class="noindent mono"><span class="line-number">290.</span>         for
y in range(len(mapObjCopy[0])):</p>

		<p class="noindent mono"><span class="line-number">291.</span>             if
mapObjCopy[x][y] in ('$', '.', '@', '+', '*'):</p>

		<p class="noindent mono"><span class="line-number">292.</span>                 mapObjCopy[x][y]
= ' '</p>

		<p class="noindent mono"><span class="line-number">293.</span> </p>

		<p class="noindent mono"><span class="line-number">294.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Flood fill to determine inside/outside floor tiles.</span></p>

		<p class="noindent mono"><span class="line-number">295.</span>     floodFill(mapObjCopy,
startx, starty, ' ', 'o')</p>

		<p class="noindent mono"><span class="line-number">296.</span> </p>

		<p class="noindent mono"><span class="line-number">297.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Convert the adjoined walls into corner tiles.</span></p>

		<p class="noindent mono"><span class="line-number">298.</span>     for
x in range(len(mapObjCopy)):</p>

		<p class="noindent mono"><span class="line-number">299.</span>         for
y in range(len(mapObjCopy[0])):</p>

		<p class="noindent mono"><span class="line-number">300.</span></p>

		<p class="noindent mono"><span class="line-number">301.</span>             if
mapObjCopy[x][y] == '#':</p>

		<p class="noindent mono"><span class="line-number">302.</span>                 if
(isWall(mapObjCopy, x, y-1) and isWall(mapObjCopy, x+1, y)) or \</p>

		<p class="noindent mono"><span class="line-number">303.</span>                    (isWall(mapObjCopy,
x+1, y) and isWall(mapObjCopy, x, y+1)) or \</p>

		<p class="noindent mono"><span class="line-number">304.</span>                    (isWall(mapObjCopy,
x, y+1) and isWall(mapObjCopy, x-1, y)) or \</p>

		<p class="noindent mono"><span class="line-number">305.</span>                    (isWall(mapObjCopy,
x-1, y) and isWall(mapObjCopy, x, y-1)):</p>

		<p class="noindent mono"><span class="line-number">306.</span>                     mapObjCopy[x][y]
= 'x'</p>

		<p class="noindent mono"><span class="line-number">307.</span></p>

		<p class="noindent mono"><span class="line-number">308.</span>             elif
mapObjCopy[x][y] == ' ' and random.randint(0, 99) &lt; OUTSIDE_DECORATION_PCT:</p>

		<p class="noindent mono"><span class="line-number">309.</span>                 mapObjCopy[x][y]
= random.choice(list(OUTSIDEDECOMAPPING.keys()))</p>

		<p class="noindent mono"><span class="line-number">310.</span> </p>

		<p class="noindent mono"><span class="line-number">311.</span>     return
mapObjCopy<span class="line-number"> </span></p>

		<p class="noindent mono"><span class="line-number">312.</span></p>

		<p class="noindent mono"><span class="line-number">313.</span></p>

		<p class="noindent mono"><span class="line-number">314.</span> def
isBlocked(mapObj, gameStateObj, x, y):</p>

		<p class="noindent mono"><span class="line-number">315.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Returns True if the (x, y) position
on the map is</span></p>

		<p class="noindent mono"><span class="line-number">316.</span> &#160;&#160;&#160;&#160;<span
class="comment">blocked by a wall or star, otherwise return
False.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">317.</span></p>

		<p class="noindent mono"><span class="line-number">318.</span>     if
isWall(mapObj, x, y):</p>

		<p class="noindent mono"><span class="line-number">319.</span>         return
True</p>

		<p class="noindent mono"><span class="line-number">320.</span></p>

		<p class="noindent mono"><span class="line-number">321.</span>     elif
x &lt; 0 or x &gt;= len(mapObj) or y &lt; 0 or y &gt;= len(mapObj[x]):</p>

		<p class="noindent mono"><span class="line-number">322.</span>         return
True <span class="comment"># x and y aren't actually on the map.</span></p>

		<p class="noindent mono"><span class="line-number">323.</span></p>

		<p class="noindent mono"><span class="line-number">324.</span>     elif
(x, y) in gameStateObj['stars']:</p>

		<p class="noindent mono"><span class="line-number">325.</span>         return
True <span class="comment"># a star is blocking</span></p>

		<p class="noindent mono"><span class="line-number">326.</span> </p>

		<p class="noindent mono"><span class="line-number">327.</span>     return
False</p>

		<p class="noindent mono"><span class="line-number">328.</span></p>

		<p class="noindent mono"><span class="line-number">329.</span></p>

		<p class="noindent mono"><span class="line-number">330.</span> def
makeMove(mapObj, gameStateObj, playerMoveTo):</p>

		<p class="noindent mono"><span class="line-number">331.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Given a map and game state object,
see if it is possible for the</span></p>

		<p class="noindent mono"><span class="line-number">332.</span> &#160;&#160;&#160;&#160;<span
class="comment">player to make the given move. If it is, then change
the player's</span></p>

		<p class="noindent mono"><span class="line-number">333.</span> &#160;&#160;&#160;&#160;<span
class="comment">position (and the position of any pushed star). If not,
do nothing.</span></p>

		<p class="noindent mono"><span class="line-number">334.</span> </p>

		<p class="noindent mono"><span class="line-number">335.</span> &#160;&#160;&#160;&#160;<span
class="comment">Returns True if the player moved, otherwise
False.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">336.</span> </p>

		<p class="noindent mono"><span class="line-number">337.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Make sure the player can move in the direction they
want.</span></p>

		<p class="noindent mono"><span class="line-number">338.</span>     playerx,
playery = gameStateObj['player']</p>

		<p class="noindent mono"><span class="line-number">339.</span> </p>

		<p class="noindent mono"><span class="line-number">340.</span> &#160;&#160;&#160;&#160;<span
class="comment"># This variable is &quot;syntactic sugar&quot;. Typing
&quot;stars&quot; is more</span></p>

		<p class="noindent mono"><span class="line-number">341.</span> &#160;&#160;&#160;&#160;<span
class="comment"># readable than typing
&quot;gameStateObj['stars']&quot; in our code.</span></p>

		<p class="noindent mono"><span class="line-number">342.</span>     stars
= gameStateObj['stars']</p>

		<p class="noindent mono"><span class="line-number">343.</span> </p>

		<p class="noindent mono"><span class="line-number">344.</span> &#160;&#160;&#160;&#160;<span
class="comment"># The code for handling each of the directions is so
similar aside</span></p>

		<p class="noindent mono"><span class="line-number">345.</span> &#160;&#160;&#160;&#160;<span
class="comment"># from adding or subtracting 1 to the x/y coordinates.
We can</span></p>

		<p class="noindent mono"><span class="line-number">346.</span> &#160;&#160;&#160;&#160;<span
class="comment"># simplify it by using the xOffset and yOffset
variables.</span></p>

		<p class="noindent mono"><span class="line-number">347.</span>     if
playerMoveTo == UP:</p>

		<p class="noindent mono"><span class="line-number">348.</span>         xOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">349.</span>         yOffset
= -1</p>

		<p class="noindent mono"><span class="line-number">350.</span>     elif
playerMoveTo == RIGHT:</p>

		<p class="noindent mono"><span class="line-number">351.</span>         xOffset
= 1</p>

		<p class="noindent mono"><span class="line-number">352.</span>         yOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">353.</span>     elif
playerMoveTo == DOWN:</p>

		<p class="noindent mono"><span class="line-number">354.</span>         xOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">355.</span>         yOffset
= 1</p>

		<p class="noindent mono"><span class="line-number">356.</span>     elif
playerMoveTo == LEFT:</p>

		<p class="noindent mono"><span class="line-number">357.</span>         xOffset
= -1</p>

		<p class="noindent mono"><span class="line-number">358.</span>         yOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">359.</span> </p>

		<p class="noindent mono"><span class="line-number">360.</span> &#160;&#160;&#160;&#160;<span
class="comment"># See if the player can move in that direction.</span></p>

		<p class="noindent mono"><span class="line-number">361.</span>     if
isWall(mapObj, playerx + xOffset, playery + yOffset):</p>

		<p class="noindent mono"><span class="line-number">362.</span>         return
False</p>

		<p class="noindent mono"><span class="line-number">363.</span>     else:</p>

		<p class="noindent mono"><span class="line-number">364.</span>         if
(playerx + xOffset, playery + yOffset) in stars:</p>

		<p class="noindent mono"><span class="line-number">365.</span>             <span
class="comment"># There is a star in the way, see if the player can
push it.</span></p>

		<p class="noindent mono"><span class="line-number">366.</span>             if
not isBlocked(mapObj, gameStateObj, playerx + (xOffset*2), playery +
(yOffset*2)):</p>

		<p class="noindent mono"><span class="line-number">367.</span>                 <span
class="comment"># Move the star.</span></p>

		<p class="noindent mono"><span class="line-number">368.</span>                 ind
= stars.index((playerx + xOffset, playery + yOffset))</p>

		<p class="noindent mono"><span class="line-number">369.</span>                 stars[ind]
= (stars[ind][0] + xOffset, stars[ind][1] + yOffset)</p>

		<p class="noindent mono"><span class="line-number">370.</span>             else:</p>

		<p class="noindent mono"><span class="line-number">371.</span>                 return
False</p>

		<p class="noindent mono"><span class="line-number">372.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Move the player upwards.</span></p>

		<p class="noindent mono"><span class="line-number">373.</span>         gameStateObj['player']
= (playerx + xOffset, playery + yOffset)</p>

		<p class="noindent mono"><span class="line-number">374.</span>         return
True</p>

		<p class="noindent mono"><span class="line-number">375.</span></p>

		<p class="noindent mono"><span class="line-number">376.</span></p>

		<p class="noindent mono"><span class="line-number">377.</span> def
startScreen():</p>

		<p class="noindent mono"><span class="line-number">378.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Display the start screen (which has
the title and instructions)</span></p>

		<p class="noindent mono"><span class="line-number">379.</span> &#160;&#160;&#160;&#160;<span
class="comment">until the player presses a key. Returns
None.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">380.</span> </p>

		<p class="noindent mono"><span class="line-number">381.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Position the title image.</span></p>

		<p class="noindent mono"><span class="line-number">382.</span>     titleRect
= IMAGESDICT['title'].get_rect()</p>

		<p class="noindent mono"><span class="line-number">383.</span>     topCoord
= 50 <span class="comment"># topCoord tracks where to position the top
of the text</span></p>

		<p class="noindent mono"><span class="line-number">384.</span>     titleRect.top
= topCoord</p>

		<p class="noindent mono"><span class="line-number">385.</span>     titleRect.centerx
= HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">386.</span>     topCoord
+= titleRect.height</p>

		<p class="noindent mono"><span class="line-number">387.</span> </p>

		<p class="noindent mono"><span class="line-number">388.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Unfortunately, Pygame's font &amp; text system only
shows one line at</span></p>

		<p class="noindent mono"><span class="line-number">389.</span> &#160;&#160;&#160;&#160;<span
class="comment"># a time, so we can't use strings with \n newline
characters in them.</span></p>

		<p class="noindent mono"><span class="line-number">390.</span> &#160;&#160;&#160;&#160;<span
class="comment"># So we will use a list with each line in it.</span></p>

		<p class="noindent mono"><span class="line-number">391.</span>     instructionText
= ['Push the stars over the marks.',</p>

		<p class="noindent mono"><span class="line-number">392.</span>                        'Arrow
keys to move, WASD for camera control, P to change character.',</p>

		<p class="noindent mono"><span class="line-number">393.</span>                        'Backspace
to reset level, Esc to quit.',</p>

		<p class="noindent mono"><span class="line-number">394.</span>                        'N
for next level, B to go back a level.']</p>

		<p class="noindent mono"><span class="line-number">395.</span> </p>

		<p class="noindent mono"><span class="line-number">396.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Start with drawing a blank color to the entire
window:</span></p>

		<p class="noindent mono"><span class="line-number">397.</span>     DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">398.</span> </p>

		<p class="noindent mono"><span class="line-number">399.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Draw the title image to the window:</span></p>

		<p class="noindent mono"><span class="line-number">400.</span>     DISPLAYSURF.blit(IMAGESDICT['title'],
titleRect)</p>

		<p class="noindent mono"><span class="line-number">401.</span> </p>

		<p class="noindent mono"><span class="line-number">402.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Position and draw the text.</span></p>

		<p class="noindent mono"><span class="line-number">403.</span>     for
i in range(len(instructionText)):</p>

		<p class="noindent mono"><span class="line-number">404.</span>         instSurf
= BASICFONT.render(instructionText[i], 1, TEXTCOLOR)</p>

		<p class="noindent mono"><span class="line-number">405.</span>         instRect
= instSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">406.</span>         topCoord
+= 10 <span class="comment"># 10 pixels will go in between each line of
text.</span></p>

		<p class="noindent mono"><span class="line-number">407.</span>         instRect.top
= topCoord</p>

		<p class="noindent mono"><span class="line-number">408.</span>         instRect.centerx
= HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">409.</span>         topCoord
+= instRect.height <span class="comment"># Adjust for the height of the
line.</span></p>

		<p class="noindent mono"><span class="line-number">410.</span>         DISPLAYSURF.blit(instSurf,
instRect)</p>

		<p class="noindent mono"><span class="line-number">411.</span> </p>

		<p class="noindent mono"><span class="line-number">412.</span>     while
True: <span class="comment"># Main loop for the start screen.</span></p>

		<p class="noindent mono"><span class="line-number">413.</span>         for
event in pygame.event.get():</p>

		<p class="noindent mono"><span class="line-number">414.</span>             if
event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">415.</span>                 terminate()</p>

		<p class="noindent mono"><span class="line-number">416.</span>             elif
event.type == KEYDOWN:</p>

		<p class="noindent mono"><span class="line-number">417.</span>                 if
event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">418.</span>                     terminate()</p>

		<p class="noindent mono"><span class="line-number">419.</span>                 return
<span class="comment"># user has pressed a key, so return.</span></p>

		<p class="noindent mono"><span class="line-number">420.</span> </p>

		<p class="noindent mono"><span class="line-number">421.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Display the DISPLAYSURF contents to the actual
screen.</span></p>

		<p class="noindent mono"><span class="line-number">422.</span>         pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">423.</span>         FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">424.</span></p>

		<p class="noindent mono"><span class="line-number">425.</span></p>

		<p class="noindent mono"><span class="line-number">426.</span> def
readLevelsFile(filename):</p>

		<p class="noindent mono"><span class="line-number">427.</span>     assert
os.path.exists(filename), 'Cannot find the level file: %s' % (filename)</p>

		<p class="noindent mono"><span class="line-number">428.</span>     mapFile
= open(filename, 'r')</p>

		<p class="noindent mono"><span class="line-number">429.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Each level must end with a blank line</span></p>

		<p class="noindent mono"><span class="line-number">430.</span>     content
= mapFile.readlines() + ['\r\n']</p>

		<p class="noindent mono"><span class="line-number">431.</span>
mapFile.close()</p>

		<p class="noindent mono"><span class="line-number">432.</span></p>

		<p class="noindent mono"><span class="line-number">433.</span>     levels
= [] <span class="comment"># Will contain a list of level objects.</span></p>

		<p class="noindent mono"><span class="line-number">434.</span>     levelNum
= 0</p>

		<p class="noindent mono"><span class="line-number">435.</span>     mapTextLines
= [] <span class="comment"># contains the lines for a single level's
map.</span></p>

		<p class="noindent mono"><span class="line-number">436.</span>     mapObj
= [] <span class="comment"># the map object made from the data in mapTextLines</span></p>

		<p class="noindent mono"><span class="line-number">437.</span>     for
lineNum in range(len(content)):</p>

		<p class="noindent mono"><span class="line-number">438.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Process each line that was in the level file.</span></p>

		<p class="noindent mono"><span class="line-number">439.</span>         line
= content[lineNum].rstrip('\r\n')</p>

		<p class="noindent mono"><span class="line-number">440.</span> </p>

		<p class="noindent mono"><span class="line-number">441.</span>         if
';' in line:</p>

		<p class="noindent mono"><span class="line-number">442.</span>             <span
class="comment"># Ignore the ; lines, they're comments in the level
file.</span></p>

		<p class="noindent mono"><span class="line-number">443.</span>             line
= line[:line.find(';')]</p>

		<p class="noindent mono"><span class="line-number">444.</span> </p>

		<p class="noindent mono"><span class="line-number">445.</span>         if
line != '':</p>

		<p class="noindent mono"><span class="line-number">446.</span>             <span
class="comment"># This line is part of the map.</span></p>

		<p class="noindent mono"><span class="line-number">447.</span>             mapTextLines.append(line)</p>

		<p class="noindent mono"><span class="line-number">448.</span>         elif
line == '' and len(mapTextLines) &gt; 0:</p>

		<p class="noindent mono"><span class="line-number">449.</span>             <span
class="comment"># A blank line indicates the end of a level's map in
the file.</span></p>

		<p class="noindent mono"><span class="line-number">450.</span>             <span
class="comment"># Convert the text in mapTextLines into a level object.</span></p>

		<p class="noindent mono"><span class="line-number">451.</span> </p>

		<p class="noindent mono"><span class="line-number">452.</span>             <span
class="comment"># Find the longest row in the map.</span></p>

		<p class="noindent mono"><span class="line-number">453.</span>             maxWidth
= -1</p>

		<p class="noindent mono"><span class="line-number">454.</span>             for
i in range(len(mapTextLines)):</p>

		<p class="noindent mono"><span class="line-number">455.</span>                 if
len(mapTextLines[i]) &gt; maxWidth:</p>

		<p class="noindent mono"><span class="line-number">456.</span>                     maxWidth
= len(mapTextLines[i])</p>

		<p class="noindent mono"><span class="line-number">457.</span>             <span
class="comment"># Add spaces to the ends of the shorter rows. This</span></p>

		<p class="noindent mono"><span class="line-number">458.</span>             <span
class="comment"># ensures the map will be rectangular.</span></p>

		<p class="noindent mono"><span class="line-number">459.</span>             for
i in range(len(mapTextLines)):</p>

		<p class="noindent mono"><span class="line-number">460.</span>                 mapTextLines[i]
+= ' ' * (maxWidth - len(mapTextLines[i]))</p>

		<p class="noindent mono"><span class="line-number">461.</span> </p>

		<p class="noindent mono"><span class="line-number">462.</span>             <span
class="comment"># Convert mapTextLines to a map object.</span></p>

		<p class="noindent mono"><span class="line-number">463.</span>             for
x in range(len(mapTextLines[0])):</p>

		<p class="noindent mono"><span class="line-number">464.</span>                 mapObj.append([])</p>

		<p class="noindent mono"><span class="line-number">465.</span>             for
y in range(len(mapTextLines)):</p>

		<p class="noindent mono"><span class="line-number">466.</span>                 for
x in range(maxWidth):</p>

		<p class="noindent mono"><span class="line-number">467.</span>                     mapObj[x].append(mapTextLines[y][x])</p>

		<p class="noindent mono"><span class="line-number">468.</span> </p>

		<p class="noindent mono"><span class="line-number">469.</span>             <span
class="comment"># Loop through the spaces in the map and find the @, .,
and $</span></p>

		<p class="noindent mono"><span class="line-number">470.</span>             <span
class="comment"># characters for the starting game state.</span></p>

		<p class="noindent mono"><span class="line-number">471.</span>             startx
= None <span class="comment"># The x and y for the player's starting
position</span></p>

		<p class="noindent mono"><span class="line-number">472.</span>             starty
= None</p>

		<p class="noindent mono"><span class="line-number">473.</span>             goals
= [] <span class="comment"># list of (x, y) tuples for each goal.</span></p>

		<p class="noindent mono"><span class="line-number">474.</span>             stars
= [] <span class="comment"># list of (x, y) for each star's starting
position.</span></p>

		<p class="noindent mono"><span class="line-number">475.</span>             for
x in range(maxWidth):</p>

		<p class="noindent mono"><span class="line-number">476.</span>                 for
y in range(len(mapObj[x])):</p>

		<p class="noindent mono"><span class="line-number">477.</span>                     if
mapObj[x][y] in ('@', '+'):</p>

		<p class="noindent mono"><span class="line-number">478.</span>                         <span
class="comment"># '@' is player, '+' is player &amp; goal</span></p>

		<p class="noindent mono"><span class="line-number">479.</span>                         startx
= x</p>

		<p class="noindent mono"><span class="line-number">480.</span>                         starty
= y</p>

		<p class="noindent mono"><span class="line-number">481.</span>                     if
mapObj[x][y] in ('.', '+', '*'):</p>

		<p class="noindent mono"><span class="line-number">482.</span>                         <span
class="comment"># '.' is goal, '*' is star &amp; goal</span></p>

		<p class="noindent mono"><span class="line-number">483.</span>                         goals.append((x,
y))</p>

		<p class="noindent mono"><span class="line-number">484.</span>                     if
mapObj[x][y] in ('$', '*'):</p>

		<p class="noindent mono"><span class="line-number">485.</span>                         <span
class="comment"># '$' is star</span></p>

		<p class="noindent mono"><span class="line-number">486.</span>                         stars.append((x,
y))</p>

		<p class="noindent mono"><span class="line-number">487.</span> </p>

		<p class="noindent mono"><span class="line-number">488.</span>             <span
class="comment"># Basic level design sanity checks:</span></p>

		<p class="noindent mono"><span class="line-number">489.</span>             assert
startx != None and starty != None, 'Level %s (around line %s) in %s is missing
a &quot;@&quot; or &quot;+&quot; to mark the start point.' % (levelNum+1,
lineNum, filename)</p>

		<p class="noindent mono"><span class="line-number">490.</span>             assert
len(goals) &gt; 0, 'Level %s (around line %s) in %s must have at least one
goal.' % (levelNum+1, lineNum, filename)</p>

		<p class="noindent mono"><span class="line-number"></span></p>

		<p class="noindent mono"><span class="line-number">491.</span>             assert
len(stars) &gt;= len(goals), 'Level %s (around line %s) in %s is impossible to
solve. It has %s goals but only %s stars.' % (levelNum+1, lineNum, filename,
len(goals), len(stars))</p>

		<p class="noindent mono"><span class="line-number">492.</span> </p>

		<p class="noindent mono"><span class="line-number">493.</span>             <span
class="comment"># Create level object and starting game state object.</span></p>

		<p class="noindent mono"><span class="line-number">494.</span>             gameStateObj
= {'player': (startx, starty),</p>

		<p class="noindent mono"><span class="line-number">495.</span>                             'stepCounter':
0,</p>

		<p class="noindent mono"><span class="line-number">496.</span>                             'stars':
stars}</p>

		<p class="noindent mono"><span class="line-number">497.</span>             levelObj
= {'width': maxWidth,</p>

		<p class="noindent mono"><span class="line-number">498.</span>                         'height':
len(mapObj),</p>

		<p class="noindent mono"><span class="line-number">499.</span>                         'mapObj':
mapObj,</p>

		<p class="noindent mono"><span class="line-number">500.</span>                         'goals':
goals,</p>

		<p class="noindent mono"><span class="line-number">501.</span>                         'startState':
gameStateObj}</p>

		<p class="noindent mono"><span class="line-number">502.</span></p>

		<p class="noindent mono"><span class="line-number">503.</span>             levels.append(levelObj)</p>

		<p class="noindent mono"><span class="line-number">504.</span> </p>

		<p class="noindent mono"><span class="line-number">505.</span>             <span
class="comment"># Reset the variables for reading the next map.</span></p>

		<p class="noindent mono"><span class="line-number">506.</span>             mapTextLines
= []</p>

		<p class="noindent mono"><span class="line-number">507.</span>             mapObj
= []</p>

		<p class="noindent mono"><span class="line-number">508.</span>             gameStateObj
= {}</p>

		<p class="noindent mono"><span class="line-number">509.</span>             levelNum
+= 1</p>

		<p class="noindent mono"><span class="line-number">510.</span>     return
levels</p>

		<p class="noindent mono"><span class="comment">511.</span></p>

		<p class="noindent mono"><span class="comment">512.</span></p>

		<p class="noindent mono"><span class="line-number">513.</span> def
floodFill(mapObj, x, y, oldCharacter, newCharacter):</p>

		<p class="noindent mono"><span class="line-number">514.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Changes any values matching
oldCharacter on the map object to</span></p>

		<p class="noindent mono"><span class="line-number">515.</span> &#160;&#160;&#160;&#160;<span
class="comment">newCharacter at the (x, y) position, and does the same
for the</span></p>

		<p class="noindent mono"><span class="line-number">516.</span> &#160;&#160;&#160;&#160;<span
class="comment">positions to the left, right, down, and up of (x, y),
recursively.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">517.</span> </p>

		<p class="noindent mono"><span class="line-number">518.</span> &#160;&#160;&#160;&#160;<span
class="comment"># In this game, the flood fill algorithm creates the
inside/outside</span></p>

		<p class="noindent mono"><span class="line-number">519.</span> &#160;&#160;&#160;&#160;<span
class="comment"># floor distinction. This is a &quot;recursive&quot;
function.</span></p>

		<p class="noindent mono"><span class="line-number">520.</span> &#160;&#160;&#160;&#160;<span
class="comment"># For more info on the Flood Fill algorithm, see:</span></p>

		<p class="noindent mono"><span class="line-number">521.</span> &#160;&#160;&#160;&#160;<span
class="comment">#   http://en.wikipedia.org/wiki/Flood_fill</span></p>

		<p class="noindent mono"><span class="line-number">522.</span>     if
mapObj[x][y] == oldCharacter:</p>

		<p class="noindent mono"><span class="line-number">523.</span>         mapObj[x][y]
= newCharacter</p>

		<p class="noindent mono"><span class="line-number">524.</span> </p>

		<p class="noindent mono"><span class="line-number">525.</span>     if
x &lt; len(mapObj) - 1 and mapObj[x+1][y] == oldCharacter:</p>

		<p class="noindent mono"><span class="line-number">526.</span>         floodFill(mapObj,
x+1, y, oldCharacter, newCharacter) <span class="comment"># call right</span></p>

		<p class="noindent mono"><span class="line-number">527.</span>     if
x &gt; 0 and mapObj[x-1][y] == oldCharacter:</p>

		<p class="noindent mono"><span class="line-number">528.</span>         floodFill(mapObj,
x-1, y, oldCharacter, newCharacter) <span class="comment"># call left</span></p>

		<p class="noindent mono"><span class="line-number">529.</span>     if
y &lt; len(mapObj[x]) - 1 and mapObj[x][y+1] == oldCharacter:</p>

		<p class="noindent mono"><span class="line-number">530.</span>         floodFill(mapObj,
x, y+1, oldCharacter, newCharacter) <span class="comment"># call down</span></p>

		<p class="noindent mono"><span class="line-number">531.</span>     if
y &gt; 0 and mapObj[x][y-1] == oldCharacter:</p>

		<p class="noindent mono"><span class="line-number">532.</span>         floodFill(mapObj,
x, y-1, oldCharacter, newCharacter) <span class="comment"># call up</span></p>

		<p class="noindent mono"><span class="line-number">533.</span></p>

		<p class="noindent mono"><span class="line-number">534.</span></p>

		<p class="noindent mono"><span class="line-number">535.</span> def
drawMap(mapObj, gameStateObj, goals):</p>

		<p class="noindent mono"><span class="line-number">536.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Draws the map to a Surface object,
including the player and</span></p>

		<p class="noindent mono"><span class="line-number">537.</span> &#160;&#160;&#160;&#160;<span
class="comment">stars. This function does not call
pygame.display.update(), nor</span></p>

		<p class="noindent mono"><span class="line-number">538.</span> &#160;&#160;&#160;&#160;<span
class="comment">does it draw the &quot;Level&quot; and
&quot;Steps&quot; text in the corner.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">539.</span> </p>

		<p class="noindent mono"><span class="line-number">540.</span> &#160;&#160;&#160;&#160;<span
class="comment"># mapSurf will be the single Surface object that the
tiles are drawn</span></p>

		<p class="noindent mono"><span class="line-number">541.</span> &#160;&#160;&#160;&#160;<span
class="comment"># on, so that it is easy to position the entire map on
the DISPLAYSURF</span></p>

		<p class="noindent mono"><span class="line-number">542.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Surface object. First, the width and height must be
calculated.</span></p>

		<p class="noindent mono"><span class="line-number">543.</span>     mapSurfWidth
= len(mapObj) * TILEWIDTH</p>

		<p class="noindent mono"><span class="line-number">544.</span>     mapSurfHeight
= (len(mapObj[0]) - 1) * (TILEHEIGHT - TILEFLOORHEIGHT) + TILEHEIGHT</p>

		<p class="noindent mono"><span class="line-number">545.</span>     mapSurf
= pygame.Surface((mapSurfWidth, mapSurfHeight))</p>

		<p class="noindent mono"><span class="line-number">546.</span>     mapSurf.fill(BGCOLOR)
<span class="comment"># start with a blank color on the surface.</span></p>

		<p class="noindent mono"><span class="line-number">547.</span> </p>

		<p class="noindent mono"><span class="line-number">548.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Draw the tile sprites onto this surface.</span></p>

		<p class="noindent mono"><span class="line-number">549.</span>     for
x in range(len(mapObj)):</p>

		<p class="noindent mono"><span class="line-number">550.</span>         for
y in range(len(mapObj[x])):</p>

		<p class="noindent mono"><span class="line-number">551.</span>             spaceRect
= pygame.Rect((x * TILEWIDTH, y * (TILEHEIGHT - TILEFLOORHEIGHT), TILEWIDTH,
TILEHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">552.</span>             if
mapObj[x][y] in TILEMAPPING:</p>

		<p class="noindent mono"><span class="line-number">553.</span>                 baseTile
= TILEMAPPING[mapObj[x][y]]</p>

		<p class="noindent mono"><span class="line-number">554.</span>             elif
mapObj[x][y] in OUTSIDEDECOMAPPING:</p>

		<p class="noindent mono"><span class="line-number">555.</span>                 baseTile
= TILEMAPPING[' ']</p>

		<p class="noindent mono"><span class="line-number">556.</span> </p>

		<p class="noindent mono"><span class="line-number">557.</span>             <span
class="comment"># First draw the base ground/wall tile.</span></p>

		<p class="noindent mono"><span class="line-number">558.</span>             mapSurf.blit(baseTile,
spaceRect)</p>

		<p class="noindent mono"><span class="line-number">559.</span> </p>

		<p class="noindent mono"><span class="line-number">560.</span>             if
mapObj[x][y] in OUTSIDEDECOMAPPING:</p>

		<p class="noindent mono"><span class="line-number">561.</span>                 <span
class="comment"># Draw any tree/rock decorations that are on this tile.</span></p>

		<p class="noindent mono"><span class="line-number">562.</span>                 mapSurf.blit(OUTSIDEDECOMAPPING[mapObj[x][y]],
spaceRect)</p>

		<p class="noindent mono"><span class="line-number">563.</span>             elif
(x, y) in gameStateObj['stars']:</p>

		<p class="noindent mono"><span class="line-number">564.</span>                 if
(x, y) in goals:</p>

		<p class="noindent mono"><span class="line-number">565.</span>                     <span
class="comment"># A goal AND star are on this space, draw goal first.</span></p>

		<p class="noindent mono"><span class="line-number">566.</span>                     mapSurf.blit(IMAGESDICT['covered
goal'], spaceRect)</p>

		<p class="noindent mono"><span class="line-number">567.</span>                 <span
class="comment"># Then draw the star sprite.</span></p>

		<p class="noindent mono"><span class="line-number">568.</span>                 mapSurf.blit(IMAGESDICT['star'],
spaceRect)</p>

		<p class="noindent mono"><span class="line-number">569.</span>             elif
(x, y) in goals:</p>

		<p class="noindent mono"><span class="line-number">570.</span>                 <span
class="comment"># Draw a goal without a star on it.</span></p>

		<p class="noindent mono"><span class="line-number">571.</span>                 mapSurf.blit(IMAGESDICT['uncovered
goal'], spaceRect)</p>

		<p class="noindent mono"><span class="line-number">572.</span> </p>

		<p class="noindent mono"><span class="line-number">573.</span>             <span
class="comment"># Last draw the player on the board.</span></p>

		<p class="noindent mono"><span class="line-number">574.</span>             if
(x, y) == gameStateObj['player']:</p>

		<p class="noindent mono"><span class="line-number">575.</span>                 <span
class="comment"># Note: The value &quot;currentImage&quot; refers</span></p>

		<p class="noindent mono"><span class="line-number">576.</span>                 <span
class="comment"># to a key in &quot;PLAYERIMAGES&quot; which has the</span></p>

		<p class="noindent mono"><span class="line-number">577.</span>                 <span
class="comment"># specific player image we want to show.</span></p>

		<p class="noindent mono"><span class="line-number">578.</span>                 mapSurf.blit(PLAYERIMAGES[currentImage],
spaceRect)</p>

		<p class="noindent mono"><span class="line-number">579.</span> </p>

		<p class="noindent mono"><span class="line-number">580.</span>     return
mapSurf</p>

		<p class="noindent mono"><span class="line-number">581.</span></p>

		<p class="noindent mono"><span class="line-number">582.</span></p>

		<p class="noindent mono"><span class="line-number">583.</span> def
isLevelFinished(levelObj, gameStateObj):</p>

		<p class="noindent mono"><span class="line-number">584.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Returns True if all the goals have
stars in them.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">585.</span>     for
goal in levelObj['goals']:</p>

		<p class="noindent mono"><span class="line-number">586.</span>         if
goal not in gameStateObj['stars']:</p>

		<p class="noindent mono"><span class="line-number">587.</span>             <span
class="comment"># Found a space with a goal but no star on it.</span></p>

		<p class="noindent mono"><span class="line-number">588.</span>             return
False</p>

		<p class="noindent mono"><span class="line-number">589.</span>     return
True</p>

		<p class="noindent mono"><span class="line-number">590.</span></p>

		<p class="noindent mono"><span class="line-number">591.</span></p>

		<p class="noindent mono"><span class="line-number">592.</span> def
terminate():</p>

		<p class="noindent mono"><span class="line-number">593.</span>     pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">594.</span>     sys.exit()</p>

		<p class="noindent mono"><span class="line-number">595.</span></p>

		<p class="noindent mono"><span class="line-number">596.</span></p>

		<p class="noindent mono"><span class="line-number">597.</span> if
__name__ == '__main__':</p>

		<p class="noindent mono"><span class="line-number">598.</span>     main()</p>

	</div>

	<h1 class="subheading" id="">The Initial Setup</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">1.</span> <span
class="comment"># Star Pusher (a Sokoban clone)</span></p>

		<p class="noindent mono"><span class="line-number">2.</span> <span
class="comment"># By Al Sweigart al@inventwithpython.com</span></p>

		<p class="noindent mono"><span class="line-number">3.</span> <span
class="comment"># http://inventwithpython.com/pygame</span></p>

		<p class="noindent mono"><span class="line-number">4.</span> <span
class="comment"># Creative Commons BY-NC-SA 3.0 US</span></p>

		<p class="noindent mono"><span class="line-number">5.</span></p>

		<p class="noindent mono"><span class="line-number">6.</span> import
random, sys, copy, os, pygame</p>

		<p class="noindent mono"><span class="line-number">7.</span> from
pygame.locals import *</p>

		<p class="noindent mono"><span class="line-number">8.</span></p>

		<p class="noindent mono"><span class="line-number">9.</span> FPS
= 30 <span class="comment"># frames per second to update the screen</span></p>

		<p class="noindent mono"><span class="line-number">&#160;10.</span>  WINWIDTH
= 800 <span class="comment"># width of the program's window, in pixels</span></p>

		<p class="noindent mono"><span class="line-number">&#160;11.</span>  WINHEIGHT
= 600 <span class="comment"># height in pixels</span></p>

		<p class="noindent mono"><span class="line-number">&#160;12.</span>  HALF_WINWIDTH
= int(WINWIDTH / 2)</p>

		<p class="noindent mono"><span class="line-number">&#160;13.</span>  HALF_WINHEIGHT
= int(WINHEIGHT / 2)</p>

		<p class="noindent mono"><span class="line-number">&#160;14.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;15.</span>  <span
class="comment"># The total width and height of each tile in pixels.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;16.</span>  TILEWIDTH
= 50</p>

		<p class="noindent mono"><span class="line-number">&#160;17.</span>  TILEHEIGHT
= 85</p>

		<p class="noindent mono"><span class="line-number">&#160;18.</span>  TILEFLOORHEIGHT
= 45</p>

		<p class="noindent mono"><span class="line-number">&#160;19.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;20.</span>  CAM_MOVE_SPEED
= 5 <span class="comment"># how many pixels per frame the camera moves</span></p>

		<p class="noindent mono"><span class="line-number">&#160;21.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;22.</span>  <span
class="comment"># The percentage of outdoor tiles that have additional</span></p>

		<p class="noindent mono"><span class="line-number">&#160;23.</span>  <span
class="comment"># decoration on them, such as a tree or rock.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;24.</span>  OUTSIDE_DECORATION_PCT
= 20</p>

		<p class="noindent mono"><span class="line-number">&#160;25.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;26.</span>  BRIGHTBLUE
= (  0, 170, 255)</p>

		<p class="noindent mono"><span class="line-number">&#160;27.</span>  WHITE
= (255, 255, 255)</p>

		<p class="noindent mono"><span class="line-number">&#160;28.</span>  BGCOLOR
= BRIGHTBLUE</p>

		<p class="noindent mono"><span class="line-number">&#160;29.</span>  TEXTCOLOR
= WHITE</p>

		<p class="noindent mono"><span class="line-number">&#160;30.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;31.</span>  UP
= 'up'</p>

		<p class="noindent mono"><span class="line-number">&#160;32.</span>  DOWN
= 'down'</p>

		<p class="noindent mono"><span class="line-number">&#160;33.</span>  LEFT
= 'left'</p>

		<p class="noindent mono"><span class="line-number">&#160;34.</span>  RIGHT
= 'right'</p>

	</div>

	<p>These constants are used in various parts of the program. The
<span class="mono">TILEWIDTH</span> and <span class="mono">TILEHEIGHT</span>
variables show that each of the tile images are 50 pixels wide and 85 pixels
tall. However, these tiles overlap with each other when drawn on the screen.
(This is explained later.) The <span class="mono">TILEFLOORHEIGHT</span>
refers to the fact that the part of the tile that represents the floor is 45
pixels tall. Here is a diagram of the plain floor image:</p>


	<p>The grassy tiles outside of the level’s room will sometimes
have extra decorations added to them (such as trees or rocks). The <span
class="mono">OUTSIDE_DECORATION_PCT</span> constant shows what percentage of
these tiles will randomly have these decorations.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;37.</span>  def
main():</p>

		<p class="noindent mono"><span class="line-number">&#160;38.</span>      global
FPSCLOCK, DISPLAYSURF, IMAGESDICT, TILEMAPPING, OUTSIDEDECOMAPPING, BASICFONT, PLAYERIMAGES,
currentImage</p>

		<p class="noindent mono"><span class="line-number">&#160;39.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;40.</span>      <span
class="comment"># Pygame initialization and basic set up of the global variables.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;41.</span>      pygame.init()</p>

		<p class="noindent mono"><span class="line-number">&#160;42.</span>      FPSCLOCK
= pygame.time.Clock()</p>

		<p class="noindent mono"><span class="line-number">&#160;43.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;44.</span>      <span
class="comment"># Because the Surface object stored in DISPLAYSURF was
returned</span></p>

		<p class="noindent mono"><span class="line-number">&#160;45.</span>      <span
class="comment"># from the pygame.display.set_mode() function, this is
the</span></p>

		<p class="noindent mono"><span class="line-number">&#160;46.</span>      <span
class="comment"># Surface object that is drawn to the actual computer
screen</span></p>

		<p class="noindent mono"><span class="line-number">&#160;47.</span>      <span
class="comment"># when pygame.display.update() is called.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;48.</span>      DISPLAYSURF
= pygame.display.set_mode((WINWIDTH, WINHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">&#160;49.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;50.</span>      pygame.display.set_caption('Star
Pusher')</p>

		<p class="noindent mono"><span class="line-number">&#160;51.</span>      BASICFONT
= pygame.font.Font('freesansbold.ttf', 18)</p>

	</div>

	<p>This is the usual Pygame setup that happens at the beginning
of the program.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number"> 53. </span>    <span
class="comment"># A global dict value that will contain all the Pygame</span></p>

		<p class="noindent mono"><span class="line-number">&#160;54.</span>      <span
class="comment"># Surface objects returned by pygame.image.load().</span></p>

		<p class="noindent mono"><span class="line-number">&#160;55.</span>      IMAGESDICT
= {'uncovered goal': pygame.image.load('RedSelector.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;56.</span>                    'covered
goal': pygame.image.load('Selector.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;57.</span>                    'star':
pygame.image.load('Star.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;58.</span>                    'corner':
pygame.image.load('Wall Block Tall.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;59.</span>                    'wall':
pygame.image.load('Wood Block Tall.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;60.</span>                    'inside
floor': pygame.image.load('Plain Block.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;61.</span>                    'outside
floor': pygame.image.load('Grass Block.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;62.</span>                    'title':
pygame.image.load('star_title.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;63.</span>                    'solved':
pygame.image.load('star_solved.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;64.</span>                    'princess':
pygame.image.load('princess.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;65.</span>                    'boy':
pygame.image.load('boy.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;66.</span>                    'catgirl':
pygame.image.load('catgirl.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;67.</span>                    'horngirl':
pygame.image.load('horngirl.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;68.</span>                    'pinkgirl':
pygame.image.load('pinkgirl.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;69.</span>                    'rock':
pygame.image.load('Rock.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;70.</span>                    'short
tree': pygame.image.load('Tree_Short.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;71.</span>                    'tall
tree': pygame.image.load('Tree_Tall.png'),</p>

		<p class="noindent mono"><span class="line-number">&#160;72.</span>                    'ugly
tree': pygame.image.load('Tree_Ugly.png')}</p>

	</div>

	<p>The <span class="mono">IMAGESDICT</span> is a dictionary
where all of the loaded images are stored. This makes it easier to use in other
functions, since only the <span class="mono">IMAGESDICT</span> variable needs
to be made global. If we stored each of these images in separate variables,
then all 18 variables (for the 18 images used in this game) would need to be
made global. A dictionary containing all of the Surface objects with the images
is easier to handle.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;74.</span>      <span
class="comment"># These dict values are global, and map the character
that appears</span></p>

		<p class="noindent mono"><span class="line-number">&#160;75.</span>      <span
class="comment"># in the level file to the Surface object it
represents.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;76.</span>      TILEMAPPING
= {'x': IMAGESDICT['corner'],</p>

		<p class="noindent mono"><span class="line-number">&#160;77.</span>                     '#':
IMAGESDICT['wall'],</p>

		<p class="noindent mono"><span class="line-number">&#160;78.</span>                     'o':
IMAGESDICT['inside floor'],</p>

		<p class="noindent mono"><span class="line-number">&#160;79.</span>                     '
': IMAGESDICT['outside floor']}</p>

	</div>

	<p>The data structure for the map is just a 2D list of single
character strings. The <span class="mono">TILEMAPPING</span> dictionary links
the characters used in this map data structure to the images that they
represent. (This will become more clear in the <span class="mono">drawMap()</span>
function’s explanation.)</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;80.</span>      OUTSIDEDECOMAPPING
= {'1': IMAGESDICT['rock'],</p>

		<p class="noindent mono"><span class="line-number">&#160;81.</span>                            '2':
IMAGESDICT['short tree'],</p>

		<p class="noindent mono"><span class="line-number">&#160;82.</span>                            '3':
IMAGESDICT['tall tree'],</p>

		<p class="noindent mono"><span class="line-number">&#160;83.</span>                            '4':
IMAGESDICT['ugly tree']}</p>

	</div>

	<p>The <span class="mono">OUTSIDEDECOMAPPING</span> is also a
dictionary that links the characters used in the map data structure to images
that were loaded. The “outside decoration” images are drawn on top of the
outdoor grassy tile.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number"> 85. </span>    <span
class="comment"># PLAYERIMAGES is a list of all possible characters the
player can be.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;86.</span>      <span
class="comment"># currentImage is the index of the player's current
player image.</span></p>

		<p class="noindent mono"><span class="line-number"> 87. </span>    currentImage
= 0</p>

		<p class="noindent mono"><span class="line-number">&#160;88.</span>      PLAYERIMAGES
= [IMAGESDICT['princess'],</p>

		<p class="noindent mono"><span class="line-number">&#160;89.</span>                      IMAGESDICT['boy'],</p>

		<p class="noindent mono"><span class="line-number">&#160;90.</span>                      IMAGESDICT['catgirl'],</p>

		<p class="noindent mono"><span class="line-number">&#160;91.</span>                      IMAGESDICT['horngirl'],</p>

		<p class="noindent mono"><span class="line-number">&#160;92.</span>                      IMAGESDICT['pinkgirl']]</p>

	</div>

	<p>The <span class="mono">PLAYERIMAGES</span> list stores the
images used for the player. The <span class="mono">currentImage</span>
variable tracks the index of the currently selected player image. For example,
when <span class="mono">currentImage</span> is set to <span class="mono">0</span>
then <span class="mono">PLAYERIMAGES[0]</span>, which is the “princess” player
image, is drawn to the screen.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;94.</span>      startScreen()
<span class="comment"># show the title screen until the user presses a
key</span></p>

		<p class="noindent mono"><span class="line-number">&#160;95.</span>  </p>

		<p class="noindent mono"><span class="line-number">&#160;96.</span>      <span
class="comment"># Read in the levels from the text file. See the
readLevelsFile() for</span></p>

		<p class="noindent mono"><span class="line-number">&#160;97.</span>      <span
class="comment"># details on the format of this file and how to make
your own levels.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;98.</span>      levels
= readLevelsFile('starPusherLevels.txt')</p>

		<p class="noindent mono"><span class="line-number"> 99. </span>    currentLevelIndex
= 0</p>

	</div>

	<p>The <span class="mono">startScreen()</span> function will
keep displaying the initial start screen (which also has the instructions for
the game) until the player presses a key. When the player presses a key, the <span
class="mono">startScreen()</span> function returns and then reads in the
levels from the level file. The player starts off on the first level, which is
the level object in the levels list at index <span class="mono">0</span>.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">101.</span> &#160;&#160;&#160;&#160;<span
class="comment"># The main game loop. This loop runs a single level,
when the user</span></p>

		<p class="noindent mono"><span class="line-number">102.</span> &#160;&#160;&#160;&#160;<span
class="comment"># finishes that level, the next/previous level is
loaded.</span></p>

		<p class="noindent mono"><span class="line-number">103.</span>     while
True: <span class="comment"># main game loop</span></p>

		<p class="noindent mono"><span class="line-number">104.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Run the level to actually start playing the game:</span></p>

		<p class="noindent mono"><span class="line-number">105.</span>         result
= runLevel(levels, currentLevelIndex)</p>

	</div>

	<p>The <span class="mono">runLevel()</span> function handles
all the action for the game. It is passed a list of level objects, and the
integer index of the level in that list to be played. When the player has
finished playing the level, <span class="mono">runLevel()</span> will return
one of the following strings: <span class="mono">'solved'</span> (because the
player has finished putting all the stars on the goals), <span class="mono">'next'</span>
(because the player wants to skip to the next level), <span class="mono">'back'</span>
(because the player wants to go back to the previous level), and <span
class="mono">'reset'</span> (because the player wants to start playing the
current level over again, maybe because they pushed a star into a corner).</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">107.</span>         if
result in ('solved', 'next'):</p>

		<p class="noindent mono"><span class="line-number">108.</span>             <span
class="comment"># Go to the next level.</span></p>

		<p class="noindent mono"><span class="line-number">109.</span>             currentLevelIndex
+= 1</p>

		<p class="noindent mono"><span class="line-number">110.</span>             if
currentLevelIndex &gt;= len(levels):</p>

		<p class="noindent mono"><span class="line-number">111.</span>                 <span
class="comment"># If there are no more levels, go back to the first
one.</span></p>

		<p class="noindent mono"><span class="line-number">112.</span>                 currentLevelIndex
= 0</p>

		<p class="noindent mono"><span class="line-number">113.</span>         elif
result == 'back':</p>

		<p class="noindent mono"><span class="line-number">114.</span>             <span
class="comment"># Go to the previous level.</span></p>

		<p class="noindent mono"><span class="line-number">115.</span>             currentLevelIndex
-= 1</p>

		<p class="noindent mono"><span class="line-number">116.</span>             if
currentLevelIndex &lt; 0:</p>

		<p class="noindent mono"><span class="line-number">117.</span>                 <span
class="comment"># If there are no previous levels, go to the last one.</span></p>

		<p class="noindent mono"><span class="line-number">118.</span>                 currentLevelIndex
= len(levels)-1</p>

	</div>

	<p>If <span class="mono">runLevel()</span> has returned the
strings <span class="mono">'solved'</span> or <span class="mono">'next'</span>,
then we need to increment <span class="mono">levelNum</span> by <span
class="mono">1</span>. If this increments <span class="mono">levelNum</span>
beyond the number of levels there are, then <span class="mono">levelNum</span>
is set back at <span class="mono">0</span>.</p>

	<p>The opposite is done if <span class="mono">'back'</span> is
returned, then <span class="mono">levelNum</span> is decremented by <span
class="mono">1</span>. If this makes it go below <span class="mono">0</span>,
then it is set to the last level (which is <span class="mono">len(levels)-1</span>).</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">119.</span>         elif
result == 'reset':</p>

		<p class="noindent mono"><span class="line-number">120.</span>             pass
<span class="comment"># Do nothing. Loop re-calls runLevel() to reset
the level</span></p>

	</div>

	<p>If the return value was <span class="mono">'reset'</span>,
then the code does nothing. The <span class="mono">pass</span> statement does
nothing (like a comment), but is needed because the Python interpreter expects
an indented line of code after an <span class="mono">elif</span> statement.</p>

	<p>We could remove lines 119 and 120 from the source code
entirely, and the program will still work just the same. The reason we include
it here is for program readability, so that if we make changes to the code
later, we won’t forget that <span class="mono">runLevel()</span> can also
return the string <span class="mono">'reset'</span>.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">123.</span> def
runLevel(levels, levelNum):</p>

		<p class="noindent mono"><span class="line-number">124.</span>
global currentImage</p>

		<p class="noindent mono"><span class="line-number">125.</span>
levelObj = levels[levelnum]</p>

		<p class="noindent mono"><span class="line-number">126.</span>     mapObj
= decorateMap(levelObj['mapObj'], levelObj['startState']['player'])</p>

		<p class="noindent mono"><span class="line-number">127.</span>     gameStateObj
= copy.deepcopy(levelObj['startState'])</p>

	</div>

	<p>The levels list contains all the level objects that were
loaded from the level file. The level object for the current level (which is
what <span class="mono">levelNum</span> is set to) is stored in the <span
class="mono">levelObj</span> variable. A map object (which makes a distinction
between indoor and outdoor tiles, and decorates the outdoor tiles with trees
and rocks) is returned from the <span class="mono">decorateMap()</span>
function. And to track the state of the game while the player plays this level,
a copy of the game state object that is stored in <span class="mono">levelObj</span>
is made using the <span class="mono">copy.deepcopy()</span> function.</p>

	<p>The game state object copy is made because the game state
object stored in <span class="mono">levelObj['startState']</span> represents
the game state at the very beginning of the level, and we do not want to modify
this. Otherwise, if the player restarts the level, the original game state for
that level will be lost.</p>

	<p>The <span class="mono">copy.deepcopy()</span> function is
used because the game state object is a dictionary of that has tuples. But
technically, the dictionary contains references to tuples. (References are
explained in detail at <a href="http://invpy.com/references">http://invpy.com/references</a>.)
Using an assignment statement to make a copy of the dictionary will make a copy
of the references but not the values they refer to, so that both the copy and
the original dictionary still refer to the same tuples.</p>

	<p>The <span class="mono">copy.deepcopy()</span> function
solves this problem by making copies of the actual tuples in the dictionary.
This way we can guarantee that changing one dictionary will not affect the
other dictionary.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">128.</span>     mapNeedsRedraw
= True <span class="comment"># set to True to call drawMap()</span></p>

		<p class="noindent mono"><span class="line-number">129.</span>     levelSurf
= BASICFONT.render('Level %s of %s' % (levelObj['levelNum'] + 1,
totalNumOfLevels), 1, TEXTCOLOR)</p>

		<p class="noindent mono"><span class="line-number">130.</span>     levelRect
= levelSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">131.</span>     levelRect.bottomleft
= (20, WINHEIGHT - 35)</p>

		<p class="noindent mono"><span class="line-number">132.</span>     mapWidth
= len(mapObj) * TILEWIDTH</p>

		<p class="noindent mono"><span class="line-number">133.</span>     mapHeight
= (len(mapObj[0]) - 1) * (TILEHEIGHT - TILEFLOORHEIGHT) + TILEHEIGHT</p>

		<p class="noindent mono"><span class="line-number">134.</span>     MAX_CAM_X_PAN
= abs(HALF_WINHEIGHT - int(mapHeight / 2)) + TILEWIDTH</p>

		<p class="noindent mono"><span class="line-number">135.</span>     MAX_CAM_Y_PAN
= abs(HALF_WINWIDTH - int(mapWidth / 2)) + TILEHEIGHT</p>

		<p class="noindent mono"><span class="line-number">136.</span> </p>

		<p class="noindent mono"><span class="line-number">137.</span>     levelIsComplete
= False</p>

		<p class="noindent mono"><span class="line-number">138.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Track how much the camera has moved:</span></p>

		<p class="noindent mono"><span class="line-number">139.</span>     cameraOffsetX
= 0</p>

		<p class="noindent mono"><span class="line-number">140.</span>     cameraOffsetY
= 0</p>

		<p class="noindent mono"><span class="line-number">141.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Track if the keys to move the camera are being held
down:</span></p>

		<p class="noindent mono"><span class="line-number">142.</span>     cameraUp
= False</p>

		<p class="noindent mono"><span class="line-number">143.</span>     cameraDown
= False</p>

		<p class="noindent mono"><span class="line-number">144.</span>     cameraLeft
= False</p>

		<p class="noindent mono"><span class="line-number">145.</span>     cameraRight
= False</p>

	</div>

	<p>More variables are set at the start of playing a level. The <span
class="mono">mapWidth</span> and <span class="mono">mapHeight</span>
variables are the size of the maps in pixels. The expression for calculating <span
class="mono">mapHeight</span> is a bit complicated since the tiles overlap
each other. Only the bottom row of tiles is the full height (which accounts for
the <span class="mono">+ TILEHEIGHT</span> part of the expression), all of the
other rows of tiles (which number as <span class="mono">(len(mapObj[0]) - 1)</span>)
are slightly overlapped. This means that they are effectively each only <span
class="mono">(TILEHEIGHT - TILEFLOORHEIGHT)</span> pixels tall.</p>

	<p>The camera in Star Pusher can be moved independently of the
player moving around the map. This is why the camera needs its own set of
“moving” variables: <span class="mono">cameraUp</span>, <span class="mono">cameraDown</span>,
<span class="mono">cameraLeft</span>, and <span class="mono">cameraRight</span>.
The <span class="mono">cameraOffsetX</span> and <span class="mono">cameraOffsetY</span>
variables track the position of the camera.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">147.</span>     while
True: <span class="comment"># main game loop</span></p>

		<p class="noindent mono"><span class="line-number">148.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Reset these variables:</span></p>

		<p class="noindent mono"><span class="line-number">149.</span>         playerMoveTo
= None</p>

		<p class="noindent mono"><span class="line-number">150.</span>         keyPressed
= False</p>

		<p class="noindent mono"><span class="line-number">151.</span> </p>

		<p class="noindent mono"><span class="line-number">152.</span>         for
event in pygame.event.get(): <span class="comment"># event handling
loop</span></p>

		<p class="noindent mono"><span class="line-number">153.</span>             if
event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">154.</span>                 <span
class="comment"># Player clicked the &quot;X&quot; at the corner of the
window.</span></p>

		<p class="noindent mono"><span class="line-number">155.</span>                 terminate()</p>

		<p class="noindent mono"><span class="line-number">156.</span> </p>

	</div>

	<p>The <span class="mono">playerMoveTo</span> variable will be
set to the direction constant that the player intends to move the player
character on the map. The <span class="mono">keyPressed</span> variable tracks
if any key has been pressed during this iteration of the game loop. This
variable is checked later when the player has solved the level.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">157.</span>             elif
event.type == KEYDOWN:</p>

		<p class="noindent mono"><span class="line-number">158.</span>                 <span
class="comment"># Handle key presses</span></p>

		<p class="noindent mono"><span class="line-number">159.</span>                 keyPressed
= True</p>

		<p class="noindent mono"><span class="line-number">160.</span>                 if
event.key == K_LEFT:</p>

		<p class="noindent mono"><span class="line-number">161.</span>                     playerMoveTo
= LEFT</p>

		<p class="noindent mono"><span class="line-number">162.</span>                 elif
event.key == K_RIGHT:</p>

		<p class="noindent mono"><span class="line-number">163.</span>                     playerMoveTo
= RIGHT</p>

		<p class="noindent mono"><span class="line-number">164.</span>                 elif
event.key == K_UP:</p>

		<p class="noindent mono"><span class="line-number">165.</span>                     playerMoveTo
= UP</p>

		<p class="noindent mono"><span class="line-number">166.</span>                 elif
event.key == K_DOWN:</p>

		<p class="noindent mono"><span class="line-number">167.</span>                     playerMoveTo
= DOWN</p>

		<p class="noindent mono"><span class="line-number">168.</span> </p>

		<p class="noindent mono"><span class="line-number">169.</span>                 <span
class="comment"># Set the camera move mode.</span></p>

		<p class="noindent mono"><span class="line-number">170.</span>                 elif
event.key == K_a:</p>

		<p class="noindent mono"><span class="line-number">171.</span>                     cameraLeft
= True</p>

		<p class="noindent mono"><span class="line-number">172.</span>                 elif
event.key == K_d:</p>

		<p class="noindent mono"><span class="line-number">173.</span>                     cameraRight
= True</p>

		<p class="noindent mono"><span class="line-number">174.</span>                 elif
event.key == K_w:</p>

		<p class="noindent mono"><span class="line-number">175.</span>                     cameraUp
= True</p>

		<p class="noindent mono"><span class="line-number">176.</span>                 elif
event.key == K_s:</p>

		<p class="noindent mono"><span class="line-number">177.</span>                     cameraDown
= True</p>

		<p class="noindent mono"><span class="line-number">178.</span> </p>

		<p class="noindent mono"><span class="line-number">179.</span>                 elif
event.key == K_n:</p>

		<p class="noindent mono"><span class="line-number">180.</span>                     return
'next'</p>

		<p class="noindent mono"><span class="line-number">181.</span>                 elif
event.key == K_b:</p>

		<p class="noindent mono"><span class="line-number">182.</span>                     return
'back'</p>

		<p class="noindent mono"><span class="line-number">183.</span> </p>

		<p class="noindent mono"><span class="line-number">184.</span>                 elif
event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">185.</span>                     terminate()
<span class="comment"># Esc key quits.</span></p>

		<p class="noindent mono"><span class="line-number">186.</span>                 elif
event.key == K_BACKSPACE:</p>

		<p class="noindent mono"><span class="line-number">187.</span>                     return
'reset' <span class="comment"># Reset the level.</span></p>

		<p class="noindent mono"><span class="line-number">188.</span>                 elif
event.key == K_p:</p>

		<p class="noindent mono"><span class="line-number">189.</span>                     <span
class="comment"># Change the player image to the next one.</span></p>

		<p class="noindent mono"><span class="line-number">190.</span>                     currentImage
+= 1</p>

		<p class="noindent mono"><span class="line-number">191.</span>                     if
currentImage &gt;= len(PLAYERIMAGES):</p>

		<p class="noindent mono"><span class="line-number">192.</span>                         <span
class="comment"># After the last player image, use the first one.</span></p>

		<p class="noindent mono"><span class="line-number">193.</span>                         currentImage
= 0</p>

		<p class="noindent mono"><span class="line-number">194.</span>                     mapNeedsRedraw
= True</p>

		<p class="noindent mono"><span class="line-number">195.</span> </p>

		<p class="noindent mono"><span class="line-number">196.</span>             elif
event.type == KEYUP:</p>

		<p class="noindent mono"><span class="line-number">197.</span>                 <span
class="comment"># Unset the camera move mode.</span></p>

		<p class="noindent mono"><span class="line-number">198.</span>                 if
event.key == K_a:</p>

		<p class="noindent mono"><span class="line-number">199.</span>                     cameraLeft
= False</p>

		<p class="noindent mono"><span class="line-number">200.</span>                 elif
event.key == K_d:</p>

		<p class="noindent mono"><span class="line-number">201.</span>                     cameraRight
= False</p>

		<p class="noindent mono"><span class="line-number">202.</span>                 elif
event.key == K_w:</p>

		<p class="noindent mono"><span class="line-number">203.</span>                     cameraUp
= False</p>

		<p class="noindent mono"><span class="line-number">204.</span>                 elif
event.key == K_s:</p>

		<p class="noindent mono"><span class="line-number">205.</span>                     cameraDown
= False</p>

	</div>

	<p>This code handles what to do when the various keys are
pressed.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">207.</span>         if
playerMoveTo != None and not levelIsComplete:</p>

		<p class="noindent mono"><span class="line-number">208.</span>             <span
class="comment"># If the player pushed a key to move, make the move</span></p>

		<p class="noindent mono"><span class="line-number">209.</span>             <span
class="comment"># (if possible) and push any stars that are pushable.</span></p>

		<p class="noindent mono"><span class="line-number">210.</span>             moved
= makeMove(mapObj, gameStateObj, playerMoveTo)</p>

		<p class="noindent mono"><span class="line-number">211.</span> </p>

		<p class="noindent mono"><span class="line-number">212.</span>             if
moved:</p>

		<p class="noindent mono"><span class="line-number">213.</span>                 <span
class="comment"># increment the step counter.</span></p>

		<p class="noindent mono"><span class="line-number">214.</span>                 gameStateObj['stepCounter']
+= 1</p>

		<p class="noindent mono"><span class="line-number">215.</span>                 mapNeedsRedraw
= True</p>

		<p class="noindent mono"><span class="line-number">216.</span> </p>

		<p class="noindent mono"><span class="line-number">217.</span>             if
isLevelFinished(levelObj, gameStateObj):</p>

		<p class="noindent mono"><span class="line-number">218.</span>                 <span
class="comment"># level is solved, we should show the
&quot;Solved!&quot; image.</span></p>

		<p class="noindent mono"><span class="line-number">219.</span>                 levelIsComplete
= True</p>

		<p class="noindent mono"><span class="line-number">220.</span>                 keyPressed
= False</p>

	</div>

	<p>If the <span class="mono">playerMoveTo</span> variable is
no longer set to <span class="mono">None</span>, then we know the player
intended to move. The call to <span class="mono">makeMove()</span> handles
changing the XY coordinates of the player’s position in the <span
class="mono">gameStateObj</span>, as well as pushing any stars. The return
value of <span class="mono">makeMove()</span> is stored in moved. If this
value is <span class="mono">True</span>, then the player character was moved
in that direction. If the value was <span class="mono">False</span>, then the
player must have tried to move into a tile that was a wall, or push a star that
had something behind it. In this case, the player can’t move and nothing on the
map changes.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">222.</span>         DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">223.</span> </p>

		<p class="noindent mono"><span class="line-number">224.</span>         if
mapNeedsRedraw:</p>

		<p class="noindent mono"><span class="line-number">225.</span>             mapSurf
= drawMap(mapObj, gameStateObj, levelObj['goals'])</p>

		<p class="noindent mono"><span class="line-number">226.</span>             mapNeedsRedraw
= False</p>

	</div>

	<p>The map does not need to be redrawn on each iteration
through the game loop. In fact, this game program is complicated enough that
doing so would cause a slight (but noticeable) slowdown in the game. And the
map really only needs to be redrawn when something has changed (such as the
player moving or a star being pushed). So the Surface object in the <span
class="mono">mapSurf</span> variable is only updated with a call to the <span
class="mono">drawMap()</span> function when the <span class="mono">mapNeedsRedraw</span>
variable is set to <span class="mono">True</span>.</p>

	<p>After the map has been drawn on line 225, the <span
class="mono">mapNeedsRedraw</span> variable is set to <span class="mono">False</span>.
If you want to see how the program slows down by drawing on each iteration
through the game loop, comment out line 226 and rerun the program. You will
notice that moving the camera is significantly slower.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">228.</span>         if
cameraUp and cameraOffsetY &lt; MAX_CAM_X_PAN:</p>

		<p class="noindent mono"><span class="line-number">229.</span>             cameraOffsetY
+= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">230.</span>         elif
cameraDown and cameraOffsetY &gt; -MAX_CAM_X_PAN:</p>

		<p class="noindent mono"><span class="line-number">231.</span>             cameraOffsetY
-= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">232.</span>         if
cameraLeft and cameraOffsetX &lt; MAX_CAM_Y_PAN:</p>

		<p class="noindent mono"><span class="line-number">233.</span>             cameraOffsetX
+= CAM_MOVE_SPEED</p>

		<p class="noindent mono"><span class="line-number">234.</span>         elif
cameraRight and cameraOffsetX &gt; -MAX_CAM_Y_PAN:</p>

		<p class="noindent mono"><span class="line-number">235.</span>             cameraOffsetX
-= CAM_MOVE_SPEED</p>

	</div>

	<p>If the camera movement variables are set to <span
class="mono">True</span> and the camera has not gone past (i.e. panned passed)
the boundaries set by the <span class="mono">MAX_CAM_X_PAN</span> and <span
class="mono">MAX_CAM_Y_PAN</span>, then the camera location (stored in <span
class="mono">cameraOffsetX</span> and <span class="mono">cameraOffsetY</span>)
should move over by <span class="mono">CAM_MOVE_SPEED</span> pixels.</p>

	<p>Note that there is an <span class="mono">if</span> and <span
class="mono">elif</span> statement on lines 228 and 230 for moving the camera
up and down, and then a separate <span class="mono">if</span> and <span
class="mono">elif</span> statement on lines 232 and 234. This way, the user
can move the camera both vertically and horizontally at the same time. This
wouldn’t be possible if line 232 were an <span class="mono">elif</span>
statement.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">237.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Adjust mapSurf's Rect object based on the camera
offset.</span></p>

		<p class="noindent mono"><span class="line-number">238.</span>         mapSurfRect
= mapSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">239.</span>         mapSurfRect.center
= (HALF_WINWIDTH + cameraOffsetX, HALF_WINHEIGHT + cameraOffsetY)</p>

		<p class="noindent mono"><span class="line-number">240.</span> </p>

		<p class="noindent mono"><span class="line-number">241.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Draw mapSurf to the DISPLAYSURF Surface object.</span></p>

		<p class="noindent mono"><span class="line-number">242.</span>         DISPLAYSURF.blit(mapSurf,
mapSurfRect)</p>

		<p class="noindent mono"><span class="line-number">243.</span> </p>

		<p class="noindent mono"><span class="line-number">244.</span>         DISPLAYSURF.blit(levelSurf,
levelRect)</p>

		<p class="noindent mono"><span class="line-number">245.</span>         stepSurf
= BASICFONT.render('Steps: %s' % (gameStateObj['stepCounter']), 1, TEXTCOLOR)</p>

		<p class="noindent mono"><span class="line-number">246.</span>         stepRect
= stepSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">247.</span>         stepRect.bottomleft
= (20, WINHEIGHT - 10)</p>

		<p class="noindent mono"><span class="line-number">248.</span>         DISPLAYSURF.blit(stepSurf,
stepRect)</p>

		<p class="noindent mono"><span class="line-number">249.</span> </p>

		<p class="noindent mono"><span class="line-number">250.</span>         if
levelIsComplete:</p>

		<p class="noindent mono"><span class="line-number">251.</span>             <span
class="comment"># is solved, show the &quot;Solved!&quot; image until
the player</span></p>

		<p class="noindent mono"><span class="line-number">252.</span>             <span
class="comment"># has pressed a key.</span></p>

		<p class="noindent mono"><span class="line-number">253.</span>             solvedRect
= IMAGESDICT['solved'].get_rect()</p>

		<p class="noindent mono"><span class="line-number">254.</span>             solvedRect.center
= (HALF_WINWIDTH, HALF_WINHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">255.</span>             DISPLAYSURF.blit(IMAGESDICT['solved'],
solvedRect)</p>

		<p class="noindent mono"><span class="line-number">256.</span> </p>

		<p class="noindent mono"><span class="line-number">257.</span>             if
keyPressed:</p>

		<p class="noindent mono"><span class="line-number">258.</span>                 return
'solved'</p>

		<p class="noindent mono"><span class="line-number">259.</span> </p>

		<p class="noindent mono"><span class="line-number">260.</span>         pygame.display.update()
<span class="comment"># draw DISPLAYSURF to the screen.</span></p>

		<p class="noindent mono"><span class="line-number">261.</span>         FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">262.</span></p>

		<p class="noindent mono"><span class="line-number">263.</span></p>

	</div>

	<p>Lines 237 to 261 position the camera and draw the map and
other graphics to the display Surface object in <span class="mono">DISPLAYSURF</span>.
If the level is solved, then the victory graphic is also drawn on top of
everything else. The <span class="mono">keyPressed</span> variable will be set
to <span class="mono">True</span> if the user pressed a key during this
iteration, at which point the <span class="mono">runLevel()</span> function
returns.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">264.</span> def
isWall(mapObj, x, y):</p>

		<p class="noindent mono"><span class="line-number">265.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Returns True if the (x, y) position
on</span></p>

		<p class="noindent mono"><span class="line-number">266.</span> &#160;&#160;&#160;&#160;<span
class="comment">the map is a wall, otherwise return
False.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">267.</span>     if
x &lt; 0 or x &gt;= len(mapObj) or y &lt; 0 or y &gt;= len(mapObj[x]):</p>

		<p class="noindent mono"><span class="line-number">268.</span>         return
False <span class="comment"># x and y aren't actually on the map.</span></p>

		<p class="noindent mono"><span class="line-number">269.</span>     elif
mapObj[x][y] in ('#', 'x'):</p>

		<p class="noindent mono"><span class="line-number">270.</span>         return
True <span class="comment"># wall is blocking</span></p>

		<p class="noindent mono"><span class="line-number">271.</span>     return
False</p>

	</div>

	<p>The <span class="mono">isWall()</span> function returns <span
class="mono">True</span> if there is a wall on the map object at the XY
coordinates passed to the function. Wall objects are represented as either a <span
class="mono">'x'</span> or <span class="mono">'#'</span> string in the map
object.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">274.</span> def
decorateMap(mapObj, startxy):</p>

		<p class="noindent mono"><span class="line-number">275.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Makes a copy of the given map object
and modifies it.</span></p>

		<p class="noindent mono"><span class="line-number">276.</span> &#160;&#160;&#160;&#160;<span
class="comment">Here is what is done to it:</span></p>

		<p class="noindent mono"><span class="line-number">277.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment">* Walls that are corners are turned into corner pieces.</span></p>

		<p class="noindent mono"><span class="line-number">278.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment">* The outside/inside floor tile distinction is made.</span></p>

		<p class="noindent mono"><span class="line-number">279.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment">* Tree/rock decorations are randomly added to the
outside tiles.</span></p>

		<p class="noindent mono"><span class="line-number">280.</span> </p>

		<p class="noindent mono"><span class="line-number">281.</span> &#160;&#160;&#160;&#160;<span
class="comment">Returns the decorated map object.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">282.</span> </p>

		<p class="noindent mono"><span class="line-number">283.</span>     startx,
starty = startxy <span class="comment"># Syntactic sugar</span></p>

		<p class="noindent mono"><span class="line-number">284.</span> </p>

		<p class="noindent mono"><span class="line-number">285.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Copy the map object so we don't modify the original
passed</span></p>

		<p class="noindent mono"><span class="line-number">286.</span>     mapObjCopy
= copy.deepcopy(mapObj)</p>

	</div>

	<p>The <span class="mono">decorateMap()</span> function alters
the data structure <span class="mono">mapObj</span> so that it isn’t as plain
as it appears in the map file. The three things that <span class="mono">decorateMap()</span>
changes are explained in the comment at the top of the function.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">288.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Remove the non-wall characters from the map data</span></p>

		<p class="noindent mono"><span class="line-number">289.</span>     for
x in range(len(mapObjCopy)):</p>

		<p class="noindent mono"><span class="line-number">290.</span>         for
y in range(len(mapObjCopy[0])):</p>

		<p class="noindent mono"><span class="line-number">291.</span>             if
mapObjCopy[x][y] in ('$', '.', '@', '+', '*'):</p>

		<p class="noindent mono"><span class="line-number">292.</span>                 mapObjCopy[x][y]
= ' '</p>

	</div>

	<p>The map object has characters that represent the position of
the player, goals, and stars. These are necessary for the map object (they’re
stored in other data structures after the map file is read) so they are
converted to blank spaces.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">294.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Flood fill to determine inside/outside floor tiles.</span></p>

		<p class="noindent mono"><span class="line-number">295.</span>     floodFill(mapObjCopy,
startx, starty, ' ', 'o')</p>

	</div>

	<p>The <span class="mono">floodFill()</span> function will
change all of the tiles inside the walls from <span class="mono">' '</span>
characters to <span class="mono">'o'</span> characters. It does this using a
programming concept called recursion, which is explained in “Recursive
Functions” section later in this chapter.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">297.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Convert the adjoined walls into corner tiles.</span></p>

		<p class="noindent mono"><span class="line-number">298.</span>     for
x in range(len(mapObjCopy)):</p>

		<p class="noindent mono"><span class="line-number">299.</span>         for
y in range(len(mapObjCopy[0])):</p>

		<p class="noindent mono"><span class="line-number">300.</span></p>

		<p class="noindent mono"><span class="line-number">301.</span>             if
mapObjCopy[x][y] == '#':</p>

		<p class="noindent mono"><span class="line-number">302.</span>                 if
(isWall(mapObjCopy, x, y-1) and isWall(mapObjCopy, x+1, y)) or \</p>

		<p class="noindent mono"><span class="line-number">303.</span>                    (isWall(mapObjCopy,
x+1, y) and isWall(mapObjCopy, x, y+1)) or \</p>

		<p class="noindent mono"><span class="line-number">304.</span>                    (isWall(mapObjCopy,
x, y+1) and isWall(mapObjCopy, x-1, y)) or \</p>

		<p class="noindent mono"><span class="line-number">305.</span>                    (isWall(mapObjCopy,
x-1, y) and isWall(mapObjCopy, x, y-1)):</p>

		<p class="noindent mono"><span class="line-number">306.</span>                     mapObjCopy[x][y]
= 'x'</p>

		<p class="noindent mono"><span class="line-number">307.</span></p>

		<p class="noindent mono"><span class="line-number">308.</span>             elif
mapObjCopy[x][y] == ' ' and random.randint(0, 99) &lt; OUTSIDE_DECORATION_PCT:</p>

		<p class="noindent mono"><span class="line-number">309.</span>                 mapObjCopy[x][y]
= random.choice(list(OUTSIDEDECOMAPPING.keys()))</p>

		<p class="noindent mono"><span class="line-number">310.</span> </p>

		<p class="noindent mono"><span class="line-number">311.</span>     return
mapObjCopy<span class="line-number"> </span></p>

	</div>

	<p>The large, multi-line <span class="mono">if</span>
statement on line 301 checks if the wall tile at the current XY coordinates are
a corner wall tile by checking if there are wall tiles adjacent to it that form
a corner shape. If so, the <span class="mono">'#'</span> string in the map object
that represents a normal wall is changed to a <span class="mono">'x'</span>
string which represents a corner wall tile.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">314.</span> def
isBlocked(mapObj, gameStateObj, x, y):</p>

		<p class="noindent mono"><span class="line-number">315.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Returns True if the (x, y) position
on the map is</span></p>

		<p class="noindent mono"><span class="line-number">316.</span> &#160;&#160;&#160;&#160;<span
class="comment">blocked by a wall or star, otherwise return
False.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">317.</span></p>

		<p class="noindent mono"><span class="line-number">318.</span>     if
isWall(mapObj, x, y):</p>

		<p class="noindent mono"><span class="line-number">319.</span>         return
True</p>

		<p class="noindent mono"><span class="line-number">320.</span></p>

		<p class="noindent mono"><span class="line-number">321.</span>     elif
x &lt; 0 or x &gt;= len(mapObj) or y &lt; 0 or y &gt;= len(mapObj[x]):</p>

		<p class="noindent mono"><span class="line-number">322.</span>         return
True <span class="comment"># x and y aren't actually on the map.</span></p>

		<p class="noindent mono"><span class="line-number">323.</span></p>

		<p class="noindent mono"><span class="line-number">324.</span>     elif
(x, y) in gameStateObj['stars']:</p>

		<p class="noindent mono"><span class="line-number">325.</span>         return
True <span class="comment"># a star is blocking</span></p>

		<p class="noindent mono"><span class="line-number">326.</span> </p>

		<p class="noindent mono"><span class="line-number">327.</span>     return
False</p>

	</div>

	<p>There are three cases where a space on the map would be
blocked: if there is a star, a wall, or the coordinates of the space are past
the edges of the map. The <span class="mono">isBlocked()</span> function
checks for these three cases and returns <span class="mono">True</span> if the
XY coordinates are blocked and <span class="mono">False</span> if not.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">330.</span> def
makeMove(mapObj, gameStateObj, playerMoveTo):</p>

		<p class="noindent mono"><span class="line-number">331.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Given a map and game state object,
see if it is possible for the</span></p>

		<p class="noindent mono"><span class="line-number">332.</span> &#160;&#160;&#160;&#160;<span
class="comment">player to make the given move. If it is, then change
the player's</span></p>

		<p class="noindent mono"><span class="line-number">333.</span> &#160;&#160;&#160;&#160;<span
class="comment">position (and the position of any pushed star). If not,
do nothing.</span></p>

		<p class="noindent mono"><span class="line-number">334.</span> </p>

		<p class="noindent mono"><span class="line-number">335.</span> &#160;&#160;&#160;&#160;<span
class="comment">Returns True if the player moved, otherwise
False.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">336.</span> </p>

		<p class="noindent mono"><span class="line-number">337.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Make sure the player can move in the direction they
want.</span></p>

		<p class="noindent mono"><span class="line-number">338.</span>     playerx,
playery = gameStateObj['player']</p>

		<p class="noindent mono"><span class="line-number">339.</span> </p>

		<p class="noindent mono"><span class="line-number">340.</span> &#160;&#160;&#160;&#160;<span
class="comment"># This variable is &quot;syntactic sugar&quot;. Typing
&quot;stars&quot; is more</span></p>

		<p class="noindent mono"><span class="line-number">341.</span> &#160;&#160;&#160;&#160;<span
class="comment"># readable than typing
&quot;gameStateObj['stars']&quot; in our code.</span></p>

		<p class="noindent mono"><span class="line-number">342.</span>     stars
= gameStateObj['stars']</p>

		<p class="noindent mono"><span class="line-number">343.</span> </p>

		<p class="noindent mono"><span class="line-number">344.</span> &#160;&#160;&#160;&#160;<span
class="comment"># The code for handling each of the directions is so
similar aside</span></p>

		<p class="noindent mono"><span class="line-number">345.</span> &#160;&#160;&#160;&#160;<span
class="comment"># from adding or subtracting 1 to the x/y coordinates.
We can</span></p>

		<p class="noindent mono"><span class="line-number">346.</span> &#160;&#160;&#160;&#160;<span
class="comment"># simplify it by using the xOffset and yOffset
variables.</span></p>

		<p class="noindent mono"><span class="line-number">347.</span>     if
playerMoveTo == UP:</p>

		<p class="noindent mono"><span class="line-number">348.</span>         xOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">349.</span>         yOffset
= -1</p>

		<p class="noindent mono"><span class="line-number">350.</span>     elif
playerMoveTo == RIGHT:</p>

		<p class="noindent mono"><span class="line-number">351.</span>         xOffset
= 1</p>

		<p class="noindent mono"><span class="line-number">352.</span>         yOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">353.</span>     elif
playerMoveTo == DOWN:</p>

		<p class="noindent mono"><span class="line-number">354.</span>         xOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">355.</span>         yOffset
= 1</p>

		<p class="noindent mono"><span class="line-number">356.</span>     elif
playerMoveTo == LEFT:</p>

		<p class="noindent mono"><span class="line-number">357.</span>         xOffset
= -1</p>

		<p class="noindent mono"><span class="line-number">358.</span>         yOffset
= 0</p>

		<p class="noindent mono"><span class="line-number">359.</span> </p>

		<p class="noindent mono"><span class="line-number">360.</span> &#160;&#160;&#160;&#160;<span
class="comment"># See if the player can move in that direction.</span></p>

		<p class="noindent mono"><span class="line-number">361.</span>     if
isWall(mapObj, playerx + xOffset, playery + yOffset):</p>

		<p class="noindent mono"><span class="line-number">362.</span>         return
False</p>

		<p class="noindent mono"><span class="line-number">363.</span>     else:</p>

		<p class="noindent mono"><span class="line-number">364.</span>         if
(playerx + xOffset, playery + yOffset) in stars:</p>

		<p class="noindent mono"><span class="line-number">365.</span>             <span
class="comment"># There is a star in the way, see if the player can
push it.</span></p>

		<p class="noindent mono"><span class="line-number">366.</span>             if
not isBlocked(mapObj, gameStateObj, playerx + (xOffset*2), playery +
(yOffset*2)):</p>

		<p class="noindent mono"><span class="line-number">367.</span>                 <span
class="comment"># Move the star.</span></p>

		<p class="noindent mono"><span class="line-number">368.</span>                 ind
= stars.index((playerx + xOffset, playery + yOffset))</p>

		<p class="noindent mono"><span class="line-number">369.</span>                 stars[ind]
= (stars[ind][0] + xOffset, stars[ind][1] + yOffset)</p>

		<p class="noindent mono"><span class="line-number">370.</span>             else:</p>

		<p class="noindent mono"><span class="line-number">371.</span>                 return
False</p>

		<p class="noindent mono"><span class="line-number">372.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Move the player upwards.</span></p>

		<p class="noindent mono"><span class="line-number">373.</span>         gameStateObj['player']
= (playerx + xOffset, playery + yOffset)</p>

		<p class="noindent mono"><span class="line-number">374.</span>         return
True</p>

	</div>

	<p>The <span class="mono">makeMove()</span> function checks to
make sure if moving the player in a particular direction is a valid move. As
long as there isn’t a wall blocking the path, or a star that has a wall or star
behind it, the player will be able to move in that direction. The <span
class="mono">gameStateObj</span> variable will be updated to reflect this, and
the <span class="mono">True</span> value will be returned to tell the
function’s caller that the player was moved.</p>

	<p>If there was a star in the space that the player wanted to
move, that star’s position is also changed and this information is updated in
the <span class="mono">gameStateObj</span> variable as well. This is how the
“star pushing” is implemented.</p>

	<p>If the player is blocked from moving in the desired
direction, then the <span class="mono">gameStateObj</span> is not modified and
the function returns <span class="mono">False</span>.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">377.</span> def
startScreen():</p>

		<p class="noindent mono"><span class="line-number">378.</span> &#160;&#160;&#160;&#160;<span
class="comment">&quot;&quot;&quot;Display the start screen (which has
the title and instructions)</span></p>

		<p class="noindent mono"><span class="line-number">379.</span> &#160;&#160;&#160;&#160;<span
class="comment">until the player presses a key. Returns
None.&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">380.</span> </p>

		<p class="noindent mono"><span class="line-number">381.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Position the title image.</span></p>

		<p class="noindent mono"><span class="line-number">382.</span>     titleRect
= IMAGESDICT['title'].get_rect()</p>

		<p class="noindent mono"><span class="line-number">383.</span>     topCoord
= 50 <span class="comment"># topCoord tracks where to position the top
of the text</span></p>

		<p class="noindent mono"><span class="line-number">384.</span>     titleRect.top
= topCoord</p>

		<p class="noindent mono"><span class="line-number">385.</span>     titleRect.centerx
= HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">386.</span>     topCoord
+= titleRect.height</p>

		<p class="noindent mono"><span class="line-number">387.</span> </p>

		<p class="noindent mono"><span class="line-number">388.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Unfortunately, Pygame's font &amp; text system only
shows one line at</span></p>

		<p class="noindent mono"><span class="line-number">389.</span> &#160;&#160;&#160;&#160;<span
class="comment"># a time, so we can't use strings with \n newline
characters in them.</span></p>

		<p class="noindent mono"><span class="line-number">390.</span> &#160;&#160;&#160;&#160;<span
class="comment"># So we will use a list with each line in it.</span></p>

		<p class="noindent mono"><span class="line-number">391.</span>     instructionText
= ['Push the stars over the marks.',</p>

		<p class="noindent mono"><span class="line-number">392.</span>                        'Arrow
keys to move, WASD for camera control, P to change character.',</p>

		<p class="noindent mono"><span class="line-number">393.</span>                        'Backspace
to reset level, Esc to quit.',</p>

		<p class="noindent mono"><span class="line-number">394.</span>                        'N
for next level, B to go back a level.']</p>

	</div>

	<p>The <span class="mono">startScreen()</span> function needs
to display a few different pieces of text down the center of the window. We
will store each line as a string in the <span class="mono">instructionText</span>
list. The title image (stored in <span class="mono">IMAGESDICT['title']</span>
as a Surface object (that was originally loaded from the <i>star_title.png</i>
file)) will be positioned 50 pixels from the top of the window. This is because
the integer <span class="mono">50</span> was stored in the <span
class="mono">topCoord</span> variable on line 383. The <span class="mono">topCoord</span>
variable will track the Y axis positioning of the title image and the
instructional text. The X axis is always going to be set so that the images and
text are centered, as it is on line 385 for the title image.</p>

	<p>On line 386, the <span class="mono">topCoord</span>
variable is increased by whatever the height of that image is. This way we can
modify the image and the start screen code won’t have to be changed.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">396.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Start with drawing a blank color to the entire
window:</span></p>

		<p class="noindent mono"><span class="line-number">397.</span>     DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">398.</span> </p>

		<p class="noindent mono"><span class="line-number">399.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Draw the title image to the window:</span></p>

		<p class="noindent mono"><span class="line-number">400.</span>     DISPLAYSURF.blit(IMAGESDICT['title'],
titleRect)</p>

		<p class="noindent mono"><span class="line-number">401.</span> </p>

		<p class="noindent mono"><span class="line-number">402.</span> &#160;&#160;&#160;&#160;<span
class="comment"># Position and draw the text.</span></p>

		<p class="noindent mono"><span class="line-number">403.</span>     for
i in range(len(instructionText)):</p>

		<p class="noindent mono"><span class="line-number">404.</span>         instSurf
= BASICFONT.render(instructionText[i], 1, TEXTCOLOR)</p>

		<p class="noindent mono"><span class="line-number">405.</span>         instRect
= instSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">406.</span>         topCoord
+= 10 <span class="comment"># 10 pixels will go in between each line of
text.</span></p>

		<p class="noindent mono"><span class="line-number">407.</span>         instRect.top
= topCoord</p>

		<p class="noindent mono"><span class="line-number">408.</span>         instRect.centerx
= HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">409.</span>         topCoord
+= instRect.height <span class="comment"># Adjust for the height of the
line.</span></p>

		<p class="noindent mono"><span class="line-number">410.</span>         DISPLAYSURF.blit(instSurf,
instRect)</p>

	</div>

	<p>Line 400 is where the title image is blitted to the display
Surface object. The <span class="mono">for</span> loop starting on line 403
will render, position, and blit each instructional string in the <span
class="mono">instructionText</span> loop. The <span class="mono">topCoord</span>
variable will always be incremented by the size of the previously rendered text
(line 409) and 10 additional pixels (on line 406, so that there will be a 10
pixel gap between the lines of text).</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">412.</span>     while
True: <span class="comment"># Main loop for the start screen.</span></p>

		<p class="noindent mono"><span class="line-number">413.</span>         for
event in pygame.event.get():</p>

		<p class="noindent mono"><span class="line-number">414.</span>             if
event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">415.</span>                 terminate()</p>

		<p class="noindent mono"><span class="line-number">416.</span>             elif
event.type == KEYDOWN:</p>

		<p class="noindent mono"><span class="line-number">417.</span>                 if
event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">418.</span>                     terminate()</p>

		<p class="noindent mono"><span class="line-number">419.</span>                 return
<span class="comment"># user has pressed a key, so return.</span></p>

		<p class="noindent mono"><span class="line-number">420.</span> </p>

		<p class="noindent mono"><span class="line-number">421.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span
class="comment"># Display the DISPLAYSURF contents to the actual
screen.</span></p>

		<p class="noindent mono"><span class="line-number">422.</span>         pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">423.</span>         FPSCLOCK.tick()</p>

	</div>

	<p>There is a game loop in <span class="mono">startScreen()</span>
that begins on line 412 and handles events that indicate if the program should
terminate or return from the <span class="mono">startScreen()</span> function.
Until the player does either, the loop will keep calling <span class="mono">pygame.display.update()</span>
and <span class="mono">FPSCLOCK.tick()</span> to keep the start screen
displayed on the screen.</p>

	<h1 class="subheading" id="">Data Structures in Star Pusher</h1>
	<p class="noindent">Star Pusher has a specific format for the levels, maps, and game state data structures.</p>

	<h1 class="subheading" id="">The “Game State” Data Structure</h1>

	<p class="noindent">The game state object will be a dictionary with three keys: <span class="mono">'player'</span>, <span class="mono">'stepCounter'</span>, and <span class="mono">'stars'</span>.</p>

	<ul>
		<li>The value at the <span class="mono">'player'</span> key will be a tuple of two integers for the current XY position of the player.</li>
		<li>The value at the <span class="mono">'stepCounter'</span> key will be an integer that tracks how many moves the player has made in this level (so the player can try to solve the puzzle in the future with fewer steps).</li>
		<li>The value at the <span class="mono">'stars'</span> key is a list of two-integer tuples of XY values for each of the stars on the current level.</li>
	</ul>

	<h1 class="subheading" id="">The “Map” Data Structure</h1>
	<p class="noindent">The map data structure is simply a 2D list of lists where the two indexes used represent the X and Y coordinates of the map. The value at each index in the list of lists is a single-character string that represents the title that is on that map at each space:</p>

	<ul>
		<li><span class="mono">'#'</span> – A wooden wall.</li>
		<li><span class="mono">'x'</span> – A corner wall.</li>
		<li><span class="mono">'@'</span> – The starting space for the player on this level.</li>
		<li><span class="mono">'.'</span> – A goal space.</li>
		<li><span class="mono">'$'</span> – A space where a star is at the start of the level.</li>
		<li><span class="mono">'+'</span> – A space with a goal and the starting player’s space.</li>
		<li><span class="mono">'*'</span> – A space with a goal and a star at the start of the level.</li>
		<li><span class="mono">' '</span> – A grassy outdoor space.</li>
		<li><span class="mono">'o'</span> – An inside floor space. (This is a lowercase letter O, not a zero.)</li>
		<li><span class="mono">'1'</span> – A rock on grass.</li>
		<li><span class="mono">'2'</span> – A short tree on grass.</li>
		<li><span class="mono">'3'</span> – A tall tree on grass.</li>
		<li><span class="mono">'4'</span> – An ugly tree on grass.</li>
	</ul>

	<h1 class="subheading" id="">The “Levels” Data Structure</h1>
	<p class="noindent">The level object contains a game state object (which will be the state used when the level first starts), a map object, and a few other values. The level object itself is a dictionary with the following keys:</p>

	<ul>
		<li>The value at the key <span class="mono">'width'</span> is an integer of how many tiles wide the entire map is.</li>
		<li>The value at the key <span class="mono">'height'</span> is an integer of how many tiles tall the entire map is.</li>
		<li>The value at the key <span class="mono">'mapObj'</span> is the map object for this level.</li>
		<li>The value at the key <span class="mono">'goals'</span> is a list of two-integer tuples with the XY coordinates of each goal space on the map.</li>
		<li>The value at the key <span class="mono">'startState'</span> is a game state object used to show the starting position of the stars and player at the start of the level.</li>
	</ul>

	<h1 class="subheading" id="">Reading and Writing Text Files</h1>
	<p class="noindent">Python has functions for reading files off of the player’s hard drive. This will be useful for having a separate file keep all of the data for each level. This is also a good idea because in order to get new levels, the player doesn’t have to change the source code of the game but instead can just download new level files.</p>

	<h1 class="subheading" id="">Text Files and Binary Files</h1>
	<p class="noindent">Text files are files that contain simple text data. Text files are created in Windows by the Notepad application, Gedit on Ubuntu, and TextEdit on Mac OS X. There are many other programs called text editors that can create and modify text files. IDLE’s own file editor is a text editor.</p>
	<p>The difference between text editors and word processors (like Microsoft Word, or OpenOffice Writer, or iWork Pages) is that text editors have text only. You can’t set the font, size, or color of the text. (IDLE automatically sets the color of the text based on what kind of Python code it is, but you can’t change this yourself, so it is still a text editor.) The difference between text and binary files isn’t important for this game program, but you can read about it at <a href="https://invpy.com/textbinary">https://invpy.com/textbinary</a>. All you need to know is the this chapter and the Star Pusher program only deal with text files.</p>

	<h1 class="subheading" id="">Writing to Files</h1>
	<p class="noindent">To create a file, call the <span class="mono">open()</span> function pass it two arguments: a string for the name of the file, and the string <span class="mono">'w'</span> to tell the <span class="mono">open()</span> function you want to open the file in “write” mode. The <span class="mono">open()</span> function returns a file object:</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; textFile = open('hello.txt', 'w')</p>
		<p class="noindent mono">&gt;&gt;&gt;</p>
	</div>

	<p>If you run this code from the interactive shell, the <i>hello.txt</i> file that this function creates will be created in the same folder that the python.exe program is in (on Windows, this will probably be C:\Python32). If the <span class="mono">open()</span> function is called from a .py program, the file is created in the same folder that the .py file is in.</p>
	<p>The “write” mode tells <span class="mono">open()</span> to create the file if it does not exist. If it does exist, then <span class="mono">open()</span> will delete that file and create a new, blank file. This is just like how an assignment statement can create a new variable, or overwrite the current value in an already existing variable. <b>This can be somewhat dangerous.</b> If you accidentally send a filename of an important file to the <span class="mono">open()</span> function with <span class="mono">'w'</span> as the second parameter, it will be deleted. This could result in having to reinstall the operating system on your computer and/or the launching of nuclear missiles.</p>
	<p>The file object has a method called <span class="mono">write()</span> which can be used to write text to the file. Just pass it a string like you would pass a string to the <span class="mono">print()</span> function. The difference is that <span class="mono">write()</span> does not automatically add a newline character (<span class="mono">'\n'</span>) to the end of the string. If you want to add a newline, you will have to include it in the string:</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; textFile = open('hello.txt', 'w')</p>
		<p class="noindent mono">&gt;&gt;&gt; textFile.write('This will be the content of the file.\nHello world!\n')</p>
		<p class="noindent mono">&gt;&gt;&gt;</p>
	</div>

	<p>To tell Python that you are done writing content to this file, you should call the <span class="mono">close()</span> method of the file object. (Although Python will automatically close any opened file objects when the program ends.)</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; textFile.close()</p>
	</div>

	<h1 class="subheading" id="">Reading from Files</h1>
	<p class="noindent">To read the content of a file, pass the string <span class="mono">'r'</span> instead of <span class="mono">'w'</span> to the <span class="mono">open()</span> function. Then call the <span class="mono">readlines()</span> method on the file object to read in the contents of the file. Last, close the file by calling the <span class="mono">close()</span> method.</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; textFile = open('hello.txt', 'r')</p>
		<p class="noindent mono">&gt;&gt;&gt; content = textFile.readlines()</p>
		<p class="noindent mono">&gt;&gt;&gt; textFile.close()</p>
	</div>

	<p>The <span class="mono">readlines()</span> method returns a list of strings: one string for each line of text in the file:</p>

	<div class="python-shell">
			<p class="noindent mono">&gt;&gt;&gt; content</p>
			<p class="noindent mono">['This will be the content of the file.\n', 'Hello world!\n']</p>
			<p class="noindent mono">&gt;&gt;&gt;</p>
	</div>

	<p>If you want to re-read the contents of that file, you will have to call <span class="mono">close()</span> on the file object and re-open it.</p>
	<p>As an alternative to <span class="mono">readlines()</span>, you can also call the <span class="mono">read()</span> method, which will return the entire contents of the file as a single string value:</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; textFile = open('hello.txt', 'r')</p>
		<p class="noindent mono">&gt;&gt;&gt; content = textFile.read()</p>
		<p class="noindent mono">&gt;&gt;&gt; content</p>
		<p class="noindent mono">'This will be the content of the file.\nHello world!\n'</p>
	</div>

	<p>On a side note, if you leave out the second parameter to the <span class="mono">open()</span> function, Python will assume you mean to open the file in read mode. So <span class="mono">open('foobar.txt', 'r')</span> and <span class="mono">open('foobar.txt')</span> do the exact same thing.</p>

	<h1 class="subheading" id="">About the Star Pusher Map File Format</h1>
	<p class="noindent">We need the level text file to be in a specific format. Which characters represent walls, or stars, or the player’s starting position? If we have the maps for multiple levels, how can we tell when one level’s map ends and the next one begins?</p>
	<p>Fortunately, the map file format we will use is already defined for us. There are many Sokoban games out there (you can find more at <a href="https://invpy.com/sokobanclones">https://invpy.com/sokobanclones</a>), and they all use the same map file format. If you download the levels file from <a href="https://invpy.com/starPusherLevels.txt">https://invpy.com/starPusherLevels.txt</a> and open it in a text editor, you’ll see something like this:</p>

	<div class="python-shell">
		<p class="noindent mono">; Star Pusher (Sokoban clone)</p>
		<p class="noindent mono">; http://inventwithpython.com/blog</p>
		<p class="noindent mono">; By Al Sweigart al@inventwithpython.com</p>
		<p class="noindent mono">;</p>
		<p class="noindent mono">; Everything after the ; is a comment and will be ignored by the game that</p>
		<p class="noindent mono">; reads in this file.</p>
		<p class="noindent mono">;</p>
		<p class="noindent mono">; The format is described at:</p>
		<p class="noindent mono">; http://sokobano.de/wiki/index.php?title=Level_format</p>
		<p class="noindent mono">;   @ - The starting position of the player.</p>
		<p class="noindent mono">;   $ - The starting position for a pushable star.</p>
		<p class="noindent mono">;   . - A goal where a star needs to be pushed.</p>
		<p class="noindent mono">;   + - Player &amp; goal</p>
		<p class="noindent mono">;   * - Star &amp; goal</p>
		<p class="noindent mono">;  (space) - an empty open space.</p>
		<p class="noindent mono">;   # - A wall.</p>
		<p class="noindent mono">;</p>
		<p class="noindent mono">; Level maps are separated by a blank line (I like to use a ; at the start</p>
		<p class="noindent mono">; of the line since it is more visible.)</p>
		<p class="noindent mono">;</p>
		<p class="noindent mono">; I tried to use the same format as other people use for their Sokoban games,</p>
		<p class="noindent mono">; so that loading new levels is easy. Just place the levels in a text file</p>
		<p class="noindent mono">; and name it &quot;starPusherLevels.txt&quot; (after renaming this file, of course).</p>
		<p class="noindent mono"></p>
		<p class="noindent mono"></p>
		<p class="noindent mono">; Starting demo level:</p>
		<p class="noindent mono"> &#160;&#160;########</p>
		<p class="noindent mono"> &#160;##&#160;&#160;&#160;&#160;&#160;&#160;#</p>
		<p class="noindent mono"> &#160;#&#160;&#160;&#160;.&#160;&#160;&#160;#</p>
		<p class="noindent mono"> &#160;#&#160;&#160;&#160;$&#160;&#160;&#160;#</p>
		<p class="noindent mono"> &#160;#&#160;.$@$.&#160;#</p>
		<p class="noindent mono"> &#160;####$&#160;&#160;&#160;#</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;#.&#160;&#160;&#160;#</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;#&#160;&#160;&#160;##</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;#####</p>
	</div>

	<p>The comments at the top of the file explain the file’s format. When you load the first level, it looks like this:</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">426.</span> def readLevelsFile(filename):</p>
		<p class="noindent mono"><span class="line-number">427.</span> &#160;&#160;&#160;&#160;assert os.path.exists(filename), 'Cannot find the level file: %s' % (filename)</p>
	</div>

	<p>The <span class="mono">os.path.exists()</span> function will return <span class="mono">True</span> if the file specified by the string passed to the function exists. If it does not exist, <span class="mono">os.path.exists()</span> returns <span class="mono">False</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">428.</span> &#160;&#160;&#160;&#160;mapFile = open(filename, 'r')</p>
		<p class="noindent mono"><span class="line-number">429.</span> &#160;&#160;&#160;&#160;<span class="comment"># Each level must end with a blank line</span></p>
		<p class="noindent mono"><span class="line-number">430.</span> &#160;&#160;&#160;&#160;content = mapFile.readlines() + ['\r\n']</p>
		<p class="noindent mono"><span class="line-number">431.</span> &#160;&#160;&#160;&#160;mapFile.close()</p>
		<p class="noindent mono"><span class="line-number">432.</span></p>
		<p class="noindent mono"><span class="line-number">433.</span> &#160;&#160;&#160;&#160;levels = [] <span class="comment"># Will contain a list of level objects.</span></p>
		<p class="noindent mono"><span class="line-number">434.</span> &#160;&#160;&#160;&#160;levelNum = 0</p>
		<p class="noindent mono"><span class="line-number">435.</span> &#160;&#160;&#160;&#160;mapTextLines = [] <span class="comment"># contains the lines for a single level's map.</span></p>
		<p class="noindent mono"><span class="line-number">436.</span> &#160;&#160;&#160;&#160;mapObj = [] <span class="comment"># the map object made from the data in mapTextLines</span></p>
	</div>

	<p>The file object for the level file that is opened for reading is stored in <span class="mono">mapFile</span>. All of the text from the level file is stored as a list of strings in the <span class="mono">content</span> variable, with a blank line added to the end. (The reason that this is done is explained later.)</p>
	<p>After the level objects are created, they will be stored in the <span class="mono">levels</span> list. The <span class="mono">levelNum</span> variable will keep track of how many levels are found inside the level file. The <span class="mono">mapTextLines</span> list will be a list of strings from the <span class="mono">content</span> list for a single map (as opposed to how <span class="mono">content</span> stores the strings of all maps in the level file). The <span class="mono">mapObj</span> variable will be a 2D list.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">437.</span> &#160;&#160;&#160;&#160;for lineNum in range(len(content)):</p>
		<p class="noindent mono"><span class="line-number">438.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Process each line that was in the level file.</span></p>
		<p class="noindent mono"><span class="line-number">439.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;line = content[lineNum].rstrip('\r\n')</p>
	</div>

	<p>The <span class="mono">for</span> loop on line 437 will go through each line that was read from the level file one line at a time. The line number will be stored in <span class="mono">lineNum</span> and the string of text for the line will be stored in line. Any newline characters at the end of the string will be stripped off.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">441.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ';' in line:</p>
		<p class="noindent mono"><span class="line-number">442.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Ignore the ; lines, they're comments in the level file.</span></p>
		<p class="noindent mono"><span class="line-number">443.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;line = line[:line.find(';')]</p>
	</div>

	<p>Any text that exists after a semicolon in the map file is treated like a comment and is ignored. This is just like the <span class="mono">#</span> sign for Python comments. To make sure that our code does not accidentally think the comment is part of the map, the <span class="mono">line</span> variable is modified so that it only consists of the text up to (but not including) the semicolon character. (Remember that this is only changing the string in the <span class="mono">content</span> list. It is not changing the level file on the hard drive.)</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">445.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if line != '':</p>
		<p class="noindent mono"><span class="line-number">446.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># This line is part of the map.</span></p>
		<p class="noindent mono"><span class="line-number">447.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapTextLines.append(line)</p>
	</div>

	<p>There can be maps for multiple levels in the map file. The <span class="mono">mapTextLines</span> list will contain the lines of text from the map file for the current level being loaded. As long as the current line is not blank, the line will be appended to the end of <span class="mono">mapTextLines</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">448.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif line == '' and len(mapTextLines) &gt; 0:</p>
		<p class="noindent mono"><span class="line-number">449.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># A blank line indicates the end of a level's map in the file.</span></p>
		<p class="noindent mono"><span class="line-number">450.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Convert the text in mapTextLines into a level object.</span></p>
	</div>

	<p>When there is a blank line in the map file, that indicates that the map for the current level has ended. And future lines of text will be for the later levels. Note however, that there must at least be one line in <span class="mono">mapTextLines</span> so that multiple blank lines together are not counted as the start and stop to multiple levels.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">452.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Find the longest row in the map.</span></p>
		<p class="noindent mono"><span class="line-number">453.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;maxWidth = -1</p>
		<p class="noindent mono"><span class="line-number">454.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(mapTextLines)):</p>
		<p class="noindent mono"><span class="line-number">455.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if len(mapTextLines[i]) &gt; maxWidth:</p>
		<p class="noindent mono"><span class="line-number">456.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;maxWidth = len(mapTextLines[i])</p>
	</div>

	<p>All of the strings in <span class="mono">mapTextLines</span> need to be the same length (so that they form a rectangle), so they should be padded with extra blank spaces until they are all as long as the longest string. The <span class="mono">for</span> loop goes through each of the strings in <span class="mono">mapTextLines</span> and updates <span class="mono">maxWidth</span> when it finds a new longest string. After this loop finishes executing, the <span class="mono">maxWidth</span> variable will be set to the length of the longest string in <span class="mono">mapTextLines</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">457.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Add spaces to the ends of the shorter rows. This</span></p>
		<p class="noindent mono"><span class="line-number">458.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># ensures the map will be rectangular.</span></p>
		<p class="noindent mono"><span class="line-number">459.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in range(len(mapTextLines)):</p>
		<p class="noindent mono"><span class="line-number">460.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapTextLines[i] += ' ' * (maxWidth - len(mapTextLines[i]))</p>
	</div>

	<p>The <span class="mono">for</span> loop on line 459 goes through the strings in <span class="mono">mapTextLines</span> again, this time to add enough space characters to pad each to be as long as <span class="mono">maxWidth</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">462.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Convert mapTextLines to a map object.</span></p>
		<p class="noindent mono"><span class="line-number">463.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for x in range(len(mapTextLines[0])):</p>
		<p class="noindent mono"><span class="line-number">464.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapObj.append([])</p>
		<p class="noindent mono"><span class="line-number">465.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for y in range(len(mapTextLines)):</p>
		<p class="noindent mono"><span class="line-number">466.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for x in range(maxWidth):</p>
		<p class="noindent mono"><span class="line-number">467.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapObj[x].append(mapTextLines[y][x])</p>
	</div>

	<p>The <span class="mono">mapTextLines</span> variable just stores a list of strings. (Each string in the list represents a row, and each character in the string represents a character at a different column. This is why line 467 has the Y and X indexes reversed, just like the <span class="mono">SHAPES</span> data structure in the Tetromino game.) But the map object will have to be a list of list of single-character strings such that <span class="mono">mapObj[x][y]</span> refers to the tile at the XY coordinates. The <span class="mono">for</span> loop on line 463 adds an empty list to <span class="mono">mapObj</span> for each column in <span class="mono">mapTextLines</span>.</p>
	<p>The nested <span class="mono">for</span> loops on line 465 and 466 will fill these lists with single-character strings to represent each tile on the map. This creates the map object that Star Pusher uses.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">469.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Loop through the spaces in the map and find the @, ., and $</span></p>
		<p class="noindent mono"><span class="line-number">470.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># characters for the starting game state.</span></p>
		<p class="noindent mono"><span class="line-number">471.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;startx = None <span class="comment"># The x and y for the player's starting position</span></p>
		<p class="noindent mono"><span class="line-number">472.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;starty = None</p>
		<p class="noindent mono"><span class="line-number">473.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goals = [] <span class="comment"># list of (x, y) tuples for each goal.</span></p>
		<p class="noindent mono"><span class="line-number">474.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stars = [] <span class="comment"># list of (x, y) for each star's starting position.</span></p>
		<p class="noindent mono"><span class="line-number">475.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for x in range(maxWidth):</p>
		<p class="noindent mono"><span class="line-number">476.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for y in range(len(mapObj[x])):</p>
		<p class="noindent mono"><span class="line-number">477.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if mapObj[x][y] in ('@', '+'):</p>
		<p class="noindent mono"><span class="line-number">478.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># '@' is player, '+' is player &amp; goal</span></p>
		<p class="noindent mono"><span class="line-number">479.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;startx = x</p>
		<p class="noindent mono"><span class="line-number">480.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;starty = y</p>
		<p class="noindent mono"><span class="line-number">481.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if mapObj[x][y] in ('.', '+', '*'):</p>
		<p class="noindent mono"><span class="line-number">482.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># '.' is goal, '*' is star &amp; goal</span></p>
		<p class="noindent mono"><span class="line-number">483.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;goals.append((x, y))</p>
		<p class="noindent mono"><span class="line-number">484.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if mapObj[x][y] in ('$', '*'):</p>
		<p class="noindent mono"><span class="line-number">485.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># '$' is star</span></p>
		<p class="noindent mono"><span class="line-number">486.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stars.append((x, y))</p>
	</div>

	<p>After creating the map object, the nested <span class="mono">for</span> loops on lines 475 and 476 will go through each space to find the XY coordinates three things:</p>

	<ol>
		<li>The player’s starting position. This will be stored in the <span class="mono">startx</span> and <span class="mono">starty</span> variables, which will then be stored in the game state object later on line 494.</li>
		<li>The starting position of all the stars These will be stored in the <span class="mono">stars</span> list, which is later stored in the game state object on line 496.</li>
		<li>The position of all the goals. These will be stored in the <span class="mono">goals</span> list, which is later stored in the level object on line 500.</li>
  </ol>

	<p>Remember, the game state object contains all the things that can change. This is why the player’s position is stored in it (because the player can move around) and why the stars are stored in it (because the stars can be pushed around by the player). But the goals are stored in the level object, since they will never move around.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">488.</span>             <span class="comment"># Basic level design sanity checks:</span></p>
		<p class="noindent mono"><span class="line-number">489.</span>             assert
startx != None and starty != None, 'Level %s (around line %s) in %s is missing
a &quot;@&quot; or &quot;+&quot; to mark the start point.' % (levelNum+1,
lineNum, filename)</p>

		<p class="noindent mono"><span class="line-number">490.</span>             assert
len(goals) &gt; 0, 'Level %s (around line %s) in %s must have at least one
goal.' % (levelNum+1, lineNum, filename)</p>

		<p class="noindent mono"><span class="line-number">491.</span>             assert
len(stars) &gt;= len(goals), 'Level %s (around line %s) in %s is impossible to
solve. It has %s goals but only %s stars.' % (levelNum+1, lineNum, filename,
len(goals), len(stars))</p>

	</div>

	<p>At this point, the level has been read in and processed. To be sure that this level will work properly, a few assertions must pass. If any of the conditions for these assertions are <span class="mono">False</span>, then Python will produce an error (using the string from the <span class="mono">assert</span> statement) saying what is wrong with the level file.</p>
	<p>The first assertion on line 489 checks to make sure that there is a player starting point listed somewhere on the map. The second assertion on line 490 checks to make sure there is at least one goal (or more) somewhere on the map. And the third assertion on line 491 checks to make sure that there is at least one star for each goal (but having more stars than goals is allowed).</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">493.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Create level object and starting game state object.</span></p>
		<p class="noindent mono"><span class="line-number">494.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gameStateObj = {'player': (startx, starty),</p>
		<p class="noindent mono"><span class="line-number">495.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'stepCounter': 0,</p>
		<p class="noindent mono"><span class="line-number">496.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'stars': stars}</p>
		<p class="noindent mono"><span class="line-number">497.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;levelObj = {'width': maxWidth,</p>
		<p class="noindent mono"><span class="line-number">498.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'height': len(mapObj),</p>
		<p class="noindent mono"><span class="line-number">499.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'mapObj': mapObj,</p>
		<p class="noindent mono"><span class="line-number">500.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'goals': goals,</p>
		<p class="noindent mono"><span class="line-number">501.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'startState': gameStateObj}</p>
		<p class="noindent mono"><span class="line-number">502.</span></p>
		<p class="noindent mono"><span class="line-number">503.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;levels.append(levelObj)</p>
	</div>

	<p>Finally, these objects are stored in the game state object, which itself is stored in the level object. The level object is added to a list of level objects on line 503. It is this <span class="mono">levels</span> list that will be returned by the <span class="mono">readLevelsFile()</span> function when all of the maps have been processed.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">505.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Reset the variables for reading the next map.</span></p>
		<p class="noindent mono"><span class="line-number">506.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapTextLines = []</p>
		<p class="noindent mono"><span class="line-number">507.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapObj = []</p>
		<p class="noindent mono"><span class="line-number">508.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gameStateObj = {}</p>
		<p class="noindent mono"><span class="line-number">509.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;levelNum += 1</p>
		<p class="noindent mono"><span class="line-number">510.</span> &#160;&#160;&#160;&#160;return levels</p>
	</div>

	<p>Now that this level is done processing, the variables for <span class="mono">mapTextLines</span>, <span class="mono">mapObj</span>, and <span class="mono">gameStateObj</span> should be reset to blank values for the next level that will be read in from the level file. The <span class="mono">levelNum</span> variable is also incremented by <span class="mono">1</span> for the next level’s level number.</p>

	<h1 class="subheading" id="">Recursive Functions</h1>
	<p class="noindent">Before you can learn how the <span class="mono">floodFill()</span> function works, you need to learn about recursion. Recursion is a simple concept: A <a href="glossary.xhtml#recursive-function"><b>recursive function</b></a> is just a function that calls itself, like the one in the following program: (don’t type the letters at the beginning of each line though)</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">A.</span> def passFortyTwoWhenYouCallThisFunction(param):</p>
		<p class="noindent mono"><span class="line-number">B.</span> &#160;&#160;&#160;&#160;print('Start of function.')</p>
		<p class="noindent mono"><span class="line-number">C.</span> &#160;&#160;&#160;&#160;if param != 42:</p>
		<p class="noindent mono"><span class="line-number">D.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print('You did not pass 42 when you called this function.')</p>
		<p class="noindent mono"><span class="line-number">E.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print('Fine. I will do it myself.')</p>
		<p class="noindent mono"><span class="line-number">F.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;passFortyTwoWhenYouCallThisFunction(42) <span class="comment"># this is the recursive call</span></p>
		<p class="noindent mono"><span class="line-number">G.</span> &#160;&#160;&#160;&#160;if param == 42:</p>
		<p class="noindent mono"><span class="line-number">H.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print('Thank you for passing 42 when you called this function.')</p>
		<p class="noindent mono"><span class="line-number">I.</span> &#160;&#160;&#160;&#160;print('End of function.')</p>
		<p class="noindent mono"><span class="line-number">J.</span></p>
		<p class="noindent mono"><span class="line-number">K.</span> passFortyTwoWhenYouCallThisFunction(41)</p>
	</div>

	<p>(In your own programs, don’t make functions have names as long as <span class="mono">passFortyTwoWhenYouCallThisFunction()</span>. I’m just being stupid and silly. Stupilly.)</p>
	<p>When you run this program, the function gets defined when the <span class="mono">def</span> statement on line A executes. The next line of code that is executed is line K, which calls <span class="mono">passFortyTwoWhenYouCallThisFunction()</span> and passes (gasp!) <span class="mono">41</span>. As a result, the function calls itself on line F and passes 42. We call this call the <a href="glossary.xhtml#recursive-call"><b>recursive call</b></a>.</p>
	<p>This is what our program outputs:</p>

	<div class="python-shell">
		<p class="sample-code">Start of function.</p>
		<p class="sample-code">You did not pass 42 when you called this function.</p>
		<p class="sample-code">Fine. I will do it myself.</p>
		<p class="sample-code">Start of function.</p>
		<p class="sample-code">Thank you for passing 42 when you called this function.</p>
		<p class="sample-code">End of function.</p>
		<p class="sample-code">End of function.</p>
	</div>

	<p>Notice that the “Start of function.” and “End of function.” text appears twice. Let’s figure out what exactly happens and what order it happens in.</p>
	<p>On line K, the function is called and 41 is passed for the param parameter. Line B prints out “Start of function.”. The condition on line C will be <span class="mono">True</span> (since <span class="mono">41 != 42</span>) so Line C and D will print out their messages. Line F will then make a call, recursively, to the function and passes <span class="mono">42</span> for the param parameter. So execution starts on line B again and prints out “Start of function.”. Line C’s condition this time is <span class="mono">False</span>, so it skips to line G and finds that condition to be <span class="mono">True</span>. This causes line H to be called and displays “Thank you…” on the screen. Then the last line of the function, line I, will execute to print out “End of function.” and the function returns to the line that called it.</p>
	<p>But remember, the line of code that called the function was line F. And in this original call, param was set to <span class="mono">41</span>. The code goes down to line G and checks the condition, which is <span class="mono">False</span> (since <span class="mono">41 == 42</span> is <span class="mono">False</span>) so it skips the <span class="mono">print()</span> call on line H. Instead, it runs the <span class="mono">print()</span> call on line I which makes “End of function.” display for a second time.</p>
	<p>Since it has reached the end of the function, it returns to the line of code that called this function call, which was line K. There are no more lines of code after line K, so the program terminates. </p>
	<p>Note that local variables are not just local to the function, but to a specific call of the function.</p>

	<h1 class="subheading" id="">Stack Overflows</h1>
	<p class="noindent">Each time a function is called, the Python interpreter remembers which line of code made the call. That way when the function returns Python knows where to resume the execution. Remembering this takes up a tiny bit of memory. This isn’t normally a big deal, but take a look at this code:</p>

	<div class="python-shell">
		<p class="noindent mono">def funky():</p>
		<p class="noindent mono">&#160;&#160;&#160;&#160;funky()</p>
		<p class="noindent mono">&#160;</p>
		<p class="noindent mono">funky()</p>
	</div>

	<p>If you run this program, you’ll get a large amount of output which looks like this:</p>

	<div class="python-shell">
		<p class="sample-code">...</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in funky</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;funky()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in funky</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;funky()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in funky</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;funky()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in funky</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;funky()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in funky</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;funky()</p>
		<p class="sample-code">RuntimeError: maximum recursion depth exceeded</p>

	</div>

	<p>The <span class="mono">funky()</span> function does nothing but call itself. And then in that call, the function calls itself again. Then it calls itself again, and again, and again. Each time it calls itself, Python has to remember what line of code made that call so that when the function returns it can resume the execution there. But the <span class="mono">funky()</span> function never returns, it just keeps making calls to itself.</p>
	<p>This is just like the infinite loop bug, where the program keeps going and never stops. To prevent itself from running out of memory, Python will cause an error after you are a 1000 calls deep and crash the program. This type of bug is called a <a href="glossary.xhtml#stack-overflow"><b>stack overflow</b></a>.</p>
	<p>This code also causes a stack overflow, even though there are no recursive functions:</p>

	<div class="python-shell">
		<p class="noindent mono">def spam():</p>
		<p class="noindent mono">&#160;&#160;&#160;&#160;eggs()</p>
		<p class="noindent mono">&#160;</p>
		<p class="noindent mono">def eggs():</p>
		<p class="noindent mono">&#160;&#160;&#160;&#160;spam()</p>
		<p class="noindent mono">&#160;</p>
		<p class="noindent mono">spam()</p>
	</div>

	<p>When you run this program, it causes an error that looks like this:</p>

	<div class="python-shell">
		<p class="sample-code">...</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in spam</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;eggs()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 5, in eggs</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;spam()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in spam</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;eggs()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 5, in eggs</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;spam()</p>
		<p class="sample-code"> &#160;&#160;File &quot;C:\test67.py&quot;, line 2, in spam</p>
		<p class="sample-code"> &#160;&#160;&#160;&#160;eggs()</p>
		<p class="sample-code">RuntimeError: maximum recursion depth exceeded</p>
	</div>

	<h1 class="subheading" id="">Preventing Stack Overflows with a Base Case</h1>
	<p class="noindent">In order to prevent stack overflow bugs, you must have a <a href="glossary.xhtml#base-case"><b>base case</b></a> where the function stops make new recursive calls. If there is no base case then the function calls will never stop and eventually a stack overflow will occur. Here is an example of a recursive function with a base case. The base case is when the param parameter equals 2.</p>

	<div class="python-shell">
		<p class="noindent mono"> def fizz(param):</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;print(param)</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;if param == 2:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;fizz(param - 1)</p>
		<p class="noindent mono"> &#160;</p>
		<p class="noindent mono"> fizz(5)</p>
	</div>

	<p>When you run this program, the output will look like this:</p>

	<div class="python-shell">
		<p class="sample-code">5</p>
		<p class="sample-code">4</p>
		<p class="sample-code">3</p>
		<p class="sample-code">2</p>
	</div>

	<p>This program does not have a stack overflow error because once the param parameter is set to <span class="mono">2</span>, the <span class="mono">if</span> statement’s condition will be <span class="mono">True</span> and the function will return, and then the rest of the calls will also return in turn.</p>
	<p>Though if your code never reaches the base case, then this will cause a stack overflow. If we changed the <span class="mono">fizz(5)</span> call to <span class="mono">fizz(0)</span>, then the program’s output would look like this:</p>

	<div class="python-shell">
		<p class="sample-code">  File &quot;C:\rectest.py&quot;, line 5, in fizz</p>
		<p class="sample-code">    fizz(param - 1)</p>
		<p class="sample-code">  File &quot;C:\rectest.py&quot;, line 5, in fizz</p>
		<p class="sample-code">    fizz(param - 1)</p>
		<p class="sample-code">  File &quot;C:\rectest.py&quot;, line 5, in fizz</p>
		<p class="sample-code">    fizz(param - 1)</p>
		<p class="sample-code">  File &quot;C:\rectest.py&quot;, line 2, in fizz</p>
		<p class="sample-code">    print(param)</p>
		<p class="sample-code">RuntimeError: maximum recursion depth exceeded</p>
	</div>

	<p>Recursive calls and base cases will be used to perform the flood fill algorithm, which is described next.</p>

	<h1 class="subheading" id="">The Flood Fill Algorithm</h1>
	<p class="noindent">The flood fill algorithm is used in Star Pusher to change all of the floor tiles inside the walls of the level to use the “inside floor” tile image instead of the “outside floor” tile (which all the tiles on the map are by default). The original <span class="mono">floodFill()</span> call is on line 295. It will convert any tiles represented with the <span class="mono">' '</span> string (which represents an outdoor floor) to a <span class="mono">'o'</span> string (which represents an indoor floor).</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">513.</span> def floodFill(mapObj, x, y, oldCharacter, newCharacter):</p>
		<p class="noindent mono"><span class="line-number">514.</span> &#160;&#160;&#160;&#160;<span class="comment">&quot;&quot;&quot;Changes any values matching oldCharacter on the map object to</span></p>
		<p class="noindent mono"><span class="line-number">515.</span> &#160;&#160;&#160;&#160;<span class="comment">newCharacter at the (x, y) position, and does the same for the</span></p>
		<p class="noindent mono"><span class="line-number">516.</span> &#160;&#160;&#160;&#160;<span class="comment">positions to the left, right, down, and up of (x, y), recursively.&quot;&quot;&quot;</span></p>
		<p class="noindent mono"><span class="line-number">517.</span></p>
		<p class="noindent mono"><span class="line-number">518.</span> &#160;&#160;&#160;&#160;<span class="comment"># In this game, the flood fill algorithm creates the inside/outside</span></p>
		<p class="noindent mono"><span class="line-number">519.</span> &#160;&#160;&#160;&#160;<span class="comment"># floor distinction. This is a &quot;recursive&quot; function.</span></p>
		<p class="noindent mono"><span class="line-number">520.</span> &#160;&#160;&#160;&#160;<span class="comment"># For more info on the Flood Fill algorithm, see:</span></p>
		<p class="noindent mono"><span class="line-number">521.</span> &#160;&#160;&#160;&#160;<span class="comment">#   http://en.wikipedia.org/wiki/Flood_fill</span></p>
		<p class="noindent mono"><span class="line-number">522.</span> &#160;&#160;&#160;&#160;if mapObj[x][y] == oldCharacter:</p>
		<p class="noindent mono"><span class="line-number">523.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapObj[x][y] = newCharacter</p>
	</div>

	<p>Line 522 and 523 converts the tile at the XY coordinate passed to <span class="mono">floodFill()</span> to the <span class="mono">newCharacter</span> string if it originally was the same as the <span class="mono">oldCharacter</span> string.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">525.</span> &#160;&#160;&#160;&#160;if x &lt; len(mapObj) - 1 and mapObj[x+1][y] == oldCharacter:</p>
		<p class="noindent mono"><span class="line-number">526.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;floodFill(mapObj, x+1, y, oldCharacter, newCharacter) <span class="comment"># call right</span></p>
		<p class="noindent mono"><span class="line-number">527.</span> &#160;&#160;&#160;&#160;if x &gt; 0 and mapObj[x-1][y] == oldCharacter:</p>
		<p class="noindent mono"><span class="line-number">528.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;floodFill(mapObj, x-1, y, oldCharacter, newCharacter) <span class="comment"># call left</span></p>
		<p class="noindent mono"><span class="line-number">529.</span> &#160;&#160;&#160;&#160;if y &lt; len(mapObj[x]) - 1 and mapObj[x][y+1] == oldCharacter:</p>
		<p class="noindent mono"><span class="line-number">530.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;floodFill(mapObj, x, y+1, oldCharacter, newCharacter) <span class="comment"># call down</span></p>
		<p class="noindent mono"><span class="line-number">531.</span> &#160;&#160;&#160;&#160;if y &gt; 0 and mapObj[x][y-1] == oldCharacter:</p>
		<p class="noindent mono"><span class="line-number">532.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;floodFill(mapObj, x, y-1, oldCharacter, newCharacter) <span class="comment"># call up</span></p>
	</div>

	<p>These four <span class="mono">if</span> statements check if the tile to the right, left, down, and up of the XY coordinate are the same as <span class="mono">oldCharacter</span>, and if so, a recursive call is made to <span class="mono">floodFill()</span> with those coordinates.</p>
	<p>To better understand how the <span class="mono">floodFill()</span> function works, here is a version that does not use recursive calls, but instead uses a list of XY coordinates to keep track of which spaces on the map should be checked and possibly changed to <span class="mono">newCharacter</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"> def floodFill(mapObj, x, y, oldCharacter, newCharacter):</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;spacesToCheck = []</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;if mapObj[x][y] == oldCharacter:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;spacesToCheck.append((x, y))</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;while spacesToCheck != []:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x, y = spacesToCheck.pop()</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapObj[x][y] = newCharacter</p>
		<p class="noindent mono">&#160;</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if x &lt; len(mapObj) - 1 and mapObj[x+1][y] == oldCharacter:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;spacesToCheck.append((x+1, y)) <span class="comment"># check right</span></p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if x &gt; 0 and mapObj[x-1][y] == oldCharacter:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;spacesToCheck.append((x-1, y)) <span class="comment"># check left</span></p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if y &lt; len(mapObj[x]) - 1 and mapObj[x][y+1] == oldCharacter:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;spacesToCheck.append((x, y+1)) <span class="comment"># check down</span></p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if y &gt; 0 and mapObj[x][y-1] == oldCharacter:</p>
		<p class="noindent mono"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;spacesToCheck.append((x, y-1)) <span class="comment"># check up</span></p>
	</div>

	<p>If you would like to read a more detailed tutorial on recursion that uses cats and zombies for an example, go to <a href="https://invpy.com/recursivezombies">https://invpy.com/recursivezombies</a>.</p>

	<h1 class="subheading" id="">Drawing the Map</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">535.</span> def drawMap(mapObj, gameStateObj, goals):</p>
		<p class="noindent mono"><span class="line-number">536.</span> &#160;&#160;&#160;&#160;<span class="comment">&quot;&quot;&quot;Draws the map to a Surface object, including the player and</span></p>
		<p class="noindent mono"><span class="line-number">537.</span> &#160;&#160;&#160;&#160;<span class="comment">stars. This function does not call pygame.display.update(), or</span></p>
		<p class="noindent mono"><span class="line-number">538.</span> &#160;&#160;&#160;&#160;<span class="comment">does it draw the &quot;Level&quot; and &quot;Steps&quot; text in the corner.&quot;&quot;&quot;</span></p>
		<p class="noindent mono"><span class="line-number">539.</span></p>
		<p class="noindent mono"><span class="line-number">540.</span> &#160;&#160;&#160;&#160;<span class="comment"># mapSurf will be the single Surface object that the tiles are drawn</span></p>
		<p class="noindent mono"><span class="line-number">541.</span> &#160;&#160;&#160;&#160;<span class="comment"># on, so that it is easy to position the entire map on the DISPLAYSURF</span></p>
		<p class="noindent mono"><span class="line-number">542.</span> &#160;&#160;&#160;&#160;<span class="comment"># Surface object. First, the width and height must be calculated.</span></p>
		<p class="noindent mono"><span class="line-number">543.</span> &#160;&#160;&#160;&#160;mapSurfWidth = len(mapObj) * TILEWIDTH</p>
		<p class="noindent mono"><span class="line-number">544.</span> &#160;&#160;&#160;&#160;mapSurfHeight = (len(mapObj[0]) - 1) * (TILEHEIGHT - TILEFLOORHEIGHT) + TILEHEIGHT</p>
		<p class="noindent mono"><span class="line-number">545.</span> &#160;&#160;&#160;&#160;mapSurf = pygame.Surface((mapSurfWidth, mapSurfHeight))</p>
		<p class="noindent mono"><span class="line-number">546.</span> &#160;&#160;&#160;&#160;mapSurf.fill(BGCOLOR) <span class="comment"># start with a blank color on the surface.</span></p>
	</div>

	<p>The <span class="mono">drawMap()</span> function will return a Surface object with the entire map (and the player and stars) drawn on it. The width and height needed for this Surface have to be calculated from <span class="mono">mapObj</span> (which is done on line 543 and 544). The Surface object that everything will be drawn on is created on line 545. To begin with, the entire Surface object is painted to the background color on line 546.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">548.</span> &#160;&#160;&#160;&#160;<span class="comment"># Draw the tile sprites onto this surface.</span></p>
		<p class="noindent mono"><span class="line-number">549.</span> &#160;&#160;&#160;&#160;for x in range(len(mapObj)):</p>
		<p class="noindent mono"><span class="line-number">550.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for y in range(len(mapObj[x])):</p>
		<p class="noindent mono"><span class="line-number">551.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;spaceRect = pygame.Rect((x * TILEWIDTH, y * (TILEHEIGHT - TILEFLOORHEIGHT), TILEWIDTH, TILEHEIGHT))</p>
	</div>

	<p>The set of nested <span class="mono">for</span> loops on line 549 and 550 will go through every possible XY coordinate on the map and draw the appropriate tile image at that location.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">552.</span>             if mapObj[x][y] in TILEMAPPING:</p>
		<p class="noindent mono"><span class="line-number">553.</span>                 baseTile = TILEMAPPING[mapObj[x][y]]</p>
		<p class="noindent mono"><span class="line-number">554.</span>             elif mapObj[x][y] in OUTSIDEDECOMAPPING:</p>
		<p class="noindent mono"><span class="line-number">555.</span>                 baseTile = TILEMAPPING[' ']</p>
		<p class="noindent mono"><span class="line-number">556.</span></p>
		<p class="noindent mono"><span class="line-number">557.</span>             <span class="comment"># First draw the base ground/wall tile.</span></p>
		<p class="noindent mono"><span class="line-number">558.</span>             mapSurf.blit(baseTile, spaceRect)</p>
		<p class="noindent mono"><span class="line-number">559.</span></p>
	</div>

	<p>The <span class="mono">baseTile</span> variable is set to the Surface object of the tile image to be drawn at the iteration’s current XY coordinate. If the single-character string is in the <span class="mono">OUTSIDEDECOMAPPING</span> dictionary, then <span class="mono">TILEMAPPING[' ']</span> (the single-character string for the basic outdoor floor tile) will be used.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">560.</span>             if mapObj[x][y] in OUTSIDEDECOMAPPING:</p>
		<p class="noindent mono"><span class="line-number">561.</span>                 <span class="comment"># Draw any tree/rock decorations that are on this tile.</span></p>
		<p class="noindent mono"><span class="line-number">562.</span>                 mapSurf.blit(OUTSIDEDECOMAPPING[mapObj[x][y]], spaceRect)</p>
	</div>

	<p>Additionally, if the tile was listed in the <span class="mono">OUTSIDEDECOMAPPING</span> dictionary, the corresponding tree or rock image should be drawn on top of the tile that was just drawn at that XY coordinate.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">563.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif (x, y) in gameStateObj['stars']:</p>
		<p class="noindent mono"><span class="line-number">564.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (x, y) in goals:</p>
		<p class="noindent mono"><span class="line-number">565.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># A goal AND star are on this space, draw goal first.</span></p>
		<p class="noindent mono"><span class="line-number">566.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapSurf.blit(IMAGESDICT['covered goal'], spaceRect)</p>
		<p class="noindent mono"><span class="line-number">567.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Then draw the star sprite.</span></p>
		<p class="noindent mono"><span class="line-number">568.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapSurf.blit(IMAGESDICT['star'], spaceRect)</p>
	</div>

	<p>If there is a star located at this XY coordinate on the map (which can be found out by checking for <span class="mono">(x, y)</span> in the list at <span class="mono">gameStateObj['stars']</span>), then a star should be drawn at this XY coordinate (which is done on line 568). Before the star is drawn, the code should first check if there is also a goal at this location, in which case, the “covered goal” tile should be drawn first.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">569.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif (x, y) in goals:</p>
		<p class="noindent mono"><span class="line-number">570.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Draw a goal without a star on it.</span></p>
		<p class="noindent mono"><span class="line-number">571.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapSurf.blit(IMAGESDICT['uncovered goal'], spaceRect)</p>
	</div>

	<p>If there is a goal at this XY coordinate on the map, then the “uncovered goal” should be drawn on top of the tile. The uncovered goal is drawn because if execution has reached the <span class="mono">elif</span> statement on line 569, we know that the <span class="mono">elif</span> statement’s condition on line 563 was <span class="mono">False</span> and there is no star that is also at this XY coordinate.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">573.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Last draw the player on the board.</span></p>
		<p class="noindent mono"><span class="line-number">574.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (x, y) == gameStateObj['player']:</p>
		<p class="noindent mono"><span class="line-number">575.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Note: The value &quot;currentImage&quot; refers</span></p>
		<p class="noindent mono"><span class="line-number">576.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># to a key in &quot;PLAYERIMAGES&quot; which has the</span></p>
		<p class="noindent mono"><span class="line-number">577.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># specific player image we want to show.</span></p>
		<p class="noindent mono"><span class="line-number">578.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mapSurf.blit(PLAYERIMAGES[currentImage], spaceRect)</p>
		<p class="noindent mono"><span class="line-number">579.</span></p>
		<p class="noindent mono"><span class="line-number">580.</span> &#160;&#160;&#160;&#160;return mapSurf</p>
	</div>

	<p>Finally, the <span class="mono">drawMap()</span> function checks if the player is located at this XY coordinate, and if so, the player’s image is drawn over the tile. Line 580 is outside of the nested <span class="mono">for</span> loops that began on line 549 and 550, so by the time the Surface object is returned, the entire map has been drawn on it.</p>

	<h1 class="subheading" id="">Checking if the Level is Finished</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">583.</span> def isLevelFinished(levelObj, gameStateObj):</p>
		<p class="noindent mono"><span class="line-number">584.</span> &#160;&#160;&#160;&#160;<span class="comment">&quot;&quot;&quot;Returns True if all the goals have stars in them.&quot;&quot;&quot;</span></p>
		<p class="noindent mono"><span class="line-number">585.</span> &#160;&#160;&#160;&#160;for goal in levelObj['goals']:</p>
		<p class="noindent mono"><span class="line-number">586.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if goal not in gameStateObj['stars']:</p>
		<p class="noindent mono"><span class="line-number">587.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># Found a space with a goal but no star on it.</span></p>
		<p class="noindent mono"><span class="line-number">588.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return False</p>
		<p class="noindent mono"><span class="line-number">589.</span> &#160;&#160;&#160;&#160;return True</p>
	</div>

	<p>The <span class="mono">isLevelFinished()</span> function returns <span class="mono">True</span> if all the goals are covered stars. Some levels could have more stars than goals, so it’s important to check that all the goals are covered by stars, rather than checking if all the stars are over goals.</p>
	<p>The <span class="mono">for</span> loop on line 585 goes through the goals in <span class="mono">levelObj['goals']</span> (which is a list of tuples of XY coordinates for each goal) and checks if there is a star in the <span class="mono">gameStateObj['stars']</span> list that has those same XY coordinates (the <span class="mono">not in</span> operators work here because <span class="mono">gameStateObj['stars']</span> is a list of those same tuples of XY coordinates). The first time the code finds a goal with no star at the same position, the function returns <span class="mono">False</span>.</p>
	<p>If it gets through all of the goals and finds a star on each of them, <span class="mono">isLevelFinished()</span> returns <span class="mono">True</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">592.</span> def terminate():</p>
		<p class="noindent mono"><span class="line-number">593.</span> &#160;&#160;&#160;&#160;pygame.quit()</p>
		<p class="noindent mono"><span class="line-number">594.</span> &#160;&#160;&#160;&#160;sys.exit()</p>
	</div>

	<p>This <span class="mono">terminate()</span> function is the same as in all the previous programs.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">597.</span> if __name__ == '__main__':</p>
		<p class="noindent mono"><span class="line-number">598.</span> &#160;&#160;&#160;&#160;main()</p>
	</div>

	<p>After all the functions have been defined, the <span class="mono">main()</span> function is called on line 602 to begin the game.</p>

	<h1 class="subheading" id="">Summary</h1>
	<p class="noindent">In the Squirrel Eat Squirrel game, the game world was pretty simple: just an infinite green plain with grass images randomly scattered around it. The Star Pusher game introduced something new: having uniquely designed levels with tile graphics. In order to store these levels in a format that the computer can read, they are typed out into a text file and code in the program reads those files and creates the data structures for the level.</p>
	<p>Really, rather than just make a simple game with a single map, the Star Pusher program is more of a system for loading custom maps based the level file. Just by modifying the level file, we can change where walls, stars, and goals appear in the game world. The Star Pusher program can handle any configuration that the level file is set to (as long as it passes the <span class="mono">assert</span> statements that ensure the map makes sense).</p>
	<p>You won’t even have to know how to program Python to make your own levels. A text editor program that modifies the <i>starPusherLevels.txt</i> file is all that anyone needs to have their own level editor for the Star Pusher game.</p>
	<p>For additional programming practice, you can download buggy versions of Star Pusher from <a href="https://invpy.com/buggy/starpusher">https://invpy.com/buggy/starpusher</a> and try to figure out how to fix the bugs.</p>

</body>
</html>
