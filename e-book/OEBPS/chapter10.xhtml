<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Chapter 10</title>
</head>

<body>

	<h1 class="heading">Chapter 10 – Four Extra Games</h1>
	<hr class="heading"/>

	<p class="noindent">Included in this chapter is the source code for four extra games. Unfortunately, only the source code (including comments) is in this chapter without any detailed explanation of the code. By now, you can play these games and figure out how the code works by looking at the source code and comments.</p>
	<p>The games are:</p>

	<ul>
		<li><b>Flippy</b> – An <i>“Othello”</i> clone where the player tries to flip the computer AI player’s tiles.</li>
		<li><b>Ink Spill</b> – A <i>“Flood It”</i> clone that makes use of the flood fill algorithm.</li>
		<li><b>Four in a Row</b> – A <i>“Connect Four”</i> clone against the computer AI player.</li>
		<li><b>Gemgem</b> – A <i>“Bejeweled”</i> clone where the player swaps gems to try to get three identical gems in a row.</li>
	</ul>

	<p>If you have any questions about the source code in this book, feel free to email the author at <a href="mailto:al@inventwithpython.com">al@inventwithpython.com</a></p>
	<p>Buggy versions of these programs are also available if you want to practice fixing bugs: <a href="https://inventwithpython.com/pygame/buggy/">https://inventwithpython.com/pygame/buggy/</a></p>

	<h1 class="subheading" id="flippy">Flippy, an “Othello” Clone</h1>
	<p class="noindent"><i>“Othello”</i>, also known by the generic name Reversi, has an 8 × 8 board with tiles that are black on one side and white on the other. The starting board looks like Figure 10-1. Each player takes turn placing down a new tile of their color. Any of the opponent's tiles that are between the new tile and the other tiles of that color is flipped. The goal of the game is to have as many of the tiles with your color as possible. For example, Figure 10-2 is what it looks like if the white player places a new white tile on space 5, 6.</p>

	<div class="image-center">
		<img class="half-image" src="images/chapter10/fig10-1.jpg" alt=""/>
		<p class="figure-caption">Figure 10-1: The starting Reversi board has two white tiles and two black tiles.</p>
	</div>

	<div class="image-center">
		<img class="half-image" src="images/chapter10/fig10-2.jpg" alt=""/>
		<p class="figure-caption">Figure 10-2: White places a new tile.</p>
	</div>

	<p>The black tile at 5, 5 is in between the new white tile and the existing white tile at 5, 4. That black tile is flipped over and becomes a new white tile, making the board look like Figure 10-3. Black makes a similar move next, placing a black tile on 4, 6 which flips the white tile at 4, 5. This results in a board that looks like Figure 10-4.</p>

	<div class="image-center">
		<img class="half-image" src="images/chapter10/fig10-3.jpg" alt=""/>
		<p class="figure-caption">Figure 10-3: White's move will flip over one of black's tiles.</p>
	</div>

	<div class="image-center">
		<img class="half-image" src="images/chapter10/fig10-4.jpg" alt=""/>
		<p class="figure-caption">Figure 10-4: Black places a new tile, which flips over one of white's tiles.</p>
	</div>

	<p>Tiles in all directions are flipped as long as they are in between the player's new tile and existing tile. In Figure 10-5, the white player places a tile at 3, 6 and flips black tiles in both directions (marked by the lines). The result is in Figure 10-6.</p>

	<div class="image-center">
		<img class="half-image" src="images/chapter10/fig10-5.jpg" alt=""/>
		<p class="figure-caption">Figure 10-5: White's second move at 3, 6 will flip two of black's tiles.</p>
	</div>

	<div class="image-center">
		<img class="half-image" src="images/chapter10/fig10-6.jpg" alt=""/>
		<p class="figure-caption">Figure 10-6: The board after white's second move.</p>
	</div>

	<p>As you can see, each player can quickly grab a majority of the tiles on the board in just one or two moves. Players must always make a move that captures at least one tile. The game ends when a player either cannot make a move, or the board is completely full. The player with the most tiles of their color wins.</p>
	<p>You can learn more about Reversi from Wikipedia: <a href="https://en.wikipedia.org/wiki/Reversi">https://en.wikipedia.org/wiki/Reversi</a></p>
	<p>A text version of this game that uses <span class="mono">print()</span> and <span class="mono">input()</span> instead of Pygame is featured in Chapter 15 of <i>“Invent Your Own Computer Games with Python”</i>. You can read that chapter for details about how the computer AI’s algorithm was put together. <a href="https://inventwithpython.com/chapter15.html">https://inventwithpython.com/chapter15.html</a></p>
	<p>The computer AI for this game is pretty good, because it is easy for a computer to simulate every possible move and take the one that flips over the most tiles. It usually beats me whenever I play it.</p>

	<h1 class="subheading" id="flippy-source">Source Code for Flippy</h1>
	<p class="noindent">This source code can be downloaded from <a href="https://invpy.com/flippy.py">https://invpy.com/flippy.py</a>.</p>
	<p>The image files that Flippy uses can be downloaded from <a href="https://invpy.com/flippyimages.zip">https://invpy.com/flippyimages.zip</a>.</p>

	<div class="python-shell">
			<p class="noindent mono"><span class="line-number">1.</span> <span class="comment"># Flippy (an Othello or Reversi clone)</span></p>
			<p class="noindent mono"><span class="line-number">2.</span> <span class="comment"># By Al Sweigart al@inventwithpython.com</span></p>
			<p class="noindent mono"><span class="line-number">3.</span> <span class="comment"># http://inventwithpython.com/pygame</span></p>
			<p class="noindent mono"><span class="line-number">4.</span> <span class="comment"># Released under a &quot;Simplified BSD&quot; license</span></p>
			<p class="noindent mono"><span class="line-number">5.</span></p>
			<p class="noindent mono"><span class="line-number">6.</span> <span class="comment"># Based on the &quot;reversi.py&quot; code that originally appeared in &quot;Invent</span></p>
			<p class="noindent mono"><span class="line-number">7.</span> <span class="comment"># Your Own Computer Games with Python&quot;, chapter 15:</span></p>
			<p class="noindent mono"><span class="line-number">8.</span> <span class="comment"># &#160;&#160;http://inventwithpython.com/chapter15.html</span></p>
			<p class="noindent mono"><span class="line-number">9.</span></p>
			<p class="noindent mono"><span class="line-number">10.</span> import random, sys, pygame, time, copy</p>
			<p class="noindent mono"><span class="line-number">11.</span> from pygame.locals import *</p>
			<p class="noindent mono"><span class="line-number">12.</span></p>
			<p class="noindent mono"><span class="line-number">13.</span> FPS = 10 <span class="comment"># frames per second to update the screen</span></p>
			<p class="noindent mono"><span class="line-number">14.</span> WINDOWWIDTH = 640 <span class="comment"># width of the program's window, in pixels</span></p>
			<p class="noindent mono"><span class="line-number">15.</span> WINDOWHEIGHT = 480 <span class="comment"># height in pixels</span></p>
			<p class="noindent mono"><span class="line-number">16.</span> SPACESIZE = 50 <span class="comment"># width &amp; height of each space on the board, in pixels</span></p>
			<p class="noindent mono"><span class="line-number">17.</span> BOARDWIDTH = 8 <span class="comment"># how many columns of spaces on the game board</span></p>
			<p class="noindent mono"><span class="line-number">18.</span> BOARDHEIGHT = 8 <span class="comment"># how many rows of spaces on the game board</span></p>
			<p class="noindent mono"><span class="line-number">19.</span> WHITE_TILE = 'WHITE_TILE' <span class="comment"># an arbitrary but unique value</span></p>
			<p class="noindent mono"><span class="line-number">20.</span> BLACK_TILE = 'BLACK_TILE' <span class="comment"># an arbitrary but unique value</span></p>
			<p class="noindent mono"><span class="line-number">21.</span> EMPTY_SPACE = 'EMPTY_SPACE' <span class="comment"># an arbitrary but unique value</span></p>
			<p class="noindent mono"><span class="line-number">22.</span> HINT_TILE = 'HINT_TILE' <span class="comment"># an arbitrary but unique value</span></p>
			<p class="noindent mono"><span class="line-number">23.</span> ANIMATIONSPEED = 25 <span class="comment"># integer from 1 to 100, higher is faster animation</span></p>
			<p class="noindent mono"><span class="line-number">24.</span></p>
			<p class="noindent mono"><span class="line-number">25.</span> <span class="comment"># Amount of space on the left &amp; right side (XMARGIN) or above and below</span></p>
			<p class="noindent mono"><span class="line-number">26.</span> <span class="comment"># (YMARGIN) the game board, in pixels.</span></p>
			<p class="noindent mono"><span class="line-number">27.</span> XMARGIN = int((WINDOWWIDTH - (BOARDWIDTH * SPACESIZE)) / 2)</p>
			<p class="noindent mono"><span class="line-number">28.</span> YMARGIN = int((WINDOWHEIGHT - (BOARDHEIGHT * SPACESIZE)) / 2)</p>
			<p class="noindent mono"><span class="line-number">29.</span></p>
			<p class="noindent mono"><span class="line-number">30.</span> <span class="comment">#&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R&#160;&#160;&#160;&#160;G&#160;&#160;&#160;&#160;B</span></p>
			<p class="noindent mono"><span class="line-number">31.</span> WHITE &#160;&#160;&#160;&#160;&#160;= (255, 255, 255)</p>
			<p class="noindent mono"><span class="line-number">32.</span> BLACK &#160;&#160;&#160;&#160;&#160;= (&#160;&#160;0, &#160;&#160;0, &#160;&#160;0)</p>
			<p class="noindent mono"><span class="line-number">33.</span> GREEN &#160;&#160;&#160;&#160;&#160;= (&#160;&#160;0, 155,&#160;&#160;0)</p>
			<p class="noindent mono"><span class="line-number">34.</span> BRIGHTBLUE = (&#160;&#160;0, &#160;50, 255)</p>
			<p class="noindent mono"><span class="line-number">35.</span> BROWN &#160;&#160;&#160;&#160;&#160;= (174, &#160;94, &#160;&#160;0)</p>
			<p class="noindent mono"><span class="line-number">36.</span></p>
			<p class="noindent mono"><span class="line-number">37.</span> TEXTBGCOLOR1 = BRIGHTBLUE</p>
			<p class="noindent mono"><span class="line-number">38.</span> TEXTBGCOLOR2 = GREEN</p>
			<p class="noindent mono"><span class="line-number">39.</span> GRIDLINECOLOR = BLACK</p>
			<p class="noindent mono"><span class="line-number">40.</span> TEXTCOLOR = WHITE</p>
			<p class="noindent mono"><span class="line-number">41.</span> HINTCOLOR = BROWN</p>
			<p class="noindent mono"><span class="line-number">42.</span></p>
			<p class="noindent mono"><span class="line-number">43.</span></p>
			<p class="noindent mono"><span class="line-number">44.</span> def main():</p>
			<p class="noindent mono"><span class="line-number">45.</span> global MAINCLOCK, DISPLAYSURF, FONT, BIGFONT, BGIMAGE</p>
			<p class="noindent mono"><span class="line-number">46.</span></p>
			<p class="noindent mono"><span class="line-number">47.</span> pygame.init()</p>
			<p class="noindent mono"><span class="line-number">48.</span> MAINCLOCK = pygame.time.Clock()</p>
			<p class="noindent mono"><span class="line-number">49.</span> DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))</p>
			<p class="noindent mono"><span class="line-number">50.</span> pygame.display.set_caption('Flippy')</p>
			<p class="noindent mono"><span class="line-number">51.</span> FONT = pygame.font.Font('freesansbold.ttf', 16)</p>
			<p class="noindent mono"><span class="line-number">52.</span> BIGFONT = pygame.font.Font('freesansbold.ttf', 32)</p>
			<p class="noindent mono"><span class="line-number">53.</span></p>
			<p class="noindent mono"><span class="line-number">54.</span> <span class="comment"># Set up the background image.</span></p>
			<p class="noindent mono"><span class="line-number">55.</span> boardImage = pygame.image.load('flippyboard.png')</p>
			<p class="noindent mono"><span class="line-number">56.</span> <span class="comment"># Use smoothscale() to stretch the board image to fit the entire board:</span></p>
			<p class="noindent mono"><span class="line-number">57.</span> boardImage = pygame.transform.smoothscale(boardImage, (BOARDWIDTH * SPACESIZE, BOARDHEIGHT * SPACESIZE))</p>
			<p class="noindent mono"><span class="line-number">58.</span> boardImageRect = boardImage.get_rect()</p>
			<p class="noindent mono"><span class="line-number">59.</span> boardImageRect.topleft = (XMARGIN, YMARGIN)</p>
			<p class="noindent mono"><span class="line-number">60.</span> BGIMAGE = pygame.image.load('flippybackground.png')</p>
			<p class="noindent mono"><span class="line-number">61.</span> <span class="comment"># Use smoothscale() to stretch the background image to fit the entire window:</span></p>
			<p class="noindent mono"><span class="line-number">62.</span> BGIMAGE = pygame.transform.smoothscale(BGIMAGE, (WINDOWWIDTH, WINDOWHEIGHT))</p>
			<p class="noindent mono"><span class="line-number">63.</span> BGIMAGE.blit(boardImage, boardImageRect)</p>
			<p class="noindent mono"><span class="line-number">64.</span></p>
			<p class="noindent mono"><span class="line-number">65.</span> <span class="comment"># Run the main game.</span></p>
			<p class="noindent mono"><span class="line-number">66.</span> while True:</p>
			<p class="noindent mono"><span class="line-number">67.</span> if runGame() == False:</p>
			<p class="noindent mono"><span class="line-number">68.</span> break</p>
			<p class="noindent mono"><span class="line-number">69.</span></p>
			<p class="noindent mono"><span class="line-number">70.</span></p>
			<p class="noindent mono"><span class="line-number">71.</span> def runGame():</p>
			<p class="noindent mono"><span class="line-number">72.</span> <span class="comment"># Plays a single game of reversi each time this function is called.</span></p>
			<p class="noindent mono"><span class="line-number">73.</span></p>
			<p class="noindent mono"><span class="line-number">74.</span> <span class="comment"># Reset the board and game.</span></p>
			<p class="noindent mono"><span class="line-number">75.</span> mainBoard = getNewBoard()</p>
			<p class="noindent mono"><span class="line-number">76.</span> resetBoard(mainBoard)</p>
			<p class="noindent mono"><span class="line-number">77.</span> showHints = False</p>
			<p class="noindent mono"><span class="line-number">78.</span> turn = random.choice(['computer', 'player'])</p>
			<p class="noindent mono"><span class="line-number">79.</span></p>
			<p class="noindent mono"><span class="line-number">80.</span> <span class="comment"># Draw the starting board and ask the player what color they want.</span></p>
			<p class="noindent mono"><span class="line-number">81.</span> drawBoard(mainBoard)</p>
			<p class="noindent mono"><span class="line-number">82.</span> playerTile, computerTile = enterPlayerTile()</p>
			<p class="noindent mono"><span class="line-number">83.</span></p>
			<p class="noindent mono"><span class="line-number">84.</span> <span class="comment"># Make the Surface and Rect objects for the &quot;New Game&quot; and &quot;Hints&quot; buttons</span></p>

			<p class="noindent mono"><span class="line-number">85.</span>
	newGameSurf = FONT.render('New Game', True, TEXTCOLOR, TEXTBGCOLOR2)</p>

			<p class="noindent mono"><span class="line-number">86.</span>
	newGameRect = newGameSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">87.</span>
	newGameRect.topright = (WINDOWWIDTH - 8, 10)</p>

			<p class="noindent mono"><span class="line-number">88.</span>
	hintsSurf = FONT.render('Hints', True, TEXTCOLOR, TEXTBGCOLOR2)</p>

			<p class="noindent mono"><span class="line-number">89.</span>
	hintsRect = hintsSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">90.</span>
	hintsRect.topright = (WINDOWWIDTH - 8, 40)</p>

			<p class="noindent mono"><span class="line-number">91.</span></p>

			<p class="noindent mono"><span class="line-number">92.</span>
	while True: <span class="comment"># main game loop</span></p>

			<p class="noindent mono"><span class="line-number">93.</span>
	<span class="comment"># Keep looping for player and computer's turns.</span></p>

			<p class="noindent mono"><span class="line-number">94.</span>
	if turn == 'player':</p>

			<p class="noindent mono"><span class="line-number">95.</span>
	<span class="comment"># Player's turn:</span></p>

			<p class="noindent mono"><span class="line-number">96.</span>
	if getValidMoves(mainBoard, playerTile) == []:</p>

			<p class="noindent mono"><span class="line-number">97.</span>
	<span class="comment"># If it's the player's turn but they</span></p>

			<p class="noindent mono"><span class="line-number">98.</span>
	<span class="comment"># can't move, then end the game.</span></p>

			<p class="noindent mono"><span class="line-number">99.</span>
	break</p>

			<p class="noindent mono"><span class="line-number">100.</span>
	movexy = None</p>

			<p class="noindent mono"><span class="line-number">101.</span>
	while movexy == None:</p>

			<p class="noindent mono"><span class="line-number">102.</span>
	<span class="comment"># Keep looping until the player clicks on a valid
	space.</span></p>

			<p class="noindent mono"><span class="line-number">103.</span></p>

			<p class="noindent mono"><span class="line-number">104.</span>
	<span class="comment"># Determine which board data structure to use for
	display.</span></p>

			<p class="noindent mono"><span class="line-number">105.</span>
	if showHints:</p>

			<p class="noindent mono"><span class="line-number">106.</span>
	boardToDraw = getBoardWithValidMoves(mainBoard, playerTile)</p>

			<p class="noindent mono"><span class="line-number">107.</span>
	else:</p>

			<p class="noindent mono"><span class="line-number">108.</span>
	boardToDraw = mainBoard</p>

			<p class="noindent mono"><span class="line-number">109.</span></p>

			<p class="noindent mono"><span class="line-number">110.</span>
	   checkForQuit()</p>

			<p class="noindent mono"><span class="line-number">111.</span>
	for event in pygame.event.get(): <span class="comment"># event handling
	loop</span></p>

			<p class="noindent mono"><span class="line-number">112.</span>
	if event.type == MOUSEBUTTONUP:</p>

			<p class="noindent mono"><span class="line-number">113.</span>
	<span class="comment"># Handle mouse click events</span></p>

			<p class="noindent mono"><span class="line-number">114.</span>
	mousex, mousey = event.pos</p>

			<p class="noindent mono"><span class="line-number">115.</span>
	if newGameRect.collidepoint( (mousex, mousey) ):</p>

			<p class="noindent mono"><span class="line-number">116.</span>
	<span class="comment"># Start a new game</span></p>

			<p class="noindent mono"><span class="line-number">117.</span>
	return True</p>

			<p class="noindent mono"><span class="line-number">118.</span>
	elif hintsRect.collidepoint( (mousex, mousey) ):</p>

			<p class="noindent mono"><span class="line-number">119.</span>
	<span class="comment"># Toggle hints mode</span></p>

			<p class="noindent mono"><span class="line-number">120.</span>
	showHints = not showHints</p>

			<p class="noindent mono"><span class="line-number">121.</span>
	<span class="comment"># movexy is set to a two-item tuple XY
	coordinate, or None value</span></p>

			<p class="noindent mono"><span class="line-number">122.</span>
	movexy = getSpaceClicked(mousex, mousey)</p>

			<p class="noindent mono"><span class="line-number">123.</span>
	if movexy != None and not isValidMove(mainBoard, playerTile, movexy[0],
	movexy[1]):</p>

			<p class="noindent mono"><span class="line-number">124.</span>
	movexy = None</p>

			<p class="noindent mono"><span class="line-number">125.</span></p>

			<p class="noindent mono"><span class="line-number">126.</span>
	<span class="comment"># Draw the game board.</span></p>

			<p class="noindent mono"><span class="line-number">127.</span>
	drawBoard(boardToDraw)</p>

			<p class="noindent mono"><span class="line-number">128.</span>
	drawInfo(boardToDraw, playerTile, computerTile, turn)</p>

			<p class="noindent mono"><span class="line-number">129.</span></p>

			<p class="noindent mono"><span class="line-number">130.</span>
	<span class="comment"># Draw the &quot;New Game&quot; and
	&quot;Hints&quot; buttons.</span></p>

			<p class="noindent mono"><span class="line-number">131.</span>
	DISPLAYSURF.blit(newGameSurf, newGameRect)</p>

			<p class="noindent mono"><span class="line-number">132.</span>
	DISPLAYSURF.blit(hintsSurf, hintsRect)</p>

			<p class="noindent mono"><span class="line-number">133.</span></p>
			<p class="noindent mono"><span class="line-number">134.</span> MAINCLOCK.tick(FPS)</p>
			<p class="noindent mono"><span class="line-number">135.</span> pygame.display.update()</p>
			<p class="noindent mono"><span class="line-number">136.</span></p>
			<p class="noindent mono"><span class="line-number">137.</span> <span class="comment"># Make the move and end the turn.</span></p>
			<p class="noindent mono"><span class="line-number">138.</span> makeMove(mainBoard, playerTile, movexy[0], movexy[1], True)</p>
			<p class="noindent mono"><span class="line-number">139.</span> if getValidMoves(mainBoard, computerTile) != []:</p>

			<p class="noindent mono"><span class="line-number">140.</span>
	<span class="comment"># Only set for the computer's turn if it can make
	a move.</span></p>

			<p class="noindent mono"><span class="line-number">141.</span>
	turn = 'computer'</p>

			<p class="noindent mono"><span class="line-number">142.</span></p>

			<p class="noindent mono"><span class="line-number">143.</span>
	else:</p>

			<p class="noindent mono"><span class="line-number">144.</span>
	<span class="comment"># Computer's turn:</span></p>

			<p class="noindent mono"><span class="line-number">145.</span>             if
	getValidMoves(mainBoard, computerTile) == []:</p>

			<p class="noindent mono"><span class="line-number">146.</span>
	<span class="comment"># If it was set to be the computer's turn but</span></p>

			<p class="noindent mono"><span class="line-number">147.</span>
	<span class="comment"># they can't move, then end the game.</span></p>

			<p class="noindent mono"><span class="line-number">148.</span>
	break</p>

			<p class="noindent mono"><span class="line-number">149.</span></p>

			<p class="noindent mono"><span class="line-number">150.</span>
	<span class="comment"># Draw the board.</span></p>

			<p class="noindent mono"><span class="line-number">151.</span>
	drawBoard(mainBoard)</p>

			<p class="noindent mono"><span class="line-number">152.</span>
	drawInfo(mainBoard, playerTile, computerTile, turn)</p>

			<p class="noindent mono"><span class="line-number">153.</span></p>

			<p class="noindent mono"><span class="line-number">154.</span>
	<span class="comment"># Draw the &quot;New Game&quot; and
	&quot;Hints&quot; buttons.</span></p>

			<p class="noindent mono"><span class="line-number">155.</span>
	DISPLAYSURF.blit(newGameSurf, newGameRect)</p>

			<p class="noindent mono"><span class="line-number">156.</span>
	DISPLAYSURF.blit(hintsSurf, hintsRect)</p>

			<p class="noindent mono"><span class="line-number">157.</span></p>

			<p class="noindent mono"><span class="line-number">158.</span>
	<span class="comment"># Make it look like the computer is thinking by
	pausing a bit.</span></p>

			<p class="noindent mono"><span class="line-number">159.</span>
	pauseUntil = time.time() + random.randint(5, 15) * 0.1</p>

			<p class="noindent mono"><span class="line-number">160.</span>
	while time.time() &lt; pauseUntil:</p>

			<p class="noindent mono"><span class="line-number">161.</span>
	    pygame.display.update()</p>

			<p class="noindent mono"><span class="line-number">162.</span></p>

			<p class="noindent mono"><span class="line-number">163.</span>
	<span class="comment"># Make the move and end the turn.</span></p>

			<p class="noindent mono"><span class="line-number">164.</span>
	x, y = getComputerMove(mainBoard, computerTile)</p>

			<p class="noindent mono"><span class="line-number">165.</span>
	makeMove(mainBoard, computerTile, x, y, True)</p>

			<p class="noindent mono"><span class="line-number">166.</span>
	if getValidMoves(mainBoard, playerTile) != []:</p>

			<p class="noindent mono"><span class="line-number">167.</span>
	<span class="comment"># Only set for the player's turn if they can make
	a move.</span></p>

			<p class="noindent mono"><span class="line-number">168.</span>
	turn = 'player'</p>

			<p class="noindent mono"><span class="line-number">169.</span></p>

			<p class="noindent mono"><span class="line-number">170.</span>
	<span class="comment"># Display the final score.</span></p>

			<p class="noindent mono"><span class="line-number">171.</span>
	drawBoard(mainBoard)</p>

			<p class="noindent mono"><span class="line-number">172.</span>
	scores = getScoreOfBoard(mainBoard)</p>

			<p class="noindent mono"><span class="line-number">173.</span></p>

			<p class="noindent mono"><span class="line-number">174.</span>
	<span class="comment"># Determine the text of the message to display.</span></p>

			<p class="noindent mono"><span class="line-number">175.</span>
	if scores[playerTile] &gt; scores[computerTile]:</p>

			<p class="noindent mono"><span class="line-number">176.</span>
	text = 'You beat the computer by %s points! Congratulations!' % \</p>

			<p class="noindent mono"><span class="line-number">177.</span>
	(scores[playerTile] - scores[computerTile])</p>

			<p class="noindent mono"><span class="line-number">178.</span>
	elif scores[playerTile] &lt; scores[computerTile]:</p>

			<p class="noindent mono"><span class="line-number">179.</span>
	text = 'You lost. The computer beat you by %s points.' % \</p>

			<p class="noindent mono"><span class="line-number">180.</span>
	(scores[computerTile] - scores[playerTile])</p>

			<p class="noindent mono"><span class="line-number">181.</span>
	else:</p>

			<p class="noindent mono"><span class="line-number">182.</span>
	text = 'The game was a tie!'</p>

			<p class="noindent mono"><span class="line-number">183.</span></p>

			<p class="noindent mono"><span class="line-number">184.</span>
	textSurf = FONT.render(text, True, TEXTCOLOR, TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">185.</span>
	textRect = textSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">186.</span>
	textRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))</p>

			<p class="noindent mono"><span class="line-number">187.</span>
	DISPLAYSURF.blit(textSurf, textRect)</p>

			<p class="noindent mono"><span class="line-number">188.</span></p>

			<p class="noindent mono"><span class="line-number">189.</span>
	<span class="comment"># Display the &quot;Play again?&quot; text with
	Yes and No buttons.</span></p>

			<p class="noindent mono"><span class="line-number">190.</span>
	text2Surf = BIGFONT.render('Play again?', True, TEXTCOLOR, TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">191.</span>
	text2Rect = text2Surf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">192.</span>
	text2Rect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2) + 50)</p>

			<p class="noindent mono"><span class="line-number">193.</span></p>

			<p class="noindent mono"><span class="line-number">194.</span>
	<span class="comment"># Make &quot;Yes&quot; button.</span></p>

			<p class="noindent mono"><span class="line-number">195.</span>
	yesSurf = BIGFONT.render('Yes', True, TEXTCOLOR, TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">196.</span>
	yesRect = yesSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">197.</span>
	yesRect.center = (int(WINDOWWIDTH / 2) - 60, int(WINDOWHEIGHT / 2) + 90)</p>

			<p class="noindent mono"><span class="line-number">198.</span></p>

			<p class="noindent mono"><span class="line-number">199.</span>
	<span class="comment"># Make &quot;No&quot; button.</span></p>

			<p class="noindent mono"><span class="line-number">200.</span>
	noSurf = BIGFONT.render('No', True, TEXTCOLOR, TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">201.</span>
	noRect = noSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">202.</span>
	noRect.center = (int(WINDOWWIDTH / 2) + 60, int(WINDOWHEIGHT / 2) + 90)</p>

			<p class="noindent mono"><span class="line-number">203.</span></p>

			<p class="noindent mono"><span class="line-number">204.</span>
	while True:</p>

			<p class="noindent mono"><span class="line-number">205.</span>
	<span class="comment"># Process events until the user clicks on Yes or
	No.</span></p>

			<p class="noindent mono"><span class="line-number">206.</span>
	checkForQuit()</p>

			<p class="noindent mono"><span class="line-number">207.</span>
	for event in pygame.event.get(): <span class="comment"># event handling
	loop</span></p>

			<p class="noindent mono"><span class="line-number">208.</span>
	if event.type == MOUSEBUTTONUP:</p>

			<p class="noindent mono"><span class="line-number">209.</span>
	mousex, mousey = event.pos</p>

			<p class="noindent mono"><span class="line-number">210.</span>
	if yesRect.collidepoint( (mousex, mousey) ):</p>

			<p class="noindent mono"><span class="line-number">211.</span>
	return True</p>

			<p class="noindent mono"><span class="line-number">212.</span>
	elif noRect.collidepoint( (mousex, mousey) ):</p>

			<p class="noindent mono"><span class="line-number">213.</span>
	return False</p>

			<p class="noindent mono"><span class="line-number">214.</span>
	DISPLAYSURF.blit(textSurf, textRect)</p>

			<p class="noindent mono"><span class="line-number">215.</span>
	DISPLAYSURF.blit(text2Surf, text2Rect)</p>

			<p class="noindent mono"><span class="line-number">216.</span>
	DISPLAYSURF.blit(yesSurf, yesRect)</p>

			<p class="noindent mono"><span class="line-number">217.</span>
	DISPLAYSURF.blit(noSurf, noRect)</p>

			<p class="noindent mono"><span class="line-number">218.</span>
	pygame.display.update()</p>

			<p class="noindent mono"><span class="line-number">219.</span>
	MAINCLOCK.tick(FPS)</p>

			<p class="noindent mono"><span class="line-number">220.</span></p>

			<p class="noindent mono"><span class="line-number">221.</span></p>

			<p class="noindent mono"><span class="line-number">222.</span>
	def translateBoardToPixelCoord(x, y):</p>

			<p class="noindent mono"><span class="line-number">223.</span>
	return XMARGIN + x * SPACESIZE + int(SPACESIZE / 2), YMARGIN + y * SPACESIZE +
	int(SPACESIZE / 2)</p>

			<p class="noindent mono"><span class="line-number">224.</span></p>

			<p class="noindent mono"><span class="line-number">225.</span></p>

			<p class="noindent mono"><span class="line-number">226.</span>
	def animateTileChange(tilesToFlip, tileColor, additionalTile):</p>

			<p class="noindent mono"><span class="line-number">227.</span>
	<span class="comment"># Draw the additional tile that was just laid
	down. (Otherwise we'd</span></p>

			<p class="noindent mono"><span class="line-number">228.</span>
	<span class="comment"># have to completely redraw the board &amp; the
	board info.)</span></p>

			<p class="noindent mono"><span class="line-number">229.</span>
	if tileColor == WHITE_TILE:</p>

			<p class="noindent mono"><span class="line-number">230.</span>
	additionalTileColor = WHITE</p>

			<p class="noindent mono"><span class="line-number">231.</span>
	else:</p>

			<p class="noindent mono"><span class="line-number">232.</span>
	additionalTileColor = BLACK</p>

			<p class="noindent mono"><span class="line-number">233.</span>
	additionalTileX, additionalTileY = translateBoardToPixelCoord(additionalTile[0],
	additionalTile[1])</p>

			<p class="noindent mono"><span class="line-number">234.</span>
	pygame.draw.circle(DISPLAYSURF, additionalTileColor, (additionalTileX, additionalTileY),
	int(SPACESIZE / 2) - 4)</p>

			<p class="noindent mono"><span class="line-number">235.</span>
	pygame.display.update()</p>

			<p class="noindent mono"><span class="line-number">236.</span></p>

			<p class="noindent mono"><span class="line-number">237.</span>
	for rgbValues in range(0, 255, int(ANIMATIONSPEED * 2.55)):</p>

			<p class="noindent mono"><span class="line-number">238.</span>
	if rgbValues &gt; 255:</p>

			<p class="noindent mono"><span class="line-number">239.</span>
	rgbValues = 255</p>

			<p class="noindent mono"><span class="line-number">240.</span>
	elif rgbValues &lt; 0:</p>

			<p class="noindent mono"><span class="line-number">241.</span>
	rgbValues = 0</p>

			<p class="noindent mono"><span class="line-number">242.</span></p>

			<p class="noindent mono"><span class="line-number">243.</span>
	if tileColor == WHITE_TILE:</p>

			<p class="noindent mono"><span class="line-number">244.</span>
	color = tuple([rgbValues] * 3) <span class="comment"># rgbValues goes
	from 0 to 255</span></p>

			<p class="noindent mono"><span class="line-number">245.</span>
	elif tileColor == BLACK_TILE:</p>

			<p class="noindent mono"><span class="line-number">246.</span>
	color = tuple([255 - rgbValues] * 3) <span class="comment"># rgbValues
	goes from 255 to 0</span></p>

			<p class="noindent mono"><span class="line-number">247.</span></p>

			<p class="noindent mono"><span class="line-number">248.</span>
	for x, y in tilesToFlip:</p>

			<p class="noindent mono"><span class="line-number">249.</span>
	centerx, centery = translateBoardToPixelCoord(x, y)</p>

			<p class="noindent mono"><span class="line-number">250.</span>
	pygame.draw.circle(DISPLAYSURF, color, (centerx, centery), int(SPACESIZE / 2) -
	4)</p>

			<p class="noindent mono"><span class="line-number">251.</span>
	pygame.display.update()</p>

			<p class="noindent mono"><span class="line-number">252.</span>
	MAINCLOCK.tick(FPS)</p>

			<p class="noindent mono"><span class="line-number">253.</span>
	checkForQuit()</p>

			<p class="noindent mono"><span class="line-number">254.</span></p>

			<p class="noindent mono"><span class="line-number">255.</span></p>

			<p class="noindent mono"><span class="line-number">256.</span>
	def drawBoard(board):</p>

			<p class="noindent mono"><span class="line-number">257.</span>
	<span class="comment"># Draw background of board.</span></p>

			<p class="noindent mono"><span class="line-number">258.</span>
	DISPLAYSURF.blit(BGIMAGE, BGIMAGE.get_rect())</p>

			<p class="noindent mono"><span class="line-number">259.</span></p>

			<p class="noindent mono"><span class="line-number">260.</span>
	<span class="comment"># Draw grid lines of the board.</span></p>

			<p class="noindent mono"><span class="line-number">261.</span>
	for x in range(BOARDWIDTH + 1):</p>

			<p class="noindent mono"><span class="line-number">262.</span>
	<span class="comment"># Draw the horizontal lines.</span></p>

			<p class="noindent mono"><span class="line-number">263.</span>
	startx = (x * SPACESIZE) + XMARGIN</p>

			<p class="noindent mono"><span class="line-number">264.</span>         starty
	= YMARGIN</p>

			<p class="noindent mono"><span class="line-number">265.</span>
	endx = (x * SPACESIZE) + XMARGIN</p>

			<p class="noindent mono"><span class="line-number">266.</span>
	endy = YMARGIN + (BOARDHEIGHT * SPACESIZE)</p>

			<p class="noindent mono"><span class="line-number">267.</span>
	pygame.draw.line(DISPLAYSURF, GRIDLINECOLOR, (startx, starty), (endx, endy))</p>

			<p class="noindent mono"><span class="line-number">268.</span>
	for y in range(BOARDHEIGHT + 1):</p>

			<p class="noindent mono"><span class="line-number">269.</span>
	<span class="comment"># Draw the vertical lines.</span></p>

			<p class="noindent mono"><span class="line-number">270.</span>
	startx = XMARGIN</p>

			<p class="noindent mono"><span class="line-number">271.</span>
	starty = (y * SPACESIZE) + YMARGIN</p>

			<p class="noindent mono"><span class="line-number">272.</span>
	endx = XMARGIN + (BOARDWIDTH * SPACESIZE)</p>

			<p class="noindent mono"><span class="line-number">273.</span>
	endy = (y * SPACESIZE) + YMARGIN</p>

			<p class="noindent mono"><span class="line-number">274.</span>
	pygame.draw.line(DISPLAYSURF, GRIDLINECOLOR, (startx, starty), (endx, endy))</p>

			<p class="noindent mono"><span class="line-number">275.</span></p>

			<p class="noindent mono"><span class="line-number">276.</span>
	<span class="comment"># Draw the black &amp; white tiles or hint spots.</span></p>

			<p class="noindent mono"><span class="line-number">277.</span>
	for x in range(BOARDWIDTH):</p>

			<p class="noindent mono"><span class="line-number">278.</span>
	for y in range(BOARDHEIGHT):</p>

			<p class="noindent mono"><span class="line-number">279.</span>
	centerx, centery = translateBoardToPixelCoord(x, y)</p>

			<p class="noindent mono"><span class="line-number">280.</span>
	if board[x][y] == WHITE_TILE or board[x][y] == BLACK_TILE:</p>

			<p class="noindent mono"><span class="line-number">281.</span>
	if board[x][y] == WHITE_TILE:</p>

			<p class="noindent mono"><span class="line-number">282.</span>
	tileColor = WHITE</p>

			<p class="noindent mono"><span class="line-number">283.</span>
	else:</p>

			<p class="noindent mono"><span class="line-number">284.</span>
	tileColor = BLACK</p>

			<p class="noindent mono"><span class="line-number">285.</span>
	              pygame.draw.circle(DISPLAYSURF, tileColor, (centerx, centery),
	int(SPACESIZE / 2) - 4)</p>

			<p class="noindent mono"><span class="line-number">286.</span>
	if board[x][y] == HINT_TILE:</p>

			<p class="noindent mono"><span class="line-number">287.</span>
	pygame.draw.rect(DISPLAYSURF, HINTCOLOR, (centerx - 4, centery - 4, 8, 8))</p>

			<p class="noindent mono"><span class="line-number">288.</span></p>

			<p class="noindent mono"><span class="line-number">289.</span></p>

			<p class="noindent mono"><span class="line-number">290.</span>
	def getSpaceClicked(mousex, mousey):</p>

			<p class="noindent mono"><span class="line-number">291.</span>
	<span class="comment"># Return a tuple of two integers of the board
	space coordinates where</span></p>

			<p class="noindent mono"><span class="line-number">292.</span>
	<span class="comment"># the mouse was clicked. (Or returns None not in
	any space.)</span></p>

			<p class="noindent mono"><span class="line-number">293.</span>
	for x in range(BOARDWIDTH):</p>

			<p class="noindent mono"><span class="line-number">294.</span>
	for y in range(BOARDHEIGHT):</p>

			<p class="noindent mono"><span class="line-number">295.</span>
	if mousex &gt; x * SPACESIZE + XMARGIN and \</p>

			<p class="noindent mono"><span class="line-number">296.</span>
	mousex &lt; (x + 1) * SPACESIZE + XMARGIN and \</p>

			<p class="noindent mono"><span class="line-number">297.</span>
	mousey &gt; y * SPACESIZE + YMARGIN and \</p>

			<p class="noindent mono"><span class="line-number">298.</span>
	mousey &lt; (y + 1) * SPACESIZE + YMARGIN:</p>

			<p class="noindent mono"><span class="line-number">299.</span>
	return (x, y)</p>

			<p class="noindent mono"><span class="line-number">300.</span>
	return None</p>

			<p class="noindent mono"><span class="line-number">301.</span></p>

			<p class="noindent mono"><span class="line-number">302.</span></p>

			<p class="noindent mono"><span class="line-number">303.</span>
	def drawInfo(board, playerTile, computerTile, turn):</p>

			<p class="noindent mono"><span class="line-number">304.</span>
	<span class="comment"># Draws scores and whose turn it is at the bottom
	of the screen.</span></p>

			<p class="noindent mono"><span class="line-number">305.</span>
	scores = getScoreOfBoard(board)</p>

			<p class="noindent mono"><span class="line-number">306.</span>
	scoreSurf = FONT.render(&quot;Player Score: %s    Computer Score: %s    %s's
	Turn&quot; % (str(scores[playerTile]), str(scores[computerTile]), turn.title()),
	True, TEXTCOLOR)</p>

			<p class="noindent mono"><span class="line-number">307.</span>
	scoreRect = scoreSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">308.</span>
	scoreRect.bottomleft = (10, WINDOWHEIGHT - 5)</p>

			<p class="noindent mono"><span class="line-number">309.</span>
	DISPLAYSURF.blit(scoreSurf, scoreRect)</p>

			<p class="noindent mono"><span class="line-number">310.</span></p>

			<p class="noindent mono"><span class="line-number">311.</span></p>

			<p class="noindent mono"><span class="line-number">312.</span>
	def resetBoard(board):</p>

			<p class="noindent mono"><span class="line-number">313.</span>
	<span class="comment"># Blanks out the board it is passed, and sets up
	starting tiles.</span></p>

			<p class="noindent mono"><span class="line-number">314.</span>
	for x in range(BOARDWIDTH):</p>

			<p class="noindent mono"><span class="line-number">315.</span>
	for y in range(BOARDHEIGHT):</p>

			<p class="noindent mono"><span class="line-number">316.</span>
	  board[x][y] = EMPTY_SPACE</p>

			<p class="noindent mono"><span class="line-number">317.</span></p>

			<p class="noindent mono"><span class="line-number">318.</span>
	<span class="comment"># Add starting pieces to the center</span></p>

			<p class="noindent mono"><span class="line-number">319.</span>
	board[3][3] = WHITE_TILE</p>

			<p class="noindent mono"><span class="line-number">320.</span>
	board[3][4] = BLACK_TILE</p>

			<p class="noindent mono"><span class="line-number">321.</span>
	board[4][3] = BLACK_TILE</p>

			<p class="noindent mono"><span class="line-number">322.</span>
	board[4][4] = WHITE_TILE</p>

			<p class="noindent mono"><span class="line-number">323.</span></p>

			<p class="noindent mono"><span class="line-number">324.</span></p>

			<p class="noindent mono"><span class="line-number">325.</span>
	def getNewBoard():</p>

			<p class="noindent mono"><span class="line-number">326.</span>     <span
	class="comment"># Creates a brand new, empty board data structure.</span></p>

			<p class="noindent mono"><span class="line-number">327.</span>
	board = []</p>

			<p class="noindent mono"><span class="line-number">328.</span>
	for i in range(BOARDWIDTH):</p>

			<p class="noindent mono"><span class="line-number">329.</span>
	board.append([EMPTY_SPACE] * BOARDHEIGHT)</p>

			<p class="noindent mono"><span class="line-number">330.</span></p>

			<p class="noindent mono"><span class="line-number">331.</span>
	return board</p>

			<p class="noindent mono"><span class="line-number">332.</span></p>

			<p class="noindent mono"><span class="line-number">333.</span></p>

			<p class="noindent mono"><span class="line-number">334.</span>
	def isValidMove(board, tile, xstart, ystart):</p>

			<p class="noindent mono"><span class="line-number">335.</span>
	<span class="comment"># Returns False if the player's move is invalid.
	If it is a valid</span></p>

			<p class="noindent mono"><span class="line-number">336.</span>
	<span class="comment"># move, returns a list of spaces of the captured
	pieces.</span></p>

			<p class="noindent mono"><span class="line-number">337.</span>
	if board[xstart][ystart] != EMPTY_SPACE or not isOnBoard(xstart, ystart):</p>

			<p class="noindent mono"><span class="line-number">338.</span>
	return False</p>

			<p class="noindent mono"><span class="line-number">339.</span></p>

			<p class="noindent mono"><span class="line-number">340.</span>
	board[xstart][ystart] = tile <span class="comment"># temporarily set
	the tile on the board.</span></p>

			<p class="noindent mono"><span class="line-number">341.</span></p>

			<p class="noindent mono"><span class="line-number">342.</span>
	if tile == WHITE_TILE:</p>

			<p class="noindent mono"><span class="line-number">343.</span>
	otherTile = BLACK_TILE</p>

			<p class="noindent mono"><span class="line-number">344.</span>
	else:</p>

			<p class="noindent mono"><span class="line-number">345.</span>
	otherTile = WHITE_TILE</p>

			<p class="noindent mono"><span class="line-number">346.</span></p>

			<p class="noindent mono"><span class="line-number">347.</span>
	tilesToFlip = []</p>

			<p class="noindent mono"><span class="line-number">348.</span>
	<span class="comment"># check each of the eight directions:</span></p>

			<p class="noindent mono"><span class="line-number">349.</span>
	for xdirection, ydirection in [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1,
	-1], [-1, 0], [-1, 1]]:</p>

			<p class="noindent mono"><span class="line-number">350.</span>
	x, y = xstart, ystart</p>

			<p class="noindent mono"><span class="line-number">351.</span>
	x += xdirection</p>

			<p class="noindent mono"><span class="line-number">352.</span>
	y += ydirection</p>

			<p class="noindent mono"><span class="line-number">353.</span>
	if isOnBoard(x, y) and board[x][y] == otherTile:</p>

			<p class="noindent mono"><span class="line-number">354.</span>
	<span class="comment"># The piece belongs to the other player next to
	our piece.</span></p>

			<p class="noindent mono"><span class="line-number">355.</span>
	x += xdirection</p>

			<p class="noindent mono"><span class="line-number">356.</span>
	y += ydirection</p>

			<p class="noindent mono"><span class="line-number">357.</span>
	if not isOnBoard(x, y):</p>

			<p class="noindent mono"><span class="line-number">358.</span>
	continue</p>

			<p class="noindent mono"><span class="line-number">359.</span>
	while board[x][y] == otherTile:</p>

			<p class="noindent mono"><span class="line-number">360.</span>
	x += xdirection</p>

			<p class="noindent mono"><span class="line-number">361.</span>
	y += ydirection</p>

			<p class="noindent mono"><span class="line-number">362.</span>
	if not isOnBoard(x, y):</p>

			<p class="noindent mono"><span class="line-number">363.</span>
	break <span class="comment"># break out of while loop, continue in for
	loop</span></p>

			<p class="noindent mono"><span class="line-number">364.</span>
	    if not isOnBoard(x, y):</p>

			<p class="noindent mono"><span class="line-number">365.</span>
	continue</p>

			<p class="noindent mono"><span class="line-number">366.</span>
	if board[x][y] == tile:</p>

			<p class="noindent mono"><span class="line-number">367.</span>
	<span class="comment"># There are pieces to flip over. Go in the
	reverse</span></p>

			<p class="noindent mono"><span class="line-number">368.</span>
	<span class="comment"># direction until we reach the original space,
	noting all</span></p>

			<p class="noindent mono"><span class="line-number">369.</span>
	               <span class="comment"># the tiles along the way.</span></p>

			<p class="noindent mono"><span class="line-number">370.</span>
	while True:</p>

			<p class="noindent mono"><span class="line-number">371.</span>
	x -= xdirection</p>

			<p class="noindent mono"><span class="line-number">372.</span>
	y -= ydirection</p>

			<p class="noindent mono"><span class="line-number">373.</span>
	if x == xstart and y == ystart:</p>

			<p class="noindent mono"><span class="line-number">374.</span>
	break</p>

			<p class="noindent mono"><span class="line-number">375.</span>
	                  tilesToFlip.append([x, y])</p>

			<p class="noindent mono"><span class="line-number">376.</span></p>

			<p class="noindent mono"><span class="line-number">377.</span>
	board[xstart][ystart] = EMPTY_SPACE <span class="comment"># make space
	empty</span></p>

			<p class="noindent mono"><span class="line-number">378.</span>
	if len(tilesToFlip) == 0: <span class="comment"># If no tiles flipped,
	this move is invalid</span></p>

			<p class="noindent mono"><span class="line-number">379.</span>
	return False</p>

			<p class="noindent mono"><span class="line-number">380.</span>
	return tilesToFlip</p>

			<p class="noindent mono"><span class="line-number">381.</span></p>

			<p class="noindent mono"><span class="line-number">382.</span></p>

			<p class="noindent mono"><span class="line-number">383.</span>
	def isOnBoard(x, y):</p>

			<p class="noindent mono"><span class="line-number">384.</span>
	<span class="comment"># Returns True if the coordinates are located on
	the board.</span></p>

			<p class="noindent mono"><span class="line-number">385.</span>
	return x &gt;= 0 and x &lt; BOARDWIDTH and y &gt;= 0 and y &lt; BOARDHEIGHT</p>

			<p class="noindent mono"><span class="line-number">386.</span></p>

			<p class="noindent mono"><span class="line-number">387.</span></p>

			<p class="noindent mono"><span class="line-number">388.</span>
	def getBoardWithValidMoves(board, tile):</p>

			<p class="noindent mono"><span class="line-number">389.</span>
	<span class="comment"># Returns a new board with hint markings.</span></p>

			<p class="noindent mono"><span class="line-number">390.</span>
	dupeBoard = copy.deepcopy(board)</p>

			<p class="noindent mono"><span class="line-number">391.</span></p>

			<p class="noindent mono"><span class="line-number">392.</span>
	for x, y in getValidMoves(dupeBoard, tile):</p>

			<p class="noindent mono"><span class="line-number">393.</span>
	dupeBoard[x][y] = HINT_TILE</p>

			<p class="noindent mono"><span class="line-number">394.</span>
	return dupeBoard</p>

			<p class="noindent mono"><span class="line-number">395.</span></p>

			<p class="noindent mono"><span class="line-number">396.</span></p>

			<p class="noindent mono"><span class="line-number">397.</span>
	def getValidMoves(board, tile):</p>

			<p class="noindent mono"><span class="line-number">398.</span>
	<span class="comment"># Returns a list of (x,y) tuples of all valid
	moves.</span></p>

			<p class="noindent mono"><span class="line-number">399.</span>
	validMoves = []</p>

			<p class="noindent mono"><span class="line-number">400.</span></p>

			<p class="noindent mono"><span class="line-number">401.</span>
	for x in range(BOARDWIDTH):</p>

			<p class="noindent mono"><span class="line-number">402.</span>
	for y in range(BOARDHEIGHT):</p>

			<p class="noindent mono"><span class="line-number">403.</span>
	if isValidMove(board, tile, x, y) != False:</p>

			<p class="noindent mono"><span class="line-number">404.</span>
	validMoves.append((x, y))</p>

			<p class="noindent mono"><span class="line-number">405.</span>
	return validMoves</p>

			<p class="noindent mono"><span class="line-number">406.</span></p>

			<p class="noindent mono"><span class="line-number">407.</span></p>

			<p class="noindent mono"><span class="line-number">408.</span>
	def getScoreOfBoard(board):</p>

			<p class="noindent mono"><span class="line-number">409.</span>
	<span class="comment"># Determine the score by counting the tiles.</span></p>

			<p class="noindent mono"><span class="line-number">410.</span>
	xscore = 0</p>

			<p class="noindent mono"><span class="line-number">411.</span>
	oscore = 0</p>

			<p class="noindent mono"><span class="line-number">412.</span>
	for x in range(BOARDWIDTH):</p>

			<p class="noindent mono"><span class="line-number">413.</span>
	for y in range(BOARDHEIGHT):</p>

			<p class="noindent mono"><span class="line-number">414.</span>
	if board[x][y] == WHITE_TILE:</p>

			<p class="noindent mono"><span class="line-number">415.</span>
	xscore += 1</p>

			<p class="noindent mono"><span class="line-number">416.</span>
	if board[x][y] == BLACK_TILE:</p>

			<p class="noindent mono"><span class="line-number">417.</span>
	oscore += 1</p>

			<p class="noindent mono"><span class="line-number">418.</span>
	return {WHITE_TILE:xscore, BLACK_TILE:oscore}</p>

			<p class="noindent mono"><span class="line-number">419.</span></p>

			<p class="noindent mono"><span class="line-number">420.</span></p>

			<p class="noindent mono"><span class="line-number">421.</span>
	def enterPlayerTile():</p>

			<p class="noindent mono"><span class="line-number">422.</span>
	<span class="comment"># Draws the text and handles the mouse click
	events for letting</span></p>

			<p class="noindent mono"><span class="line-number">423.</span>
	<span class="comment"># the player choose which color they want to be.
	Returns</span></p>

			<p class="noindent mono"><span class="line-number">424.</span>
	<span class="comment"># [WHITE_TILE, BLACK_TILE] if the player chooses
	to be White,</span></p>

			<p class="noindent mono"><span class="line-number">425.</span>
	<span class="comment"># [BLACK_TILE, WHITE_TILE] if Black.</span></p>

			<p class="noindent mono"><span class="line-number">426.</span></p>

			<p class="noindent mono"><span class="line-number">427.</span>
	<span class="comment"># Create the text.</span></p>

			<p class="noindent mono"><span class="line-number">428.</span>
	textSurf = FONT.render('Do you want to be white or black?', True, TEXTCOLOR,
	TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">429.</span>
	textRect = textSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">430.</span>
	textRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))</p>

			<p class="noindent mono"><span class="line-number">431.</span></p>

			<p class="noindent mono"><span class="line-number">432.</span>
	xSurf = BIGFONT.render('White', True, TEXTCOLOR, TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">433.</span>
	xRect = xSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">434.</span>
	xRect.center = (int(WINDOWWIDTH / 2) - 60, int(WINDOWHEIGHT / 2) + 40)</p>

			<p class="noindent mono"><span class="line-number">435.</span></p>

			<p class="noindent mono"><span class="line-number">436.</span>
	oSurf = BIGFONT.render('Black', True, TEXTCOLOR, TEXTBGCOLOR1)</p>

			<p class="noindent mono"><span class="line-number">437.</span>
	oRect = oSurf.get_rect()</p>

			<p class="noindent mono"><span class="line-number">438.</span>
	oRect.center = (int(WINDOWWIDTH / 2) + 60, int(WINDOWHEIGHT / 2) + 40)</p>

			<p class="noindent mono"><span class="line-number">439.</span></p>

			<p class="noindent mono"><span class="line-number">440.</span>
	while True:</p>

			<p class="noindent mono"><span class="line-number">441.</span>
	<span class="comment"># Keep looping until the player has clicked on a
	color.</span></p>

			<p class="noindent mono"><span class="line-number">442.</span>
	checkForQuit()</p>

			<p class="noindent mono"><span class="line-number">443.</span>
	for event in pygame.event.get(): <span class="comment"># event handling
	loop</span></p>

			<p class="noindent mono"><span class="line-number">444.</span>
	if event.type == MOUSEBUTTONUP:</p>

			<p class="noindent mono"><span class="line-number">445.</span>
	mousex, mousey = event.pos</p>

			<p class="noindent mono"><span class="line-number">446.</span>
	if xRect.collidepoint( (mousex, mousey) ):</p>

			<p class="noindent mono"><span class="line-number">447.</span>
	return [WHITE_TILE, BLACK_TILE]</p>

			<p class="noindent mono"><span class="line-number">448.</span>
	elif oRect.collidepoint( (mousex, mousey) ):</p>

			<p class="noindent mono"><span class="line-number">449.</span>
	return [BLACK_TILE, WHITE_TILE]</p>

			<p class="noindent mono"><span class="line-number">450.</span></p>

			<p class="noindent mono"><span class="line-number">451.</span>
	<span class="comment"># Draw the screen.</span></p>

			<p class="noindent mono"><span class="line-number">452.</span>
	DISPLAYSURF.blit(textSurf, textRect)</p>

			<p class="noindent mono"><span class="line-number">453.</span>
	DISPLAYSURF.blit(xSurf, xRect)</p>

			<p class="noindent mono"><span class="line-number">454.</span>
	DISPLAYSURF.blit(oSurf, oRect)</p>

			<p class="noindent mono"><span class="line-number">455.</span>
	pygame.display.update()</p>

			<p class="noindent mono"><span class="line-number">456.</span>
	MAINCLOCK.tick(FPS)</p>

			<p class="noindent mono"><span class="line-number">457.</span></p>

			<p class="noindent mono"><span class="line-number">458.</span></p>

			<p class="noindent mono"><span class="line-number">459.</span>
	def makeMove(board, tile, xstart, ystart, realMove=False):</p>

			<p class="noindent mono"><span class="line-number">460.</span>
	<span class="comment"># Place the tile on the board at xstart, ystart,
	and flip tiles</span></p>

			<p class="noindent mono"><span class="line-number">461.</span>
	<span class="comment"># Returns False if this is an invalid move, True
	if it is valid.</span></p>

			<p class="noindent mono"><span class="line-number">462.</span>
	tilesToFlip = isValidMove(board, tile, xstart, ystart)</p>

			<p class="noindent mono"><span class="line-number">463.</span></p>

			<p class="noindent mono"><span class="line-number">464.</span>
	if tilesToFlip == False:</p>

			<p class="noindent mono"><span class="line-number">465.</span>
	return False</p>

			<p class="noindent mono"><span class="line-number">466.</span></p>

			<p class="noindent mono"><span class="line-number">467.</span>
	board[xstart][ystart] = tile</p>

			<p class="noindent mono"><span class="line-number">468.</span></p>

			<p class="noindent mono"><span class="line-number">469.</span>
	if realMove:</p>

			<p class="noindent mono"><span class="line-number">470.</span>
	animateTileChange(tilesToFlip, tile, (xstart, ystart))</p>

			<p class="noindent mono"><span class="line-number">471.</span></p>

			<p class="noindent mono"><span class="line-number">472.</span>
	for x, y in tilesToFlip:</p>

			<p class="noindent mono"><span class="line-number">473.</span>
	board[x][y] = tile</p>

			<p class="noindent mono"><span class="line-number">474.</span>
	return True</p>

			<p class="noindent mono"><span class="line-number">475.</span></p>

			<p class="noindent mono"><span class="line-number">476.</span></p>

			<p class="noindent mono"><span class="line-number">477.</span>
	def isOnCorner(x, y):</p>

			<p class="noindent mono"><span class="line-number">478.</span>
	<span class="comment"># Returns True if the position is in one of the
	four corners.</span></p>

			<p class="noindent mono"><span class="line-number">479.</span>
	return (x == 0 and y == 0) or \</p>

			<p class="noindent mono"><span class="line-number">480.</span>
	(x == BOARDWIDTH and y == 0) or \</p>

			<p class="noindent mono"><span class="line-number">481.</span>
	(x == 0 and y == BOARDHEIGHT) or \</p>

			<p class="noindent mono"><span class="line-number">482.</span>
	(x == BOARDWIDTH and y == BOARDHEIGHT)</p>

			<p class="noindent mono"><span class="line-number">483.</span></p>

			<p class="noindent mono"><span class="line-number">484.</span></p>

			<p class="noindent mono"><span class="line-number">485.</span>
	def getComputerMove(board, computerTile):</p>

			<p class="noindent mono"><span class="line-number">486.</span>
	<span class="comment"># Given a board and the computer's tile,
	determine where to</span></p>

			<p class="noindent mono"><span class="line-number">487.</span>
	<span class="comment"># move and return that move as a [x, y] list.</span></p>

			<p class="noindent mono"><span class="line-number">488.</span>
	possibleMoves = getValidMoves(board, computerTile)</p>

			<p class="noindent mono"><span class="line-number">489.</span></p>

			<p class="noindent mono"><span class="line-number">490.</span>
	<span class="comment"># randomize the order of the possible moves</span></p>

			<p class="noindent mono"><span class="line-number">491.</span>
	random.shuffle(possibleMoves)</p>

			<p class="noindent mono"><span class="line-number">492.</span></p>

			<p class="noindent mono"><span class="line-number">493.</span>
	<span class="comment"># always go for a corner if available.</span></p>

			<p class="noindent mono"><span class="line-number">494.</span>
	for x, y in possibleMoves:</p>

			<p class="noindent mono"><span class="line-number">495.</span>
	if isOnCorner(x, y):</p>

			<p class="noindent mono"><span class="line-number">496.</span>
	return [x, y]</p>

			<p class="noindent mono"><span class="line-number">497.</span></p>

			<p class="noindent mono"><span class="line-number">498.</span>
	<span class="comment"># Go through all possible moves and remember the
	best scoring move</span></p>

			<p class="noindent mono"><span class="line-number">499.</span>
	bestScore = -1</p>

			<p class="noindent mono"><span class="line-number">500.</span>
	for x, y in possibleMoves:</p>

			<p class="noindent mono"><span class="line-number">501.</span>
	dupeBoard = copy.deepcopy(board)</p>

			<p class="noindent mono"><span class="line-number">502.</span>
	makeMove(dupeBoard, computerTile, x, y)</p>

			<p class="noindent mono"><span class="line-number">503.</span>
	score = getScoreOfBoard(dupeBoard)[computerTile]</p>

			<p class="noindent mono"><span class="line-number">504.</span>
	if score &gt; bestScore:</p>

			<p class="noindent mono"><span class="line-number">505.</span>
	bestMove = [x, y]</p>

			<p class="noindent mono"><span class="line-number">506.</span>
	bestScore = score</p>

			<p class="noindent mono"><span class="line-number">507.</span>
	return bestMove</p>

			<p class="noindent mono"><span class="line-number">508.</span></p>

			<p class="noindent mono"><span class="line-number">509.</span></p>

			<p class="noindent mono"><span class="line-number">510.</span>
	def checkForQuit():</p>

			<p class="noindent mono"><span class="line-number">511.</span>
	for event in pygame.event.get((QUIT, KEYUP)): <span class="comment">#
	event handling loop</span></p>

			<p class="noindent mono"><span class="line-number">512.</span>
	if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):</p>

			<p class="noindent mono"><span class="line-number">513.</span>
	pygame.quit()</p>

			<p class="noindent mono"><span class="line-number">514.</span>
	sys.exit()</p>

			<p class="noindent mono"><span class="line-number">515.</span></p>

			<p class="noindent mono"><span class="line-number">516.</span></p>

			<p class="noindent mono"><span class="line-number">517.</span>
	if __name__ == '__main__':</p>

			<p class="noindent mono"><span class="line-number">518.</span> main()</p>
	</div>

	<h1 class="subheading" id="ink-spill">Ink Spill, a “Flood It” Clone</h1>
	<p class="noindent">The game <i>“Flood It”</i> begins with a board filled with colored tiles. On each turn the player chooses a new color to paint the top left tile and any tiles adjacent to it of that same color. This game makes use of the flood fill algorithm (described in the <a href="chapter9.xhtml#flood-fill">Star Pusher</a> chapter). The goal of the game is to turn the entire board into a single color before running out of turns.</p>
	<p>This game also has a Settings screen where the player can change the size of the board and the difficulty of the game. If the player gets board of the colors, there are a few other color schemes they can switch to as well.</p>

	<h1 class="subheading" id="ink-spill-source">Source Code for Ink Spill</h1>
	<p class="noindent">This source code can be downloaded from <a href="https://invpy.com/inkspill.py">https://invpy.com/inkspill.py</a>.</p>
	<p>The image files that Ink Spill uses can be downloaded from <a href="https://invpy.com/inkspillimages.zip">https://invpy.com/inkspillimages.zip</a>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">1.</span> <span class="comment"># Ink Spill (a Flood It clone)</span></p>
		<p class="noindent mono"><span class="line-number">2.</span> <span class="comment"># http://inventwithpython.com/pygame</span></p>
		<p class="noindent mono"><span class="line-number">3.</span> <span
		class="comment"># By Al Sweigart <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="71101d31181f07141f0506180519010805191e1f5f121e1c">[email&#160;protected]</a></span></p>

		<p class="noindent mono"><span class="line-number">4.</span> <span
		class="comment"># Released under a &quot;Simplified BSD&quot; license</span></p>

		<p class="noindent mono"><span class="line-number">5. </span></p>

		<p class="noindent mono"><span class="line-number">6.</span>
		import random, sys, webbrowser, copy, pygame</p>

		<p class="noindent mono"><span class="line-number">7.</span>
		from pygame.locals import *</p>

		<p class="noindent mono"><span class="line-number">8. </span></p>

		<p class="noindent mono"><span class="line-number">9.</span> <span
		class="comment"># There are different box sizes, number of boxes, and</span></p>

		<p class="noindent mono"><span class="line-number">10.</span> <span
		class="comment"># life depending on the &quot;board size&quot; setting
		selected.</span></p>

		<p class="noindent mono"><span class="line-number">11.</span>
		SMALLBOXSIZE  = 60 <span class="comment"># size is in pixels</span></p>

		<p class="noindent mono"><span class="line-number">12.</span>
		MEDIUMBOXSIZE = 20</p>

		<p class="noindent mono"><span class="line-number">13.</span>
		LARGEBOXSIZE  = 11</p>

		<p class="noindent mono"><span class="line-number">14. </span></p>

		<p class="noindent mono"><span class="line-number">15.</span>
		SMALLBOARDSIZE  = 6 <span class="comment"># size is in boxes</span></p>

		<p class="noindent mono"><span class="line-number">16.</span>
		MEDIUMBOARDSIZE = 17</p>

		<p class="noindent mono"><span class="line-number">17.</span>
		LARGEBOARDSIZE  = 30</p>

		<p class="noindent mono"><span class="line-number">18. </span></p>

		<p class="noindent mono"><span class="line-number">19.</span>
		SMALLMAXLIFE  = 10 <span class="comment"># number of turns</span></p>

		<p class="noindent mono"><span class="line-number">20.</span>
		MEDIUMMAXLIFE = 30</p>

		<p class="noindent mono"><span class="line-number">21.</span>
		LARGEMAXLIFE  = 64</p>

		<p class="noindent mono"><span class="line-number">22. </span></p>

		<p class="noindent mono"><span class="line-number">23.</span>
		FPS = 30</p>

		<p class="noindent mono"><span class="line-number">24.</span>
		WINDOWWIDTH = 640</p>

		<p class="noindent mono"><span class="line-number">25.</span>
		WINDOWHEIGHT = 480</p>

		<p class="noindent mono"><span class="line-number">26.</span>
		boxSize = MEDIUMBOXSIZE</p>

		<p class="noindent mono"><span class="line-number">27.</span>
		PALETTEGAPSIZE = 10</p>

		<p class="noindent mono"><span class="line-number">28.</span>
		PALETTESIZE = 45</p>

		<p class="noindent mono"><span class="line-number">29.</span>
		EASY = 0   <span class="comment"># arbitrary but unique value</span></p>

		<p class="noindent mono"><span class="line-number">30.</span>
		MEDIUM = 1 <span class="comment"># arbitrary but unique value</span></p>

		<p class="noindent mono"><span class="line-number">31.</span>
		HARD = 2   <span class="comment"># arbitrary but unique value</span></p>

		<p class="noindent mono"><span class="line-number">32. </span></p>

		<p class="noindent mono"><span class="line-number">33.</span>
		difficulty = MEDIUM <span class="comment"># game starts in
		&quot;medium&quot; mode</span></p>

		<p class="noindent mono"><span class="line-number">34.</span>
		maxLife = MEDIUMMAXLIFE</p>

		<p class="noindent mono"><span class="line-number">35.</span>
		boardWidth = MEDIUMBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">36.</span>
		boardHeight = MEDIUMBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">37. </span></p>

		<p class="noindent mono"><span class="line-number">38. </span></p>

		<p class="noindent mono"><span class="line-number">39.</span> <span
		class="comment">#            R    G    B</span></p>

		<p class="noindent mono"><span class="line-number">40.</span>
		WHITE    = (255, 255, 255)</p>

		<p class="noindent mono"><span class="line-number">41.</span>
		DARKGRAY = ( 70,  70,  70)</p>

		<p class="noindent mono"><span class="line-number">42.</span>
		BLACK    = (  0,   0,   0)</p>

		<p class="noindent mono"><span class="line-number">43.</span>
		RED      = (255,   0,   0)</p>

		<p class="noindent mono"><span class="line-number">44.</span>
		GREEN    = (  0, 255,   0)</p>

		<p class="noindent mono"><span class="line-number">45.</span>
		BLUE     = (  0,   0, 255)</p>

		<p class="noindent mono"><span class="line-number">46.</span>
		YELLOW   = (255, 255,   0)</p>

		<p class="noindent mono"><span class="line-number">47.</span>
		ORANGE   = (255, 128,   0)</p>

		<p class="noindent mono"><span class="line-number">48.</span>
		PURPLE   = (255,   0, 255)</p>

		<p class="noindent mono"><span class="line-number">49. </span></p>

		<p class="noindent mono"><span class="line-number">50.</span> <span
		class="comment"># The first color in each scheme is the background
		color, the next six are the palette colors.</span></p>

		<p class="noindent mono"><span class="line-number">51.</span>
		COLORSCHEMES = (((150, 200, 255), RED, GREEN, BLUE, YELLOW, ORANGE, PURPLE),</p>

		<p class="noindent mono"><span class="line-number">52.</span>
		((0, 155, 104),  (97, 215, 164),  (228, 0, 69),  (0, 125, 50),   (204, 246,
		0),   (148, 0, 45),    (241, 109, 149)),</p>

		<p class="noindent mono"><span class="line-number">53.</span>
		((195, 179, 0),  (255, 239, 115), (255, 226, 0), (147, 3, 167),  (24, 38,
		176),   (166, 147, 0),   (197, 97, 211)),</p>

		<p class="noindent mono"><span class="line-number">54.</span>
		((85, 0, 0),     (155, 39, 102),  (0, 201, 13),  (255, 118, 0),  (206, 0,
		113),   (0, 130, 9),     (255, 180, 115)),</p>

		<p class="noindent mono"><span class="line-number">55.</span>
		((191, 159, 64), (183, 182, 208), (4, 31, 183),  (167, 184, 45), (122, 128,
		212), (37, 204, 7),    (88, 155, 213)),</p>

		<p class="noindent mono"><span class="line-number">56.</span>
		((200, 33, 205), (116, 252, 185), (68, 56, 56),  (52, 238, 83),  (23, 149, 195),
		(222, 157, 227), (212, 86, 185)))</p>

		<p class="noindent mono"><span class="line-number">57.</span>
		for i in range(len(COLORSCHEMES)):</p>

		<p class="noindent mono"><span class="line-number">58.</span>
		assert len(COLORSCHEMES[i]) == 7, 'Color scheme %s does not have exactly 7
		colors.' % (i)</p>

		<p class="noindent mono"><span class="line-number">59.</span>
		bgColor = COLORSCHEMES[0][0]</p>

		<p class="noindent mono"><span class="line-number">60.</span>
		paletteColors =  COLORSCHEMES[0][1:]</p>

		<p class="noindent mono"><span class="line-number">61. </span></p>

		<p class="noindent mono"><span class="line-number">62.</span>
		def main():</p>

		<p class="noindent mono"><span class="line-number">63.</span>
		global FPSCLOCK, DISPLAYSURF, LOGOIMAGE, SPOTIMAGE, SETTINGSIMAGE, SETTINGSBUTTONIMAGE,
		RESETBUTTONIMAGE</p>

		<p class="noindent mono"><span class="line-number">64. </span></p>

		<p class="noindent mono"><span class="line-number">65.</span>
		pygame.init()</p>

		<p class="noindent mono"><span class="line-number">66.</span>
		FPSCLOCK = pygame.time.Clock()</p>

		<p class="noindent mono"><span class="line-number">67.</span>
		DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">68. </span></p>

		<p class="noindent mono"><span class="line-number">69.</span>
		<span class="comment"># Load images</span></p>

		<p class="noindent mono"><span class="line-number">70.</span>
		LOGOIMAGE = pygame.image.load('inkspilllogo.png')</p>

		<p class="noindent mono"><span class="line-number">71.</span>
		SPOTIMAGE = pygame.image.load('inkspillspot.png')</p>

		<p class="noindent mono"><span class="line-number">72.</span>
		SETTINGSIMAGE = pygame.image.load('inkspillsettings.png')</p>

		<p class="noindent mono"><span class="line-number">73.</span>
		SETTINGSBUTTONIMAGE = pygame.image.load('inkspillsettingsbutton.png')</p>

		<p class="noindent mono"><span class="line-number">74.</span>
		RESETBUTTONIMAGE = pygame.image.load('inkspillresetbutton.png')</p>

		<p class="noindent mono"><span class="line-number">75. </span></p>

		<p class="noindent mono"><span class="line-number">76.</span>
		pygame.display.set_caption('Ink Spill')</p>

		<p class="noindent mono"><span class="line-number">77.</span>
		mousex = 0</p>

		<p class="noindent mono"><span class="line-number">78.</span>
		mousey = 0</p>

		<p class="noindent mono"><span class="line-number">79.</span>
		mainBoard = generateRandomBoard(boardWidth, boardHeight, difficulty)</p>

		<p class="noindent mono"><span class="line-number">80.</span>
		life = maxLife</p>

		<p class="noindent mono"><span class="line-number">81.</span>
		lastPaletteClicked = None</p>

		<p class="noindent mono"><span class="line-number">82. </span></p>

		<p class="noindent mono"><span class="line-number">83.</span>
		while True: <span class="comment"># main game loop</span></p>

		<p class="noindent mono"><span class="line-number">84.</span>
		paletteClicked = None</p>

		<p class="noindent mono"><span class="line-number">85.</span>
		resetGame = False</p>

		<p class="noindent mono"><span class="line-number">86. </span></p>

		<p class="noindent mono"><span class="line-number">87.</span>
		<span class="comment"># Draw the screen.</span></p>

		<p class="noindent mono"><span class="line-number">88.</span>
		DISPLAYSURF.fill(bgColor)</p>

		<p class="noindent mono"><span class="line-number">89.</span>
		drawLogoAndButtons()</p>

		<p class="noindent mono"><span class="line-number">90.</span>
		drawBoard(mainBoard)</p>

		<p class="noindent mono"><span class="line-number">91.</span>
		drawLifeMeter(life)</p>

		<p class="noindent mono"><span class="line-number">92.</span>
		drawPalettes()</p>

		<p class="noindent mono"><span class="line-number">93. </span></p>

		<p class="noindent mono"><span class="line-number">94.</span>
		checkForQuit()</p>

		<p class="noindent mono"><span class="line-number">95.</span>
		for event in pygame.event.get(): <span class="comment"># event handling
		loop</span></p>

		<p class="noindent mono"><span class="line-number">96.</span>
		if event.type == MOUSEBUTTONUP:</p>

		<p class="noindent mono"><span class="line-number">97.</span>
		mousex, mousey = event.pos</p>

		<p class="noindent mono"><span class="line-number">98.</span>
		if pygame.Rect(WINDOWWIDTH - SETTINGSBUTTONIMAGE.get_width(),</p>

		<p class="noindent mono"><span class="line-number">99.</span>
		WINDOWHEIGHT - SETTINGSBUTTONIMAGE.get_height(),</p>

		<p class="noindent mono"><span class="line-number">100.</span>
		SETTINGSBUTTONIMAGE.get_width(),</p>

		<p class="noindent mono"><span class="line-number">101.</span>
		SETTINGSBUTTONIMAGE.get_height()).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">102.</span>
		resetGame = showSettingsScreen() <span class="comment"># clicked on
		Settings button</span></p>

		<p class="noindent mono"><span class="line-number">103.</span>
		elif pygame.Rect(WINDOWWIDTH - RESETBUTTONIMAGE.get_width(),</p>

		<p class="noindent mono"><span class="line-number">104.</span>
		WINDOWHEIGHT - SETTINGSBUTTONIMAGE.get_height() -
		RESETBUTTONIMAGE.get_height(),</p>

		<p class="noindent mono"><span class="line-number">105.</span>
		         RESETBUTTONIMAGE.get_width(),</p>

		<p class="noindent mono"><span class="line-number">106.</span>
		RESETBUTTONIMAGE.get_height()).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">107.</span>
		resetGame = True <span class="comment"># clicked on Reset button</span></p>

		<p class="noindent mono"><span class="line-number">108.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">109.</span>
		  <span class="comment"># check if a palette button was clicked</span></p>

		<p class="noindent mono"><span class="line-number">110.</span>
		paletteClicked = getColorOfPaletteAt(mousex, mousey)</p>

		<p class="noindent mono"><span class="line-number">111. </span></p>

		<p class="noindent mono"><span class="line-number">112.</span>
		if paletteClicked != None and paletteClicked != lastPaletteClicked:</p>

		<p class="noindent mono"><span class="line-number">113.</span>
		<span class="comment"># a palette button was clicked that is different
		from the</span></p>

		<p class="noindent mono"><span class="line-number">114.</span>
		<span class="comment"># last palette button clicked (this check
		prevents the player</span></p>

		<p class="noindent mono"><span class="line-number">115.</span>
		<span class="comment"># from accidentally clicking the same palette
		twice)</span></p>

		<p class="noindent mono"><span class="line-number">116.</span>
		lastPaletteClicked = paletteClicked</p>

		<p class="noindent mono"><span class="line-number">117.</span>
		floodAnimation(mainBoard, paletteClicked)</p>

		<p class="noindent mono"><span class="line-number">118.</span>
		life -= 1</p>

		<p class="noindent mono"><span class="line-number">119. </span></p>

		<p class="noindent mono"><span class="line-number">120.</span>
		resetGame = False</p>

		<p class="noindent mono"><span class="line-number">121.</span>
		if hasWon(mainBoard):</p>

		<p class="noindent mono"><span class="line-number">122.</span>
		for i in range(4): <span class="comment"># flash border 4 times</span></p>

		<p class="noindent mono"><span class="line-number">123.</span>
		flashBorderAnimation(WHITE, mainBoard)</p>

		<p class="noindent mono"><span class="line-number">124.</span>
		resetGame = True</p>

		<p class="noindent mono"><span class="line-number">125.</span>
		pygame.time.wait(2000) <span class="comment"># pause so the player can
		bask in victory</span></p>

		<p class="noindent mono"><span class="line-number">126.</span>
		elif life == 0:</p>

		<p class="noindent mono"><span class="line-number">127.</span>
		<span class="comment"># life is zero, so player has lost</span></p>

		<p class="noindent mono"><span class="line-number">128.</span>
		drawLifeMeter(0)</p>

		<p class="noindent mono"><span class="line-number">129.</span>
		pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">130.</span>
		pygame.time.wait(400)</p>

		<p class="noindent mono"><span class="line-number">131.</span>
		for i in range(4):</p>

		<p class="noindent mono"><span class="line-number">132.</span>
		flashBorderAnimation(BLACK, mainBoard)</p>

		<p class="noindent mono"><span class="line-number">133.</span>
		resetGame = True</p>

		<p class="noindent mono"><span class="line-number">134.</span>
		pygame.time.wait(2000) <span class="comment"># pause so the player can
		suffer in their defeat</span></p>

		<p class="noindent mono"><span class="line-number">135. </span></p>

		<p class="noindent mono"><span class="line-number">136.</span>
		if resetGame:</p>

		<p class="noindent mono"><span class="line-number">137.</span>
		<span class="comment"># start a new game</span></p>

		<p class="noindent mono"><span class="line-number">138.</span>
		mainBoard = generateRandomBoard(boardWidth, boardHeight, difficulty)</p>

		<p class="noindent mono"><span class="line-number">139.</span>
		life = maxLife</p>

		<p class="noindent mono"><span class="line-number">140.</span>
		lastPaletteClicked = None</p>

		<p class="noindent mono"><span class="line-number">141. </span></p>

		<p class="noindent mono"><span class="line-number">142.</span>
		pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">143.</span>
		FPSCLOCK.tick(FPS)</p>

		<p class="noindent mono"><span class="line-number">144. </span></p>

		<p class="noindent mono"><span class="line-number">145. </span></p>

		<p class="noindent mono"><span class="line-number">146.</span>
		def checkForQuit():</p>

		<p class="noindent mono"><span class="line-number">147.</span>
		<span class="comment"># Terminates the program if there are any QUIT or
		escape key events.</span></p>

		<p class="noindent mono"><span class="line-number">148.</span>
		for event in pygame.event.get(QUIT): <span class="comment"># get all
		the QUIT events</span></p>

		<p class="noindent mono"><span class="line-number">149.</span>
		pygame.quit() <span class="comment"># terminate if any QUIT events are
		present</span></p>

		<p class="noindent mono"><span class="line-number">150.</span>
		sys.exit()</p>

		<p class="noindent mono"><span class="line-number">151.</span>
		for event in pygame.event.get(KEYUP): <span class="comment"># get all
		the KEYUP events</span></p>

		<p class="noindent mono"><span class="line-number">152.</span>
		if event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">153.</span>
		pygame.quit() <span class="comment"># terminate if the KEYUP event was
		for the Esc</span> <span class="line-number">key</span></p>

		<p class="noindent mono"><span class="line-number">154.</span>
		sys.exit()</p>

		<p class="noindent mono"><span class="line-number">155.</span>
		pygame.event.post(event) <span class="comment"># put the other KEYUP
		event objects back</span></p>

		<p class="noindent mono"><span class="line-number">156. </span></p>

		<p class="noindent mono"><span class="line-number">157. </span></p>

		<p class="noindent mono"><span class="line-number">158.</span>
		def hasWon(board):</p>

		<p class="noindent mono"><span class="line-number">159.</span>
		<span class="comment"># if the entire board is the same color, player
		has won</span></p>

		<p class="noindent mono"><span class="line-number">160.</span>
		for x in range(boardWidth):</p>

		<p class="noindent mono"><span class="line-number">161.</span>
		for y in range(boardHeight):</p>

		<p class="noindent mono"><span class="line-number">162.</span>
		if board[x][y] != board[0][0]:</p>

		<p class="noindent mono"><span class="line-number">163.</span>
		return False <span class="comment"># found a different color, player
		has not won</span></p>

		<p class="noindent mono"><span class="line-number">164.</span>
		return True</p>

		<p class="noindent mono"><span class="line-number">165. </span></p>

		<p class="noindent mono"><span class="line-number">166. </span></p>

		<p class="noindent mono"><span class="line-number">167.</span>
		def showSettingsScreen():</p>

		<p class="noindent mono"><span class="line-number">168.</span>
		global difficulty, boxSize, boardWidth, boardHeight, maxLife, paletteColors,
		bgColor</p>

		<p class="noindent mono"><span class="line-number">169. </span></p>

		<p class="noindent mono"><span class="line-number">170.</span>
		<span class="comment"># The pixel coordinates in this function were
		obtained by loading</span></p>

		<p class="noindent mono"><span class="line-number">171.</span>
		<span class="comment"># the inkspillsettings.png image into a graphics
		editor and reading</span></p>

		<p class="noindent mono"><span class="line-number">172.</span>
		<span class="comment"># the pixel coordinates from there. Handy trick.</span></p>

		<p class="noindent mono"><span class="line-number">173. </span></p>

		<p class="noindent mono"><span class="line-number">174.</span>
		origDifficulty = difficulty</p>

		<p class="noindent mono"><span class="line-number">175.</span>
		origBoxSize = boxSize</p>

		<p class="noindent mono"><span class="line-number">176.</span>
		screenNeedsRedraw = True</p>

		<p class="noindent mono"><span class="line-number">177. </span></p>

		<p class="noindent mono"><span class="line-number">178.</span>
		while True:</p>

		<p class="noindent mono"><span class="line-number">179.</span>
		if screenNeedsRedraw:</p>

		<p class="noindent mono"><span class="line-number">180.</span>
		DISPLAYSURF.fill(bgColor)</p>

		<p class="noindent mono"><span class="line-number">181.</span>
		DISPLAYSURF.blit(SETTINGSIMAGE, (0,0))</p>

		<p class="noindent mono"><span class="line-number">182. </span></p>

		<p class="noindent mono"><span class="line-number">183.</span>
		<span class="comment"># place the ink spot marker next to the selected
		difficulty</span></p>

		<p class="noindent mono"><span class="line-number">184.</span>
		if difficulty == EASY:</p>

		<p class="noindent mono"><span class="line-number">185.</span>
		      DISPLAYSURF.blit(SPOTIMAGE, (30, 4))</p>

		<p class="noindent mono"><span class="line-number">186.</span>
		if difficulty == MEDIUM:</p>

		<p class="noindent mono"><span class="line-number">187.</span>
		DISPLAYSURF.blit(SPOTIMAGE, (8, 41))</p>

		<p class="noindent mono"><span class="line-number">188.</span>
		if difficulty == HARD:</p>

		<p class="noindent mono"><span class="line-number">189.</span>
		DISPLAYSURF.blit(SPOTIMAGE, (30, 76))</p>

		<p class="noindent mono"><span class="line-number">190. </span></p>

		<p class="noindent mono"><span class="line-number">191.</span>
		         <span class="comment"># place the ink spot marker next to the
		selected size</span></p>

		<p class="noindent mono"><span class="line-number">192.</span>
		if boxSize == SMALLBOXSIZE:</p>

		<p class="noindent mono"><span class="line-number">193.</span>
		DISPLAYSURF.blit(SPOTIMAGE, (22, 150))</p>

		<p class="noindent mono"><span class="line-number">194.</span>
		if boxSize == MEDIUMBOXSIZE:</p>

		<p class="noindent mono"><span class="line-number">195.</span>
		DISPLAYSURF.blit(SPOTIMAGE, (11, 185))</p>

		<p class="noindent mono"><span class="line-number">196.</span>
		if boxSize == LARGEBOXSIZE:</p>

		<p class="noindent mono"><span class="line-number">197.</span>
		DISPLAYSURF.blit(SPOTIMAGE, (24, 220))</p>

		<p class="noindent mono"><span class="line-number">198. </span></p>

		<p class="noindent mono"><span class="line-number">199.</span>
		for i in range(len(COLORSCHEMES)):</p>

		<p class="noindent mono"><span class="line-number">200.</span>
		drawColorSchemeBoxes(500, i * 60 + 30, i)</p>

		<p class="noindent mono"><span class="line-number">201. </span></p>

		<p class="noindent mono"><span class="line-number">202.</span>
		           pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">203. </span></p>

		<p class="noindent mono"><span class="line-number">204.</span>
		screenNeedsRedraw = False <span class="comment"># by default, don't
		redraw the screen</span></p>

		<p class="noindent mono"><span class="line-number">205.</span>
		for event in pygame.event.get(): <span class="comment"># event handling
		loop</span></p>

		<p class="noindent mono"><span class="line-number">206.</span>
		if event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">207.</span>
		pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">208.</span>
		sys.exit()</p>

		<p class="noindent mono"><span class="line-number">209.</span>
		elif event.type == KEYUP:</p>

		<p class="noindent mono"><span class="line-number">210.</span>
		if event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">211.</span>
		<span class="comment"># Esc key on settings screen goes back to game</span></p>

		<p class="noindent mono"><span class="line-number">212.</span>
		return not (origDifficulty == difficulty and origBoxSize == boxSize)</p>

		<p class="noindent mono"><span class="line-number">213.</span>
		elif event.type == MOUSEBUTTONUP:</p>

		<p class="noindent mono"><span class="line-number">214.</span>
		screenNeedsRedraw = True <span class="comment"># screen should be
		redrawn</span></p>

		<p class="noindent mono"><span class="line-number">215.</span>
		mousex, mousey = event.pos <span class="comment"># syntactic sugar</span></p>

		<p class="noindent mono"><span class="line-number">216. </span></p>

		<p class="noindent mono"><span class="line-number">217.</span>
		<span class="comment"># check for clicks on the difficulty buttons</span></p>

		<p class="noindent mono"><span class="line-number">218.</span>
		if pygame.Rect(74, 16, 111, 30).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">219.</span>
		difficulty = EASY</p>

		<p class="noindent mono"><span class="line-number">220.</span>
		elif pygame.Rect(53, 50, 104, 29).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">221.</span>
		difficulty = MEDIUM</p>

		<p class="noindent mono"><span class="line-number">222.</span>
		elif pygame.Rect(72, 85, 65, 31).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">223.</span>
		difficulty = HARD</p>

		<p class="noindent mono"><span class="line-number">224. </span></p>

		<p class="noindent mono"><span class="line-number">225.</span>
		<span class="comment"># check for clicks on the size buttons</span></p>

		<p class="noindent mono"><span class="line-number">226.</span>
		 elif pygame.Rect(63, 156, 84, 31).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">227.</span>
		<span class="comment"># small board size setting:</span></p>

		<p class="noindent mono"><span class="line-number">228.</span>
		boxSize = SMALLBOXSIZE</p>

		<p class="noindent mono"><span class="line-number">229.</span>
		boardWidth = SMALLBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">230.</span>
		boardHeight = SMALLBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">231.</span>
		maxLife = SMALLMAXLIFE</p>

		<p class="noindent mono"><span class="line-number">232.</span>
		elif pygame.Rect(52, 192, 106,32).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">233.</span>
		<span class="comment"># medium board size setting:</span></p>

		<p class="noindent mono"><span class="line-number">234.</span>
		boxSize = MEDIUMBOXSIZE</p>

		<p class="noindent mono"><span class="line-number">235.</span>
		boardWidth = MEDIUMBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">236.</span>
		boardHeight = MEDIUMBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">237.</span>
		maxLife = MEDIUMMAXLIFE</p>

		<p class="noindent mono"><span class="line-number">238.</span>
		elif pygame.Rect(67, 228, 58, 37).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">239.</span>
		         <span class="comment"># large board size setting:</span></p>

		<p class="noindent mono"><span class="line-number">240.</span>
		boxSize = LARGEBOXSIZE</p>

		<p class="noindent mono"><span class="line-number">241.</span>
		boardWidth = LARGEBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">242.</span>
		boardHeight = LARGEBOARDSIZE</p>

		<p class="noindent mono"><span class="line-number">243.</span>
		maxLife = LARGEMAXLIFE</p>

		<p class="noindent mono"><span class="line-number">244.</span>
		     elif pygame.Rect(14, 299, 371, 97).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">245.</span>
		<span class="comment"># clicked on the &quot;learn programming&quot; ad</span></p>

		<p class="noindent mono"><span class="line-number">246.</span>
		webbrowser.open('http://inventwithpython.com') <span class="comment">#
		opens a web browser</span></p>

		<p class="noindent mono"><span class="line-number">247.</span>
		elif pygame.Rect(178, 418, 215, 34).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">248.</span>
		<span class="comment"># clicked on the &quot;back to game&quot; button</span></p>

		<p class="noindent mono"><span class="line-number">249.</span>
		return not (origDifficulty == difficulty and origBoxSize == boxSize)</p>

		<p class="noindent mono"><span class="line-number">250. </span></p>

		<p class="noindent mono"><span class="line-number">251.</span>
		for i in range(len(COLORSCHEMES)):</p>

		<p class="noindent mono"><span class="line-number">252.</span>
		<span class="comment"># clicked on a color scheme button</span></p>

		<p class="noindent mono"><span class="line-number">253.</span>
		if pygame.Rect(500, 30 + i * 60, MEDIUMBOXSIZE * 3, MEDIUMBOXSIZE *
		2).collidepoint(mousex, mousey):</p>

		<p class="noindent mono"><span class="line-number">254.</span>
		bgColor = COLORSCHEMES[i][0]</p>

		<p class="noindent mono"><span class="line-number">255.</span>
		paletteColors  = COLORSCHEMES[i][1:]</p>

		<p class="noindent mono"><span class="line-number">256. </span></p>

		<p class="noindent mono"><span class="line-number">257. </span></p>

		<p class="noindent mono"><span class="line-number">258.</span>
		def drawColorSchemeBoxes(x, y, schemeNum):</p>

		<p class="noindent mono"><span class="line-number">259.</span>
		<span class="comment"># Draws the color scheme boxes that appear on the
		&quot;Settings&quot; screen.</span></p>

		<p class="noindent mono"><span class="line-number">260.</span>
		for boxy in range(2):</p>

		<p class="noindent mono"><span class="line-number">261.</span>
		    for boxx in range(3):</p>

		<p class="noindent mono"><span class="line-number">262.</span>
		pygame.draw.rect(DISPLAYSURF, COLORSCHEMES[schemeNum][3 * boxy + boxx + 1], (x
		+ MEDIUMBOXSIZE * boxx, y + MEDIUMBOXSIZE * boxy, MEDIUMBOXSIZE,
		MEDIUMBOXSIZE))</p>

		<p class="noindent mono"><span class="line-number">263.</span>
		if paletteColors == COLORSCHEMES[schemeNum][1:]:</p>

		<p class="noindent mono"><span class="line-number">264.</span>
		<span class="comment"># put the ink spot next to the selected color
		scheme</span></p>

		<p class="noindent mono"><span class="line-number">265.</span>
		DISPLAYSURF.blit(SPOTIMAGE, (x - 50, y))</p>

		<p class="noindent mono"><span class="line-number">266. </span></p>

		<p class="noindent mono"><span class="line-number">267. </span></p>

		<p class="noindent mono"><span class="line-number">268.</span>
		def flashBorderAnimation(color, board, animationSpeed=30):</p>

		<p class="noindent mono"><span class="line-number">269.</span>
		origSurf = DISPLAYSURF.copy()</p>

		<p class="noindent mono"><span class="line-number">270.</span>
		flashSurf = pygame.Surface(DISPLAYSURF.get_size())</p>

		<p class="noindent mono"><span class="line-number">271.</span>
		flashSurf = flashSurf.convert_alpha()</p>

		<p class="noindent mono"><span class="line-number">272.</span>
		for start, end, step in ((0, 256, 1), (255, 0, -1)):</p>

		<p class="noindent mono"><span class="line-number">273.</span>
		<span class="comment"># the first iteration on the outer loop will set
		the inner loop</span></p>

		<p class="noindent mono"><span class="line-number">274.</span>
		<span class="comment"># to have transparency go from 0 to 255, the
		second iteration will</span></p>

		<p class="noindent mono"><span class="line-number">275.</span>
		<span class="comment"># have it go from 255 to 0. This is the
		&quot;flash&quot;.</span></p>

		<p class="noindent mono"><span class="line-number">276.</span>
		for transparency in range(start, end, animationSpeed * step):</p>

		<p class="noindent mono"><span class="line-number">277.</span>
		DISPLAYSURF.blit(origSurf, (0, 0))</p>

		<p class="noindent mono"><span class="line-number">278.</span>
		r, g, b = color</p>

		<p class="noindent mono"><span class="line-number">279.</span>
		flashSurf.fill((r, g, b, transparency))</p>

		<p class="noindent mono"><span class="line-number">280.</span>
		DISPLAYSURF.blit(flashSurf, (0, 0))</p>

		<p class="noindent mono"><span class="line-number">281.</span>
		drawBoard(board) <span class="comment"># draw board ON TOP OF the
		transparency layer</span></p>

		<p class="noindent mono"><span class="line-number">282.</span>
		pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">283.</span>
		FPSCLOCK.tick(FPS)</p>

		<p class="noindent mono"><span class="line-number">284.</span>
		DISPLAYSURF.blit(origSurf, (0, 0)) <span class="comment"># redraw the
		original surface</span></p>

		<p class="noindent mono"><span class="line-number">285. </span></p>

		<p class="noindent mono"><span class="line-number">286. </span></p>

		<p class="noindent mono"><span class="line-number">287.</span>
		def floodAnimation(board, paletteClicked, animationSpeed=25):</p>

		<p class="noindent mono"><span class="line-number">288.</span>
		origBoard = copy.deepcopy(board)</p>

		<p class="noindent mono"><span class="line-number">289.</span>
		   floodFill(board, board[0][0], paletteClicked, 0, 0)</p>

		<p class="noindent mono"><span class="line-number">290. </span></p>

		<p class="noindent mono"><span class="line-number">291.</span>
		for transparency in range(0, 255, animationSpeed):</p>

		<p class="noindent mono"><span class="line-number">292.</span>
		<span class="comment"># The &quot;new&quot; board slowly become opaque
		over the original board.</span></p>

		<p class="noindent mono"><span class="line-number">293.</span>
		drawBoard(origBoard)</p>

		<p class="noindent mono"><span class="line-number">294.</span>
		drawBoard(board, transparency)</p>

		<p class="noindent mono"><span class="line-number">295.</span>
		pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">296.</span>
		FPSCLOCK.tick(FPS)</p>

		<p class="noindent mono"><span class="line-number">297. </span></p>

		<p class="noindent mono"><span class="line-number">298. </span></p>

		<p class="noindent mono"><span class="line-number">299.</span>
		def generateRandomBoard(width, height, difficulty=MEDIUM):</p>

		<p class="noindent mono"><span class="line-number">300.</span>
		<span class="comment"># Creates a board data structure with random
		colors for each box.</span></p>

		<p class="noindent mono"><span class="line-number">301.</span>
		board = []</p>

		<p class="noindent mono"><span class="line-number">302.</span>
		for x in range(width):</p>

		<p class="noindent mono"><span class="line-number">303.</span>
		column = []</p>

		<p class="noindent mono"><span class="line-number">304.</span>
		for y in range(height):</p>

		<p class="noindent mono"><span class="line-number">305.</span>
		column.append(random.randint(0, len(paletteColors) - 1))</p>

		<p class="noindent mono"><span class="line-number">306.</span>
		board.append(column)</p>

		<p class="noindent mono"><span class="line-number">307. </span></p>

		<p class="noindent mono"><span class="line-number">308.</span>
		<span class="comment"># Make board easier by setting some boxes to same
		color as a neighbor.</span></p>

		<p class="noindent mono"><span class="line-number">309. </span></p>

		<p class="noindent mono"><span class="line-number">310.</span>
		<span class="comment"># Determine how many boxes to change.</span></p>

		<p class="noindent mono"><span class="line-number">311.</span>
		if difficulty == EASY:</p>

		<p class="noindent mono"><span class="line-number">312.</span>
		if boxSize == SMALLBOXSIZE:</p>

		<p class="noindent mono"><span class="line-number">313.</span>
		boxesToChange = 100</p>

		<p class="noindent mono"><span class="line-number">314.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">315.</span>
		boxesToChange = 1500</p>

		<p class="noindent mono"><span class="line-number">316.</span>
		elif difficulty == MEDIUM:</p>

		<p class="noindent mono"><span class="line-number">317.</span>
		if boxSize == SMALLBOXSIZE:</p>

		<p class="noindent mono"><span class="line-number">318.</span>
		boxesToChange = 5</p>

		<p class="noindent mono"><span class="line-number">319.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">320.</span>
		boxesToChange = 200</p>

		<p class="noindent mono"><span class="line-number">321.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">322.</span>
		boxesToChange = 0</p>

		<p class="noindent mono"><span class="line-number">323. </span></p>

		<p class="noindent mono"><span class="line-number">324.</span>
		<span class="comment"># Change neighbor's colors:</span></p>

		<p class="noindent mono"><span class="line-number">325.</span>
		for i in range(boxesToChange):</p>

		<p class="noindent mono"><span class="line-number">326.</span>
		<span class="comment"># Randomly choose a box whose color to copy</span></p>

		<p class="noindent mono"><span class="line-number">327.</span>
		x = random.randint(1, width-2)</p>

		<p class="noindent mono"><span class="line-number">328.</span>
		y = random.randint(1, height-2)</p>

		<p class="noindent mono"><span class="line-number">329. </span></p>

		<p class="noindent mono"><span class="line-number">330.</span>
		<span class="comment"># Randomly choose neighbors to change.</span></p>

		<p class="noindent mono"><span class="line-number">331.</span>
		  direction = random.randint(0, 3)</p>

		<p class="noindent mono"><span class="line-number">332.</span>
		if direction == 0: <span class="comment"># change left and up neighbor</span></p>

		<p class="noindent mono"><span class="line-number">333.</span>
		board[x-1][y] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">334.</span>
		board[x][y-1] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">335.</span>
		elif direction == 1: <span class="comment"># change right and down
		neighbor</span></p>

		<p class="noindent mono"><span class="line-number">336.</span>
		board[x+1][y] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">337.</span>
		board[x][y+1] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">338.</span>
		elif direction == 2: <span class="comment"># change right and up
		neighbor</span></p>

		<p class="noindent mono"><span class="line-number">339.</span>
		board[x][y-1] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">340.</span>
		board[x+1][y] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">341.</span>
		      else: <span class="comment"># change left and down neighbor</span></p>

		<p class="noindent mono"><span class="line-number">342.</span>
		board[x][y+1] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">343.</span>
		board[x-1][y] == board[x][y]</p>

		<p class="noindent mono"><span class="line-number">344.</span>
		return board</p>

		<p class="noindent mono"><span class="line-number">345. </span></p>

		<p class="noindent mono"><span class="line-number">346. </span></p>

		<p class="noindent mono"><span class="line-number">347.</span>
		def drawLogoAndButtons():</p>

		<p class="noindent mono"><span class="line-number">348.</span>
		<span class="comment"># draw the Ink Spill logo and Settings and Reset
		buttons.</span></p>

		<p class="noindent mono"><span class="line-number">349.</span>
		DISPLAYSURF.blit(LOGOIMAGE, (WINDOWWIDTH - LOGOIMAGE.get_width(), 0))</p>

		<p class="noindent mono"><span class="line-number">350.</span>
		DISPLAYSURF.blit(SETTINGSBUTTONIMAGE, (WINDOWWIDTH - SETTINGSBUTTONIMAGE.get_width(),
		WINDOWHEIGHT - SETTINGSBUTTONIMAGE.get_height()))</p>

		<p class="noindent mono"><span class="line-number">351.</span>
		DISPLAYSURF.blit(RESETBUTTONIMAGE, (WINDOWWIDTH - RESETBUTTONIMAGE.get_width(),
		WINDOWHEIGHT - SETTINGSBUTTONIMAGE.get_height() - RESETBUTTONIMAGE.get_height()))</p>

		<p class="noindent mono"><span class="line-number">352. </span></p>

		<p class="noindent mono"><span class="line-number">353. </span></p>

		<p class="noindent mono"><span class="line-number">354.</span>
		def drawBoard(board, transparency=255):</p>

		<p class="noindent mono"><span class="line-number">355.</span>
		<span class="comment"># The colored squares are drawn to a temporary
		surface which is then</span></p>

		<p class="noindent mono"><span class="line-number">356.</span>
		<span class="comment"># drawn to the DISPLAYSURF surface. This is done
		so we can draw the</span></p>

		<p class="noindent mono"><span class="line-number">357.</span>
		<span class="comment"># squares with transparency on top of DISPLAYSURF
		as it currently is.</span></p>

		<p class="noindent mono"><span class="line-number">358.</span>
		tempSurf = pygame.Surface(DISPLAYSURF.get_size())</p>

		<p class="noindent mono"><span class="line-number">359.</span>
		tempSurf = tempSurf.convert_alpha()</p>

		<p class="noindent mono"><span class="line-number">360.</span>
		tempSurf.fill((0, 0, 0, 0))</p>

		<p class="noindent mono"><span class="line-number">361. </span></p>

		<p class="noindent mono"><span class="line-number">362.</span>
		for x in range(boardWidth):</p>

		<p class="noindent mono"><span class="line-number">363.</span>
		for y in range(boardHeight):</p>

		<p class="noindent mono"><span class="line-number">364.</span>
		left, top = leftTopPixelCoordOfBox(x, y)</p>

		<p class="noindent mono"><span class="line-number">365.</span>
		r, g, b = paletteColors[board[x][y]]</p>

		<p class="noindent mono"><span class="line-number">366.</span>
		pygame.draw.rect(tempSurf, (r, g, b, transparency), (left, top, boxSize,
		boxSize))</p>

		<p class="noindent mono"><span class="line-number">367.</span>
		left, top = leftTopPixelCoordOfBox(0, 0)</p>

		<p class="noindent mono"><span class="line-number">368.</span>
		pygame.draw.rect(tempSurf, BLACK, (left-1, top-1, boxSize * boardWidth + 1,
		boxSize * boardHeight + 1), 1)</p>

		<p class="noindent mono"><span class="line-number">369.</span>
		DISPLAYSURF.blit(tempSurf, (0, 0))</p>

		<p class="noindent mono"><span class="line-number">370. </span></p>

		<p class="noindent mono"><span class="line-number">371. </span></p>

		<p class="noindent mono"><span class="line-number">372.</span>
		def drawPalettes():</p>

		<p class="noindent mono"><span class="line-number">373.</span>
		<span class="comment"># Draws the six color palettes at the bottom of
		the screen.</span></p>

		<p class="noindent mono"><span class="line-number">374.</span>
		numColors = len(paletteColors)</p>

		<p class="noindent mono"><span class="line-number">375.</span>
		xmargin = int((WINDOWWIDTH - ((PALETTESIZE * numColors) + (PALETTEGAPSIZE *
		(numColors - 1)))) / 2)</p>

		<p class="noindent mono"><span class="line-number">376.</span>
		for i in range(numColors):</p>

		<p class="noindent mono"><span class="line-number">377.</span>
		left = xmargin + (i * PALETTESIZE) + (i * PALETTEGAPSIZE)</p>

		<p class="noindent mono"><span class="line-number">378.</span>
		top = WINDOWHEIGHT - PALETTESIZE - 10</p>

		<p class="noindent mono"><span class="line-number">379.</span>
		pygame.draw.rect(DISPLAYSURF, paletteColors[i], (left, top, PALETTESIZE,
		PALETTESIZE))</p>

		<p class="noindent mono"><span class="line-number">380.</span>
		pygame.draw.rect(DISPLAYSURF, bgColor,   (left + 2, top + 2, PALETTESIZE - 4,
		PALETTESIZE - 4), 2)</p>

		<p class="noindent mono"><span class="line-number">381. </span></p>

		<p class="noindent mono"><span class="line-number">382. </span></p>

		<p class="noindent mono"><span class="line-number">383.</span>
		def drawLifeMeter(currentLife):</p>

		<p class="noindent mono"><span class="line-number">384.</span>
		lifeBoxSize = int((WINDOWHEIGHT - 40) / maxLife)</p>

		<p class="noindent mono"><span class="line-number">385. </span></p>

		<p class="noindent mono"><span class="line-number">386.</span>
		<span class="comment"># Draw background color of life meter.</span></p>

		<p class="noindent mono"><span class="line-number">387.</span>
		pygame.draw.rect(DISPLAYSURF, bgColor, (20, 20, 20, 20 + (maxLife * lifeBoxSize)))</p>

		<p class="noindent mono"><span class="line-number">388. </span></p>

		<p class="noindent mono"><span class="line-number">389.</span>
		for i in range(maxLife):</p>

		<p class="noindent mono"><span class="line-number">390.</span>
		if currentLife &gt;= (maxLife - i): <span class="comment"># draw a
		solid red box</span></p>

		<p class="noindent mono"><span class="line-number">391.</span>
		pygame.draw.rect(DISPLAYSURF, RED, (20, 20 + (i * lifeBoxSize), 20,
		lifeBoxSize))</p>

		<p class="noindent mono"><span class="line-number">392.</span>
		pygame.draw.rect(DISPLAYSURF, WHITE, (20, 20 + (i * lifeBoxSize), 20,
		lifeBoxSize), 1) <span class="comment"># draw white outline</span></p>

		<p class="noindent mono"><span class="line-number">393. </span></p>

		<p class="noindent mono"><span class="line-number">394. </span></p>

		<p class="noindent mono"><span class="line-number">395.</span>
		def getColorOfPaletteAt(x, y):</p>

		<p class="noindent mono"><span class="line-number">396.</span>
		<span class="comment"># Returns the index of the color in paletteColors
		that the x and y parameters</span></p>

		<p class="noindent mono"><span class="line-number">397.</span>
		<span class="comment"># are over. Returns None if x and y are not over
		any palette.</span></p>

		<p class="noindent mono"><span class="line-number">398.</span>
		numColors = len(paletteColors)</p>

		<p class="noindent mono"><span class="line-number">399.</span>
		xmargin = int((WINDOWWIDTH - ((PALETTESIZE * numColors) + (PALETTEGAPSIZE *
		(numColors - 1)))) / 2)</p>

		<p class="noindent mono"><span class="line-number">400.</span>
		top = WINDOWHEIGHT - PALETTESIZE - 10</p>

		<p class="noindent mono"><span class="line-number">401.</span>
		for i in range(numColors):</p>

		<p class="noindent mono"><span class="line-number">402.</span>
		<span class="comment"># Find out if the mouse click is inside any of
		the palettes.</span></p>

		<p class="noindent mono"><span class="line-number">403.</span>
		      left = xmargin + (i * PALETTESIZE) + (i * PALETTEGAPSIZE)</p>

		<p class="noindent mono"><span class="line-number">404.</span>
		r = pygame.Rect(left, top, PALETTESIZE, PALETTESIZE)</p>

		<p class="noindent mono"><span class="line-number">405.</span>
		if r.collidepoint(x, y):</p>

		<p class="noindent mono"><span class="line-number">406.</span>
		return i</p>

		<p class="noindent mono"><span class="line-number">407.</span>
		return None <span class="comment"># no palette exists at these x, y
		coordinates</span></p>

		<p class="noindent mono"><span class="line-number">408. </span></p>

		<p class="noindent mono"><span class="line-number">409. </span></p>

		<p class="noindent mono"><span class="line-number">410.</span>
		def floodFill(board, oldColor, newColor, x, y):</p>

		<p class="noindent mono"><span class="line-number">411.</span>
		<span class="comment"># This is the flood fill algorithm.</span></p>

		<p class="noindent mono"><span class="line-number">412.</span>
		if oldColor == newColor or board[x][y] != oldColor:</p>

		<p class="noindent mono"><span class="line-number">413.</span>
		return</p>

		<p class="noindent mono"><span class="line-number">414. </span></p>

		<p class="noindent mono"><span class="line-number">415.</span>
		board[x][y] = newColor <span class="comment"># change the color of the
		current box</span></p>

		<p class="noindent mono"><span class="line-number">416. </span></p>

		<p class="noindent mono"><span class="line-number">417.</span>
		<span class="comment"># Make the recursive call for any neighboring
		boxes:</span></p>

		<p class="noindent mono"><span class="line-number">418.</span>
		if x &gt; 0:</p>

		<p class="noindent mono"><span class="line-number">419.</span>
		floodFill(board, oldColor, newColor, x - 1, y) <span class="comment">#
		on box to the left</span></p>

		<p class="noindent mono"><span class="line-number">420.</span>
		if x &lt; boardWidth - 1:</p>

		<p class="noindent mono"><span class="line-number">421.</span>
		floodFill(board, oldColor, newColor, x + 1, y) <span class="comment">#
		on box to the right</span></p>

		<p class="noindent mono"><span class="line-number">422.</span>
		if y &gt; 0:</p>

		<p class="noindent mono"><span class="line-number">423.</span>
		floodFill(board, oldColor, newColor, x, y - 1) <span class="comment">#
		on box to up</span></p>

		<p class="noindent mono"><span class="line-number">424.</span>
		if y &lt; boardHeight - 1:</p>

		<p class="noindent mono"><span class="line-number">425.</span>
		floodFill(board, oldColor, newColor, x, y + 1) <span class="comment">#
		on box to down</span></p>

		<p class="noindent mono"><span class="line-number">426. </span></p>

		<p class="noindent mono"><span class="line-number">427. </span></p>

		<p class="noindent mono"><span class="line-number">428.</span>
		def leftTopPixelCoordOfBox(boxx, boxy):</p>

		<p class="noindent mono"><span class="line-number">429.</span>
		<span class="comment"># Returns the x and y of the left-topmost pixel
		of the xth &amp; yth box.</span></p>

		<p class="noindent mono"><span class="line-number">430.</span>
		xmargin = int((WINDOWWIDTH - (boardWidth * boxSize)) / 2)</p>

		<p class="noindent mono"><span class="line-number">431.</span>
		ymargin = int((WINDOWHEIGHT - (boardHeight * boxSize)) / 2)</p>

		<p class="noindent mono"><span class="line-number">432.</span>
		return (boxx * boxSize + xmargin, boxy * boxSize + ymargin)</p>
		<p class="noindent mono"><span class="line-number">433.</span></p>
		<p class="noindent mono"><span class="line-number">434.</span></p>
		<p class="noindent mono"><span class="line-number">435.</span> if __name__ == '__main__':</p>
		<p class="noindent mono"><span class="line-number">436.</span> main()</p>
	</div>

	<h1 class="subheading" id="four">Four-In-A-Row, a “Connect Four” Clone</h1>
	<p class="noindent">The game <i>“Connect Four”</i> has a 7 × 6 board where the players take turns dropping tokens from the top of the board. The tokens will fall from the top of each column and come to rest on the bottom of the board or on top of the topmost token in that column. A player wins when four of their tokens line up in a row either horizontally, vertically, or diagonally.</p>
	<p>The AI for this game is pretty good. It simulates every possible move it can make, then simulates every possible move the human player can make in response to each of those moves, and then simulates every possible move it can make <i>in response to that</i>, and then simulates every possible move the human player could make <i>in response to each of those moves!</i> After all that thinking, the computer determines which move is most likely to lead to it winning.</p>
	<p>So the computer is kind of tough to beat. I usually lose to it.</p>
	<p>Since there are seven possible moves you can make on your turn (unless some columns are full), and seven possible moves the opponent could make, and seven moves in response to that, and seven moves in response to that, that means that on each turn the computer is considering 7 × 7 × 7 × 7 = 2,401 possible moves. You can make the computer consider the game even further by setting the <span class="mono">DIFFICULTY</span> constant to a higher number, but when I set to a value larger than <span class="mono">2</span>, the computer takes a long time to calculate its turn.</p>
	<p>You can also make the computer easier by setting <span class="mono">DIFFICULTY</span> to <span class="mono">1</span>. Then the computer only considers each of its moves and the player’s possible responses to those moves. If you set the <span class="mono">DIFFICULTY</span> to <span class="mono">0</span>, then the computer loses all intelligence and simply makes random moves.</p>

	<h1 class="subheading" id="four-source">Source Code for Four-In-A-Row</h1>
	<p class="noindent">This source code can be downloaded from <a href="https://invpy.com/fourinarow.py">https://invpy.com/fourinarow.py</a>.</p>
	<p>The image files that Four-In-A-Row uses can be downloaded from <a href="https://invpy.com/fourinarowimages.zip">https://invpy.com/fourinarowimages.zip</a>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">1.</span> <span class="comment"># Four-In-A-Row (a Connect Four clone)</span></p>
		<p class="noindent mono"><span class="line-number">2.</span> <span class="comment"># By Al Sweigart al@inventwithpython.com</span></p>
		<p class="noindent mono"><span class="line-number">3.</span> <span class="comment"># http://inventwithpython.com/pygame</span></p>
		<p class="noindent mono"><span class="line-number">4.</span> <span class="comment"># Released under a &quot;Simplified BSD&quot; license</span></p>
		<p class="noindent mono"><span class="line-number">5. </span></p>
		<p class="noindent mono"><span class="line-number">6.</span> import random, copy, sys, pygame</p>
		<p class="noindent mono"><span class="line-number">7.</span> from pygame.locals import *</p>
		<p class="noindent mono"><span class="line-number">8. </span></p>
		<p class="noindent mono"><span class="line-number">9.</span> BOARDWIDTH = 7  <span class="comment"># how many spaces wide the board is</span></p>
		<p class="noindent mono"><span class="line-number">10.</span> BOARDHEIGHT = 6 <span class="comment"># how many spaces tall the board is</span></p>

		<p class="noindent mono"><span class="line-number">11.</span>
assert BOARDWIDTH &gt;= 4 and BOARDHEIGHT &gt;= 4, 'Board must be at least
4x4.'</p>

		<p class="noindent mono"><span class="line-number">12.</span></p>

		<p class="noindent mono"><span class="line-number">13.</span>
DIFFICULTY = 2 <span class="comment"># how many moves to look ahead.
(&gt;2 is usually too slow)</span></p>

		<p class="noindent mono"><span class="line-number">14.</span></p>

		<p class="noindent mono"><span class="line-number">15.</span>
SPACESIZE = 50 <span class="comment"># size of the tokens and
individual board spaces in pixels</span></p>

		<p class="noindent mono"><span class="line-number">16.</span></p>

		<p class="noindent mono"><span class="line-number">17.</span>
FPS = 30 <span class="comment"># frames per second to update the screen</span></p>

		<p class="noindent mono"><span class="line-number">18.</span>
WINDOWWIDTH = 640 <span class="comment"># width of the program's
window, in pixels</span></p>

		<p class="noindent mono"><span class="line-number">19.</span>
WINDOWHEIGHT = 480 <span class="comment"># height in pixels</span></p>

		<p class="noindent mono"><span class="line-number">20.</span></p>

		<p class="noindent mono"><span class="line-number">21.</span>
XMARGIN = int((WINDOWWIDTH - BOARDWIDTH * SPACESIZE) / 2)</p>

		<p class="noindent mono"><span class="line-number">22.</span>
YMARGIN = int((WINDOWHEIGHT - BOARDHEIGHT * SPACESIZE) / 2)</p>

		<p class="noindent mono"><span class="line-number">23.</span></p>

		<p class="noindent mono"><span class="line-number">24.</span>
BRIGHTBLUE = (0, 50, 255)</p>

		<p class="noindent mono"><span class="line-number">25.</span>
WHITE = (255, 255, 255)</p>

		<p class="noindent mono"><span class="line-number">26.</span></p>

		<p class="noindent mono"><span class="line-number">27.</span>
BGCOLOR = BRIGHTBLUE</p>

		<p class="noindent mono"><span class="line-number">28.</span>
TEXTCOLOR = WHITE</p>

		<p class="noindent mono"><span class="line-number">29.</span></p>

		<p class="noindent mono"><span class="line-number">30.</span>
RED = 'red'</p>

		<p class="noindent mono"><span class="line-number">31.</span>
BLACK = 'black'</p>

		<p class="noindent mono"><span class="line-number">32.</span>
EMPTY = None</p>

		<p class="noindent mono"><span class="line-number">33.</span>
HUMAN = 'human'</p>

		<p class="noindent mono"><span class="line-number">34.</span>
COMPUTER = 'computer'</p>

		<p class="noindent mono"><span class="line-number">35.</span></p>

		<p class="noindent mono"><span class="line-number">36.</span></p>

		<p class="noindent mono"><span class="line-number">37.</span>
def main():</p>

		<p class="noindent mono"><span class="line-number">38.</span>
global FPSCLOCK, DISPLAYSURF, REDPILERECT, BLACKPILERECT, REDTOKENIMG</p>

		<p class="noindent mono"><span class="line-number">39.</span>
global BLACKTOKENIMG, BOARDIMG, ARROWIMG, ARROWRECT, HUMANWINNERIMG</p>

		<p class="noindent mono"><span class="line-number">40.</span>
global COMPUTERWINNERIMG, WINNERRECT, TIEWINNERIMG</p>

		<p class="noindent mono"><span class="line-number">41.</span></p>

		<p class="noindent mono"><span class="line-number">42.</span>
pygame.init()</p>

		<p class="noindent mono"><span class="line-number">43.</span>
FPSCLOCK = pygame.time.Clock()</p>

		<p class="noindent mono"><span class="line-number">44.</span>
DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">45.</span>
pygame.display.set_caption('Four in a Row')</p>

		<p class="noindent mono"><span class="line-number">46.</span></p>

		<p class="noindent mono"><span class="line-number">47.</span>
REDPILERECT = pygame.Rect(int(SPACESIZE / 2), WINDOWHEIGHT - int(3 * SPACESIZE
/ 2), SPACESIZE, SPACESIZE)</p>

		<p class="noindent mono"><span class="line-number">48.</span>
BLACKPILERECT = pygame.Rect(WINDOWWIDTH - int(3 * SPACESIZE / 2), WINDOWHEIGHT
- int(3 * SPACESIZE / 2), SPACESIZE, SPACESIZE)</p>

		<p class="noindent mono"><span class="line-number">49.</span>
REDTOKENIMG = pygame.image.load('4row_red.png')</p>

		<p class="noindent mono"><span class="line-number">50.</span>
REDTOKENIMG = pygame.transform.smoothscale(REDTOKENIMG, (SPACESIZE, SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">51.</span>
BLACKTOKENIMG = pygame.image.load('4row_black.png')</p>

		<p class="noindent mono"><span class="line-number">52.</span>
BLACKTOKENIMG = pygame.transform.smoothscale(BLACKTOKENIMG, (SPACESIZE,
SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">53.</span>
BOARDIMG = pygame.image.load('4row_board.png')</p>

		<p class="noindent mono"><span class="line-number">54.</span>
BOARDIMG = pygame.transform.smoothscale(BOARDIMG, (SPACESIZE, SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">55.</span></p>

		<p class="noindent mono"><span class="line-number">56.</span>
HUMANWINNERIMG = pygame.image.load('4row_humanwinner.png')</p>

		<p class="noindent mono"><span class="line-number">57.</span>
COMPUTERWINNERIMG = pygame.image.load('4row_computerwinner.png')</p>

		<p class="noindent mono"><span class="line-number">58.</span>
TIEWINNERIMG = pygame.image.load('4row_tie.png')</p>

		<p class="noindent mono"><span class="line-number">59.</span>
WINNERRECT = HUMANWINNERIMG.get_rect()</p>

		<p class="noindent mono"><span class="line-number">60.</span>
WINNERRECT.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))</p>

		<p class="noindent mono"><span class="line-number">61.</span></p>

		<p class="noindent mono"><span class="line-number">62.</span>
ARROWIMG = pygame.image.load('4row_arrow.png')</p>

		<p class="noindent mono"><span class="line-number">63.</span>
ARROWRECT = ARROWIMG.get_rect()</p>

		<p class="noindent mono"><span class="line-number">64.</span>
ARROWRECT.left = REDPILERECT.right + 10</p>

		<p class="noindent mono"><span class="line-number">65.</span>
ARROWRECT.centery = REDPILERECT.centery</p>

		<p class="noindent mono"><span class="line-number">66.</span></p>

		<p class="noindent mono"><span class="line-number">67.</span>
isFirstGame = True</p>

		<p class="noindent mono"><span class="line-number">68.</span></p>

		<p class="noindent mono"><span class="line-number">69.</span>
while True:</p>

		<p class="noindent mono"><span class="line-number">70.</span>
runGame(isFirstGame)</p>

		<p class="noindent mono"><span class="line-number">71.</span>
isFirstGame = False</p>

		<p class="noindent mono"><span class="line-number">72.</span></p>

		<p class="noindent mono"><span class="line-number">73.</span></p>

		<p class="noindent mono"><span class="line-number">74.</span>
def runGame(isFirstGame):</p>

		<p class="noindent mono"><span class="line-number">75.</span>
if isFirstGame:</p>

		<p class="noindent mono"><span class="line-number">76.</span>
<span class="comment"># Let the computer go first on the first game, so
the player</span></p>

		<p class="noindent mono"><span class="line-number">77.</span>
<span class="comment"># can see how the tokens are dragged from the
token piles.</span></p>

		<p class="noindent mono"><span class="line-number">78.</span>
turn = COMPUTER</p>

		<p class="noindent mono"><span class="line-number">79.</span>
showHelp = True</p>

		<p class="noindent mono"><span class="line-number">80.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">81.</span>
<span class="comment"># Randomly choose who goes first.</span></p>

		<p class="noindent mono"><span class="line-number">82.</span>
if random.randint(0, 1) == 0:</p>

		<p class="noindent mono"><span class="line-number">83.</span>
turn = COMPUTER</p>

		<p class="noindent mono"><span class="line-number">84.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">85.</span>
turn = HUMAN</p>

		<p class="noindent mono"><span class="line-number">86.</span>
showHelp = False</p>

		<p class="noindent mono"><span class="line-number">87.</span></p>

		<p class="noindent mono"><span class="line-number">88.</span>
<span class="comment"># Set up a blank board data structure.</span></p>

		<p class="noindent mono"><span class="line-number">89.</span>
mainBoard = getNewBoard()</p>

		<p class="noindent mono"><span class="line-number">90.</span></p>

		<p class="noindent mono"><span class="line-number">91.</span>
while True: <span class="comment"># main game loop</span></p>

		<p class="noindent mono"><span class="line-number">92.</span>
if turn == HUMAN:</p>

		<p class="noindent mono"><span class="line-number">93.</span>
<span class="comment"># Human player's turn.</span></p>

		<p class="noindent mono"><span class="line-number">94.</span>
getHumanMove(mainBoard, showHelp)</p>

		<p class="noindent mono"><span class="line-number">95.</span>
if showHelp:</p>

		<p class="noindent mono"><span class="line-number">96.</span>
<span class="comment"># turn off help arrow after the first move</span></p>

		<p class="noindent mono"><span class="line-number">97.</span>
showHelp = False</p>

		<p class="noindent mono"><span class="line-number">98.</span>
if isWinner(mainBoard, RED):</p>

		<p class="noindent mono"><span class="line-number">99.</span>
winnerImg = HUMANWINNERIMG</p>

		<p class="noindent mono"><span class="line-number">100.</span>
break</p>

		<p class="noindent mono"><span class="line-number">101.</span>
turn = COMPUTER <span class="comment"># switch to other player's turn</span></p>

		<p class="noindent mono"><span class="line-number">102.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">103.</span>
<span class="comment"># Computer player's turn.</span></p>

		<p class="noindent mono"><span class="line-number">104.</span>
      column = getComputerMove(mainBoard)</p>

		<p class="noindent mono"><span class="line-number">105.</span>
animateComputerMoving(mainBoard, column)</p>

		<p class="noindent mono"><span class="line-number">106.</span>
makeMove(mainBoard, BLACK, column)</p>

		<p class="noindent mono"><span class="line-number">107.</span>
if isWinner(mainBoard, BLACK):</p>

		<p class="noindent mono"><span class="line-number">108.</span>
winnerImg = COMPUTERWINNERIMG</p>

		<p class="noindent mono"><span class="line-number">109.</span>                 break</p>

		<p class="noindent mono"><span class="line-number">110.</span>
turn = HUMAN <span class="comment"># switch to other player's turn</span></p>

		<p class="noindent mono"><span class="line-number">111. </span></p>

		<p class="noindent mono"><span class="line-number">112.</span>
if isBoardFull(mainBoard):</p>

		<p class="noindent mono"><span class="line-number">113.</span>
<span class="comment"># A completely filled board means it's a tie.</span></p>

		<p class="noindent mono"><span class="line-number">114.</span>
winnerImg = TIEWINNERIMG</p>

		<p class="noindent mono"><span class="line-number">115.</span>
break</p>

		<p class="noindent mono"><span class="line-number">116. </span></p>

		<p class="noindent mono"><span class="line-number">117.</span>
while True:</p>

		<p class="noindent mono"><span class="line-number">118.</span>
<span class="comment"># Keep looping until player clicks the mouse or
quits.</span></p>

		<p class="noindent mono"><span class="line-number">119.</span>
drawBoard(mainBoard)</p>

		<p class="noindent mono"><span class="line-number">120.</span>
DISPLAYSURF.blit(winnerImg, WINNERRECT)</p>

		<p class="noindent mono"><span class="line-number">121.</span>
pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">122.</span>
FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">123.</span>
       for event in pygame.event.get(): <span class="comment"># event
handling loop</span></p>

		<p class="noindent mono"><span class="line-number">124.</span>
if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):</p>

		<p class="noindent mono"><span class="line-number">125.</span>
pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">126.</span>
sys.exit()</p>

		<p class="noindent mono"><span class="line-number">127.</span>
elif event.type == MOUSEBUTTONUP:</p>

		<p class="noindent mono"><span class="line-number">128.</span>
return</p>

		<p class="noindent mono"><span class="line-number">129. </span></p>

		<p class="noindent mono"><span class="line-number">130. </span></p>

		<p class="noindent mono"><span class="line-number">131.</span>
def makeMove(board, player, column):</p>

		<p class="noindent mono"><span class="line-number">132.</span>
lowest = getLowestEmptySpace(board, column)</p>

		<p class="noindent mono"><span class="line-number">133.</span>
if lowest != -1:</p>

		<p class="noindent mono"><span class="line-number">134.</span>
board[column][lowest] = player</p>

		<p class="noindent mono"><span class="line-number">135. </span></p>

		<p class="noindent mono"><span class="line-number">136. </span></p>

		<p class="noindent mono"><span class="line-number">137.</span>
def drawBoard(board, extraToken=None):</p>

		<p class="noindent mono"><span class="line-number">138.</span>
DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">139. </span></p>

		<p class="noindent mono"><span class="line-number">140.</span>
<span class="comment"># draw tokens</span></p>

		<p class="noindent mono"><span class="line-number">141.</span>
spaceRect = pygame.Rect(0, 0, SPACESIZE, SPACESIZE)</p>

		<p class="noindent mono"><span class="line-number">142.</span>
for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">143.</span>
for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">144.</span>
spaceRect.topleft = (XMARGIN + (x * SPACESIZE), YMARGIN + (y * SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">145.</span>
if board[x][y] == RED:</p>

		<p class="noindent mono"><span class="line-number">146.</span>
DISPLAYSURF.blit(REDTOKENIMG, spaceRect)</p>

		<p class="noindent mono"><span class="line-number">147.</span>
elif board[x][y] == BLACK:</p>

		<p class="noindent mono"><span class="line-number">148.</span>
DISPLAYSURF.blit(BLACKTOKENIMG, spaceRect)</p>

		<p class="noindent mono"><span class="line-number">149. </span></p>

		<p class="noindent mono"><span class="line-number">150.</span>
<span class="comment"># draw the extra token</span></p>

		<p class="noindent mono"><span class="line-number">151.</span>
if extraToken != None:</p>

		<p class="noindent mono"><span class="line-number">152.</span>
if extraToken['color'] == RED:</p>

		<p class="noindent mono"><span class="line-number">153.</span>
DISPLAYSURF.blit(REDTOKENIMG, (extraToken['x'], extraToken['y'], SPACESIZE,
SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">154.</span>
elif extraToken['color'] == BLACK:</p>

		<p class="noindent mono"><span class="line-number">155.</span>
DISPLAYSURF.blit(BLACKTOKENIMG, (extraToken['x'], extraToken['y'], SPACESIZE,
SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">156. </span></p>

		<p class="noindent mono"><span class="line-number">157.</span>
<span class="comment"># draw board over the tokens</span></p>

		<p class="noindent mono"><span class="line-number">158.</span>
for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">159.</span>
for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">160.</span>
spaceRect.topleft = (XMARGIN + (x * SPACESIZE), YMARGIN + (y * SPACESIZE))</p>

		<p class="noindent mono"><span class="line-number">161.</span>
DISPLAYSURF.blit(BOARDIMG, spaceRect)</p>

		<p class="noindent mono"><span class="line-number">162. </span></p>

		<p class="noindent mono"><span class="line-number">163.</span>
<span class="comment"># draw the red and black tokens off to the side</span></p>

		<p class="noindent mono"><span class="line-number">164.</span>
DISPLAYSURF.blit(REDTOKENIMG, REDPILERECT) <span class="comment"># red
on the left</span></p>

		<p class="noindent mono"><span class="line-number">165.</span>
DISPLAYSURF.blit(BLACKTOKENIMG, BLACKPILERECT) <span class="comment">#
black on the right</span></p>

		<p class="noindent mono"><span class="line-number">166. </span></p>

		<p class="noindent mono"><span class="line-number">167. </span></p>

		<p class="noindent mono"><span class="line-number">168.</span>
def getNewBoard():</p>

		<p class="noindent mono"><span class="line-number">169.</span>
board = []</p>

		<p class="noindent mono"><span class="line-number">170.</span>
for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">171.</span>
board.append([EMPTY] * BOARDHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">172.</span>
return board</p>

		<p class="noindent mono"><span class="line-number">173. </span></p>

		<p class="noindent mono"><span class="line-number">174. </span></p>

		<p class="noindent mono"><span class="line-number">175.</span>
def getHumanMove(board, isFirstMove):</p>

		<p class="noindent mono"><span class="line-number">176.</span>
draggingToken = False</p>

		<p class="noindent mono"><span class="line-number">177.</span>
tokenx, tokeny = None, None</p>

		<p class="noindent mono"><span class="line-number">178.</span>
while True:</p>

		<p class="noindent mono"><span class="line-number">179.</span>
for event in pygame.event.get(): <span class="comment"># event handling
loop</span></p>

		<p class="noindent mono"><span class="line-number">180.</span>
if event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">181.</span>
pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">182.</span>
sys.exit()</p>

		<p class="noindent mono"><span class="line-number">183.</span>
elif event.type == MOUSEBUTTONDOWN and not draggingToken and REDPILERECT.collidepoint(event.pos):</p>

		<p class="noindent mono"><span class="line-number">184.</span>
<span class="comment"># start of dragging on red token pile.</span></p>

		<p class="noindent mono"><span class="line-number">185.</span>
           draggingToken = True</p>

		<p class="noindent mono"><span class="line-number">186.</span>
tokenx, tokeny = event.pos</p>

		<p class="noindent mono"><span class="line-number">187.</span>
elif event.type == MOUSEMOTION and draggingToken:</p>

		<p class="noindent mono"><span class="line-number">188.</span>
<span class="comment"># update the position of the red token being
dragged</span></p>

		<p class="noindent mono"><span class="line-number">189.</span>
tokenx, tokeny = event.pos</p>

		<p class="noindent mono"><span class="line-number">190.</span>
elif event.type == MOUSEBUTTONUP and draggingToken:</p>

		<p class="noindent mono"><span class="line-number">191.</span>
<span class="comment"># let go of the token being dragged</span></p>

		<p class="noindent mono"><span class="line-number">192.</span>
if tokeny &lt; YMARGIN and tokenx &gt; XMARGIN and tokenx &lt; WINDOWWIDTH -
XMARGIN:</p>

		<p class="noindent mono"><span class="line-number">193.</span>
      <span class="comment"># let go at the top of the screen.</span></p>

		<p class="noindent mono"><span class="line-number">194.</span>
column = int((tokenx - XMARGIN) / SPACESIZE)</p>

		<p class="noindent mono"><span class="line-number">195.</span>
if isValidMove(board, column):</p>

		<p class="noindent mono"><span class="line-number">196.</span>
animateDroppingToken(board, column, RED)</p>

		<p class="noindent mono"><span class="line-number">197.</span>
          board[column][getLowestEmptySpace(board, column)] = RED</p>

		<p class="noindent mono"><span class="line-number">198.</span>
drawBoard(board)</p>

		<p class="noindent mono"><span class="line-number">199.</span>
pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">200.</span>
return</p>

		<p class="noindent mono"><span class="line-number">201.</span>
tokenx, tokeny = None, None</p>

		<p class="noindent mono"><span class="line-number">202.</span>
               draggingToken = False</p>

		<p class="noindent mono"><span class="line-number">203.</span>
if tokenx != None and tokeny != None:</p>

		<p class="noindent mono"><span class="line-number">204.</span>
drawBoard(board, {'x':tokenx - int(SPACESIZE / 2), 'y':tokeny - int(SPACESIZE /
2), 'color':RED})</p>

		<p class="noindent mono"><span class="line-number">205.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">206.</span>
drawBoard(board)</p>

		<p class="noindent mono"><span class="line-number">207. </span></p>

		<p class="noindent mono"><span class="line-number">208.</span>
if isFirstMove:</p>

		<p class="noindent mono"><span class="line-number">209.</span>
<span class="comment"># Show the help arrow for the player's first
move.</span></p>

		<p class="noindent mono"><span class="line-number">210.</span>
DISPLAYSURF.blit(ARROWIMG, ARROWRECT)</p>

		<p class="noindent mono"><span class="line-number">211. </span></p>

		<p class="noindent mono"><span class="line-number">212.</span>
pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">213.</span>
FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">214. </span></p>

		<p class="noindent mono"><span class="line-number">215. </span></p>

		<p class="noindent mono"><span class="line-number">216.</span>
def animateDroppingToken(board, column, color):</p>

		<p class="noindent mono"><span class="line-number">217.</span>
x = XMARGIN + column * SPACESIZE</p>

		<p class="noindent mono"><span class="line-number">218.</span>
y = YMARGIN - SPACESIZE</p>

		<p class="noindent mono"><span class="line-number">219.</span>
dropSpeed = 1.0</p>

		<p class="noindent mono"><span class="line-number">220. </span></p>

		<p class="noindent mono"><span class="line-number">221.</span>
lowestEmptySpace = getLowestEmptySpace(board, column)</p>

		<p class="noindent mono"><span class="line-number">222. </span></p>

		<p class="noindent mono"><span class="line-number">223.</span>
while True:</p>

		<p class="noindent mono"><span class="line-number">224.</span>
y += int(dropSpeed)</p>

		<p class="noindent mono"><span class="line-number">225.</span>
dropSpeed += 0.5</p>

		<p class="noindent mono"><span class="line-number">226.</span>
if int((y - YMARGIN) / SPACESIZE) &gt;= lowestEmptySpace:</p>

		<p class="noindent mono"><span class="line-number">227.</span>
return</p>

		<p class="noindent mono"><span class="line-number">228.</span>
drawBoard(board, {'x':x, 'y':y, 'color':color})</p>

		<p class="noindent mono"><span class="line-number">229.</span>
pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">230.</span>
FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">231. </span></p>

		<p class="noindent mono"><span class="line-number">232. </span></p>

		<p class="noindent mono"><span class="line-number">233.</span>
def animateComputerMoving(board, column):</p>

		<p class="noindent mono"><span class="line-number">234.</span>
x = BLACKPILERECT.left</p>

		<p class="noindent mono"><span class="line-number">235.</span>
y = BLACKPILERECT.top</p>

		<p class="noindent mono"><span class="line-number">236.</span>
speed = 1.0</p>

		<p class="noindent mono"><span class="line-number">237.</span>
<span class="comment"># moving the black tile up</span></p>

		<p class="noindent mono"><span class="line-number">238.</span>
while y &gt; (YMARGIN - SPACESIZE):</p>

		<p class="noindent mono"><span class="line-number">239.</span>
y -= int(speed)</p>

		<p class="noindent mono"><span class="line-number">240.</span>
speed += 0.5</p>

		<p class="noindent mono"><span class="line-number">241.</span>
drawBoard(board, {'x':x, 'y':y, 'color':BLACK})</p>

		<p class="noindent mono"><span class="line-number">242.</span>
pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">243.</span>
FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">244.</span>
<span class="comment"># moving the black tile over</span></p>

		<p class="noindent mono"><span class="line-number">245.</span>
y = YMARGIN - SPACESIZE</p>

		<p class="noindent mono"><span class="line-number">246.</span>
speed = 1.0</p>

		<p class="noindent mono"><span class="line-number">247.</span>
while x &gt; (XMARGIN + column * SPACESIZE):</p>

		<p class="noindent mono"><span class="line-number">248.</span>
x -= int(speed)</p>

		<p class="noindent mono"><span class="line-number">249.</span>
speed += 0.5</p>

		<p class="noindent mono"><span class="line-number">250.</span>
drawBoard(board, {'x':x, 'y':y, 'color':BLACK})</p>

		<p class="noindent mono"><span class="line-number">251.</span>
pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">252.</span>
FPSCLOCK.tick()</p>

		<p class="noindent mono"><span class="line-number">253.</span>
<span class="comment"># dropping the black tile</span></p>

		<p class="noindent mono"><span class="line-number">254.</span>
animateDroppingToken(board, column, BLACK)</p>

		<p class="noindent mono"><span class="line-number">255. </span></p>

		<p class="noindent mono"><span class="line-number">256. </span></p>

		<p class="noindent mono"><span class="line-number">257.</span>
def getComputerMove(board):</p>

		<p class="noindent mono"><span class="line-number">258.</span>
potentialMoves = getPotentialMoves(board, BLACK, DIFFICULTY)</p>

		<p class="noindent mono"><span class="line-number">259.</span>
<span class="comment"># get the best fitness from the potential moves</span></p>

		<p class="noindent mono"><span class="line-number">260.</span>
bestMoveFitness = -1</p>

		<p class="noindent mono"><span class="line-number">261.</span>
for i in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">262.</span>
if potentialMoves[i] &gt; bestMoveFitness and isValidMove(board, i):</p>

		<p class="noindent mono"><span class="line-number">263.</span>
bestMoveFitness = potentialMoves[i]</p>

		<p class="noindent mono"><span class="line-number">264.</span>
<span class="comment"># find all potential moves that have this best fitness</span></p>

		<p class="noindent mono"><span class="line-number">265.</span>
bestMoves = []</p>

		<p class="noindent mono"><span class="line-number">266.</span>
for i in range(len(potentialMoves)):</p>

		<p class="noindent mono"><span class="line-number">267.</span>
if potentialMoves[i] == bestMoveFitness and isValidMove(board, i):</p>

		<p class="noindent mono"><span class="line-number">268.</span>
bestMoves.append(i)</p>

		<p class="noindent mono"><span class="line-number">269.</span>
return random.choice(bestMoves)</p>

		<p class="noindent mono"><span class="line-number">270. </span></p>

		<p class="noindent mono"><span class="line-number">271. </span></p>

		<p class="noindent mono"><span class="line-number">272.</span>
def getPotentialMoves(board, tile, lookAhead):</p>

		<p class="noindent mono"><span class="line-number">273.</span>
if lookAhead == 0 or isBoardFull(board):</p>

		<p class="noindent mono"><span class="line-number">274.</span>
return [0] * BOARDWIDTH</p>

		<p class="noindent mono"><span class="line-number">275. </span></p>

		<p class="noindent mono"><span class="line-number">276.</span>
if tile == RED:</p>

		<p class="noindent mono"><span class="line-number">277.</span>
enemyTile = BLACK</p>

		<p class="noindent mono"><span class="line-number">278.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">279.</span>
enemyTile = RED</p>

		<p class="noindent mono"><span class="line-number">280. </span></p>

		<p class="noindent mono"><span class="line-number">281.</span>
<span class="comment"># Figure out the best move to make.</span></p>

		<p class="noindent mono"><span class="line-number">282.</span>
potentialMoves = [0] * BOARDWIDTH</p>

		<p class="noindent mono"><span class="line-number">283.</span>
for firstMove in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">284.</span>
dupeBoard = copy.deepcopy(board)</p>

		<p class="noindent mono"><span class="line-number">285.</span>
if not isValidMove(dupeBoard, firstMove):</p>

		<p class="noindent mono"><span class="line-number">286.</span>
continue</p>

		<p class="noindent mono"><span class="line-number">287.</span>
makeMove(dupeBoard, tile, firstMove)</p>

		<p class="noindent mono"><span class="line-number">288.</span>
if isWinner(dupeBoard, tile):</p>

		<p class="noindent mono"><span class="line-number">289.</span>
<span class="comment"># a winning move automatically gets a perfect fitness</span></p>

		<p class="noindent mono"><span class="line-number">290.</span>
potentialMoves[firstMove] = 1</p>

		<p class="noindent mono"><span class="line-number">291.</span>
break <span class="comment"># don't bother calculating other moves</span></p>

		<p class="noindent mono"><span class="line-number">292.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">293.</span>
           <span class="comment"># do other player's counter moves and
determine best one</span></p>

		<p class="noindent mono"><span class="line-number">294.</span>
if isBoardFull(dupeBoard):</p>

		<p class="noindent mono"><span class="line-number">295.</span>
potentialMoves[firstMove] = 0</p>

		<p class="noindent mono"><span class="line-number">296.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">297.</span>
for counterMove in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">298.</span>
              dupeBoard2 = copy.deepcopy(dupeBoard)</p>

		<p class="noindent mono"><span class="line-number">299.</span>
if not isValidMove(dupeBoard2, counterMove):</p>

		<p class="noindent mono"><span class="line-number">300.</span>
continue</p>

		<p class="noindent mono"><span class="line-number">301.</span>
makeMove(dupeBoard2, enemyTile, counterMove)</p>

		<p class="noindent mono"><span class="line-number">302.</span>
if isWinner(dupeBoard2, enemyTile):</p>

		<p class="noindent mono"><span class="line-number">303.</span>
<span class="comment"># a losing move automatically gets the worst fitness</span></p>

		<p class="noindent mono"><span class="line-number">304.</span>
potentialMoves[firstMove] = -1</p>

		<p class="noindent mono"><span class="line-number">305.</span>
break</p>

		<p class="noindent mono"><span class="line-number">306.</span>
else:</p>

		<p class="noindent mono"><span class="line-number">307.</span>
                <span class="comment"># do the recursive call to
getPotentialMoves()</span></p>

		<p class="noindent mono"><span class="line-number">308.</span>
results = getPotentialMoves(dupeBoard2, tile, lookAhead - 1)</p>

		<p class="noindent mono"><span class="line-number">309.</span>
potentialMoves[firstMove] += (sum(results) / BOARDWIDTH) / BOARDWIDTH</p>

		<p class="noindent mono"><span class="line-number">310.</span>
return potentialMoves</p>

		<p class="noindent mono"><span class="line-number">311. </span></p>

		<p class="noindent mono"><span class="line-number">312. </span></p>

		<p class="noindent mono"><span class="line-number">313.</span>
def getLowestEmptySpace(board, column):</p>

		<p class="noindent mono"><span class="line-number">314.</span>
<span class="comment"># Return the row number of the lowest empty row
in the given column.</span></p>

		<p class="noindent mono"><span class="line-number">315.</span>
for y in range(BOARDHEIGHT-1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">316.</span>
if board[column][y] == EMPTY:</p>

		<p class="noindent mono"><span class="line-number">317.</span>
return y</p>

		<p class="noindent mono"><span class="line-number">318.</span>
return -1</p>

		<p class="noindent mono"><span class="line-number">319. </span></p>

		<p class="noindent mono"><span class="line-number">320. </span></p>

		<p class="noindent mono"><span class="line-number">321.</span>
def isValidMove(board, column):</p>

		<p class="noindent mono"><span class="line-number">322.</span>
<span class="comment"># Returns True if there is an empty space in the
given column.</span></p>

		<p class="noindent mono"><span class="line-number">323.</span>
<span class="comment"># Otherwise returns False.</span></p>

		<p class="noindent mono"><span class="line-number">324.</span>
if column &lt; 0 or column &gt;= (BOARDWIDTH) or board[column][0] != EMPTY:</p>

		<p class="noindent mono"><span class="line-number">325.</span>
return False</p>

		<p class="noindent mono"><span class="line-number">326.</span>
return True</p>

		<p class="noindent mono"><span class="line-number">327. </span></p>

		<p class="noindent mono"><span class="line-number">328. </span></p>

		<p class="noindent mono"><span class="line-number">329.</span>
def isBoardFull(board):</p>

		<p class="noindent mono"><span class="line-number">330.</span>
<span class="comment"># Returns True if there are no empty spaces
anywhere on the board.</span></p>

		<p class="noindent mono"><span class="line-number">331.</span>
for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">332.</span>
for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">333.</span>
if board[x][y] == EMPTY:</p>

		<p class="noindent mono"><span class="line-number">334.</span>
return False</p>

		<p class="noindent mono"><span class="line-number">335.</span>
return True</p>

		<p class="noindent mono"><span class="line-number">336. </span></p>

		<p class="noindent mono"><span class="line-number">337. </span></p>

		<p class="noindent mono"><span class="line-number">338.</span>
def isWinner(board, tile):</p>

		<p class="noindent mono"><span class="line-number">339.</span>
<span class="comment"># check horizontal spaces</span></p>

		<p class="noindent mono"><span class="line-number">340.</span>
for x in range(BOARDWIDTH - 3):</p>

		<p class="noindent mono"><span class="line-number">341.</span>
for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">342.</span>
if board[x][y] == tile and board[x+1][y] == tile and board[x+2][y] == tile and
board[x+3][y] == tile:</p>

		<p class="noindent mono"><span class="line-number">343.</span>
return True</p>

		<p class="noindent mono"><span class="line-number">344.</span>
<span class="comment"># check vertical spaces</span></p>

		<p class="noindent mono"><span class="line-number">345.</span>
for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">346.</span>
for y in range(BOARDHEIGHT - 3):</p>

		<p class="noindent mono"><span class="line-number">347.</span>
if board[x][y] == tile and board[x][y+1] == tile and board[x][y+2] == tile and
board[x][y+3] == tile:</p>

		<p class="noindent mono"><span class="line-number">348.</span>
return True</p>

		<p class="noindent mono"><span class="line-number">349.</span>
<span class="comment"># check / diagonal spaces</span></p>

		<p class="noindent mono"><span class="line-number">350.</span>
for x in range(BOARDWIDTH - 3):</p>

		<p class="noindent mono"><span class="line-number">351.</span>
for y in range(3, BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">352.</span>
if board[x][y] == tile and board[x+1][y-1] == tile and board[x+2][y-2] == tile
and board[x+3][y-3] == tile:</p>

		<p class="noindent mono"><span class="line-number">353.</span>
return True</p>

		<p class="noindent mono"><span class="line-number">354.</span>
<span class="comment"># check \ diagonal spaces</span></p>

		<p class="noindent mono"><span class="line-number">355.</span>
for x in range(BOARDWIDTH - 3):</p>

		<p class="noindent mono"><span class="line-number">356.</span>
for y in range(BOARDHEIGHT - 3):</p>

		<p class="noindent mono"><span class="line-number">357.</span>
if board[x][y] == tile and board[x+1][y+1] == tile and board[x+2][y+2] == tile
and board[x+3][y+3] == tile:</p>

		<p class="noindent mono"><span class="line-number">358.</span>
return True</p>

		<p class="noindent mono"><span class="line-number">359.</span>
return False</p>

		<p class="noindent mono"><span class="line-number">360. </span></p>

		<p class="noindent mono"><span class="line-number">361. </span></p>

		<p class="noindent mono"><span class="line-number">362.</span>
if __name__ == '__main__':</p>

		<p class="noindent mono"><span class="line-number">363.</span>
main()</p>
	</div>

	<h1 class="subheading" id="gemgem">Gemgem, a “Bejeweled” Clone</h1>
	<p class="noindent"><i>“Bejeweled”</i> is a game where gems fall to fill up a board. The player can swap any two adjacent gems to try to match three gems in a row (vertically or horizontally, but not diagonally). The matched gems then disappear, making way for new gems to fall from the top. Matching more than three gems, or causing a chain reaction of gem matches will result in more points. The player’s score slowly drops over time, so the player must constantly be making new matches. The game ends when no possible match can be made on the board.</p>

	<h1 class="subheading" id="gemgem-source">Source Code for Gemgem</h1>
	<p class="noindent">This source code can be downloaded from <a href="https://invpy.com/gemgem.py">https://invpy.com/gemgem.py</a>.</p>
	<p>The image files that Gemgem uses can be downloaded from <a href="https://invpy.com/gemgemimages.zip">https://invpy.com/gemgemimages.zip</a>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">1.</span> <span class="comment"># Gemgem (a Bejeweled clone)</span></p>
		<p class="noindent mono"><span class="line-number">2.</span> <span class="comment"># By Al Sweigart al@inventwithpython.com</span></p>
		<p class="noindent mono"><span class="line-number">3.</span> <span class="comment"># http://inventwithpython.com/pygame</span></p>
		<p class="noindent mono"><span class="line-number">4.</span> <span class="comment"># Released under a &quot;Simplified BSD&quot; license</span></p>
		<p class="noindent mono"><span class="line-number">5.</span></p>
		<p class="noindent mono"><span class="line-number">6.</span><span	class="comment"> &quot;&quot;&quot;</span></p>
		<p class="noindent mono"><span class="line-number">7.</span><span class="comment"> This program has &quot;gem data structures&quot;, which are basically dictionaries</span></p>
		<p class="noindent mono"><span class="line-number">8.</span><span class="comment"> with the following keys:</span></p>
		<p class="noindent mono"><span class="line-number">9.</span><span class="comment">   'x' and 'y' - The location of the gem on the board. 0,0 is the top left.</span></p>

		<p class="noindent mono"><span class="line-number">10.</span><span
		class="comment">                 There is also a ROWABOVEBOARD row that
		'y' can be set to,</span></p>

		<p class="noindent mono"><span class="line-number">11.</span><span
		class="comment">                 to indicate that it is above the
		board.</span></p>

		<p class="noindent mono"><span class="line-number">12.</span><span
		class="comment">   'direction' - one of the four constant variables UP,
		DOWN, LEFT, RIGHT.</span></p>

		<p class="noindent mono"><span class="line-number">13.</span><span
		class="comment">                 This is the direction the gem is
		moving.</span></p>

		<p class="noindent mono"><span class="line-number">14.</span><span
		class="comment">   'imageNum'  - The integer index into GEMIMAGES to
		denote which image</span></p>

		<p class="noindent mono"><span class="line-number">15.</span><span
		class="comment">                 this gem uses.</span></p>

		<p class="noindent mono"><span class="line-number">16.</span><span
		class="comment"> &quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">17. </span></p>

		<p class="noindent mono"><span class="line-number">18.</span>
		import random, time, pygame, sys, copy</p>

		<p class="noindent mono"><span class="line-number">19.</span>
		from pygame.locals import *</p>

		<p class="noindent mono"><span class="line-number">20. </span></p>

		<p class="noindent mono"><span class="line-number">21.</span>
		FPS = 30 <span class="comment"># frames per second to update the screen</span></p>

		<p class="noindent mono"><span class="line-number">22.</span>
		WINDOWWIDTH = 600  <span class="comment"># width of the program's
		window, in pixels</span></p>

		<p class="noindent mono"><span class="line-number">23.</span>
		WINDOWHEIGHT = 600 <span class="comment"># height in pixels</span></p>

		<p class="noindent mono"><span class="line-number">24. </span></p>

		<p class="noindent mono"><span class="line-number">25.</span>
		BOARDWIDTH = 8 <span class="comment"># how many columns in the board</span></p>

		<p class="noindent mono"><span class="line-number">26.</span>
		BOARDHEIGHT = 8 <span class="comment"># how many rows in the board</span></p>

		<p class="noindent mono"><span class="line-number">27.</span>
		GEMIMAGESIZE = 64 <span class="comment"># width &amp; height of each
		space in pixels</span></p>

		<p class="noindent mono"><span class="line-number">28. </span></p>

		<p class="noindent mono"><span class="line-number">29.</span> <span
		class="comment"># NUMGEMIMAGES is the number of gem types. You will
		need .png image</span></p>

		<p class="noindent mono"><span class="line-number">30.</span> <span
		class="comment"># files named gem0.png, gem1.png, etc. up to
		gem(N-1).png.</span></p>

		<p class="noindent mono"><span class="line-number">31.</span>
		NUMGEMIMAGES = 7</p>

		<p class="noindent mono"><span class="line-number">32.</span>
		assert NUMGEMIMAGES &gt;= 5 <span class="comment"># game needs at least
		5 types of gems to work</span></p>

		<p class="noindent mono"><span class="line-number">33. </span></p>

		<p class="noindent mono"><span class="line-number">34.</span> <span
		class="comment"># NUMMATCHSOUNDS is the number of different sounds to choose
		from when</span></p>

		<p class="noindent mono"><span class="line-number">35.</span> <span
		class="comment"># a match is made. The .wav files are named match0.wav,
		match1.wav, etc.</span></p>

		<p class="noindent mono"><span class="line-number">36.</span>
		NUMMATCHSOUNDS = 6</p>

		<p class="noindent mono"><span class="line-number">37. </span></p>

		<p class="noindent mono"><span class="line-number">38.</span>
		MOVERATE = 25 <span class="comment"># 1 to 100, larger num means faster
		animations</span></p>

		<p class="noindent mono"><span class="line-number">39.</span>
		DEDUCTSPEED = 0.8 <span class="comment"># reduces score by 1 point
		every DEDUCTSPEED seconds.</span></p>

		<p class="noindent mono"><span class="line-number">40. </span></p>

		<p class="noindent mono"><span class="line-number">41.</span> <span
		class="comment">#             R    G    B</span></p>

		<p class="noindent mono"><span class="line-number">42.</span>
		PURPLE    = (255,   0, 255)</p>

		<p class="noindent mono"><span class="line-number">43.</span>
		LIGHTBLUE = (170, 190, 255)</p>

		<p class="noindent mono"><span class="line-number">44.</span>
		BLUE      = (  0,   0, 255)</p>

		<p class="noindent mono"><span class="line-number">45.</span>
		RED       = (255, 100, 100)</p>

		<p class="noindent mono"><span class="line-number">46.</span>
		BLACK     = (  0,   0,   0)</p>

		<p class="noindent mono"><span class="line-number">47.</span>
		BROWN     = ( 85,  65,   0)</p>

		<p class="noindent mono"><span class="line-number">48.</span>
		HIGHLIGHTCOLOR = PURPLE <span class="comment"># color of the selected
		gem's border</span></p>

		<p class="noindent mono"><span class="line-number">49.</span>
		BGCOLOR = LIGHTBLUE <span class="comment"># background color on the
		screen</span></p>

		<p class="noindent mono"><span class="line-number">50.</span>
		GRIDCOLOR = BLUE <span class="comment"># color of the game board</span></p>

		<p class="noindent mono"><span class="line-number">51.</span>
		GAMEOVERCOLOR = RED <span class="comment"># color of the &quot;Game
		over&quot; text.</span></p>

		<p class="noindent mono"><span class="line-number">52.</span>
		GAMEOVERBGCOLOR = BLACK <span class="comment"># background color of the
		&quot;Game over&quot; text.</span></p>

		<p class="noindent mono"><span class="line-number">53.</span>
		SCORECOLOR = BROWN <span class="comment"># color of the text for the
		player's score</span></p>

		<p class="noindent mono"><span class="line-number">54. </span></p>

		<p class="noindent mono"><span class="line-number">55.</span> <span
		class="comment"># The amount of space to the sides of the board to the
		edge of the window</span></p>

		<p class="noindent mono"><span class="line-number">56.</span> <span
		class="comment"># is used several times, so calculate it once here and
		store in variables.</span></p>

		<p class="noindent mono"><span class="line-number">57.</span>
		XMARGIN = int((WINDOWWIDTH - GEMIMAGESIZE * BOARDWIDTH) / 2)</p>

		<p class="noindent mono"><span class="line-number">58.</span>
		YMARGIN = int((WINDOWHEIGHT - GEMIMAGESIZE * BOARDHEIGHT) / 2)</p>

		<p class="noindent mono"><span class="line-number">59. </span></p>

		<p class="noindent mono"><span class="line-number">60.</span> <span
		class="comment"># constants for direction values</span></p>

		<p class="noindent mono"><span class="line-number">61.</span>
		UP = 'up'</p>

		<p class="noindent mono"><span class="line-number">62.</span>
		DOWN = 'down'</p>

		<p class="noindent mono"><span class="line-number">63.</span>
		LEFT = 'left'</p>

		<p class="noindent mono"><span class="line-number">64.</span>
		RIGHT = 'right'</p>

		<p class="noindent mono"><span class="line-number">65. </span></p>

		<p class="noindent mono"><span class="line-number">66.</span>
		EMPTY_SPACE = -1 <span class="comment"># an arbitrary, nonpositive
		value</span></p>

		<p class="noindent mono"><span class="line-number">67.</span>
		ROWABOVEBOARD = 'row above board' <span class="comment"># an arbitrary,
		noninteger value</span></p>

		<p class="noindent mono"><span class="line-number">68. </span></p>

		<p class="noindent mono"><span class="line-number">69.</span>
		def main():</p>

		<p class="noindent mono"><span class="line-number">70.</span>
		global FPSCLOCK, DISPLAYSURF, GEMIMAGES, GAMESOUNDS, BASICFONT, BOARDRECTS</p>

		<p class="noindent mono"><span class="line-number">71. </span></p>

		<p class="noindent mono"><span class="line-number">72.</span>
		<span class="comment"># Initial set up.</span></p>

		<p class="noindent mono"><span class="line-number">73.</span>
		pygame.init()</p>

		<p class="noindent mono"><span class="line-number">74.</span>
		FPSCLOCK = pygame.time.Clock()</p>

		<p class="noindent mono"><span class="line-number">75.</span>
		DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">76.</span>
		pygame.display.set_caption('Gemgem')</p>

		<p class="noindent mono"><span class="line-number">77.</span>
		BASICFONT = pygame.font.Font('freesansbold.ttf', 36)</p>

		<p class="noindent mono"><span class="line-number">78. </span></p>

		<p class="noindent mono"><span class="line-number">79.</span>
		<span class="comment"># Load the images</span></p>

		<p class="noindent mono"><span class="line-number">80.</span>
		GEMIMAGES = []</p>

		<p class="noindent mono"><span class="line-number">81.</span>
		for i in range(1, NUMGEMIMAGES+1):</p>

		<p class="noindent mono"><span class="line-number">82.</span>
		gemImage = pygame.image.load('gem%s.png' % i)</p>

		<p class="noindent mono"><span class="line-number">83.</span>
		if gemImage.get_size() != (GEMIMAGESIZE, GEMIMAGESIZE):</p>

		<p class="noindent mono"><span class="line-number">84.</span>
		         gemImage = pygame.transform.smoothscale(gemImage, (GEMIMAGESIZE,
		GEMIMAGESIZE))</p>

		<p class="noindent mono"><span class="line-number">85.</span>
		GEMIMAGES.append(gemImage)</p>

		<p class="noindent mono"><span class="line-number">86. </span></p>

		<p class="noindent mono"><span class="line-number">87.</span>
		<span class="comment"># Load the sounds.</span></p>

		<p class="noindent mono"><span class="line-number">88.</span>
		GAMESOUNDS = {}</p>

		<p class="noindent mono"><span class="line-number">89.</span>
		GAMESOUNDS['bad swap'] = pygame.mixer.Sound('badswap.wav')</p>

		<p class="noindent mono"><span class="line-number">90.</span>
		GAMESOUNDS['match'] = []</p>

		<p class="noindent mono"><span class="line-number">91.</span>
		for i in range(NUMMATCHSOUNDS):</p>

		<p class="noindent mono"><span class="line-number">92.</span>
		GAMESOUNDS['match'].append(pygame.mixer.Sound('match%s.wav' % i))</p>

		<p class="noindent mono"><span class="line-number">93. </span></p>

		<p class="noindent mono"><span class="line-number">94.</span>
		<span class="comment"># Create pygame.Rect objects for each board space
		to</span></p>

		<p class="noindent mono"><span class="line-number">95.</span>
		<span class="comment"># do board-coordinate-to-pixel-coordinate
		conversions.</span></p>

		<p class="noindent mono"><span class="line-number">96.</span>
		BOARDRECTS = []</p>

		<p class="noindent mono"><span class="line-number">97.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">98.</span>
		BOARDRECTS.append([])</p>

		<p class="noindent mono"><span class="line-number">99.</span>
		for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">100.</span>
		r = pygame.Rect((XMARGIN + (x * GEMIMAGESIZE),</p>

		<p class="noindent mono"><span class="line-number">101.</span>
		           YMARGIN + (y * GEMIMAGESIZE),</p>

		<p class="noindent mono"><span class="line-number">102.</span>
		GEMIMAGESIZE,</p>

		<p class="noindent mono"><span class="line-number">103.</span>
		GEMIMAGESIZE))</p>

		<p class="noindent mono"><span class="line-number">104.</span>
		BOARDRECTS[x].append(r)</p>

		<p class="noindent mono"><span class="line-number">105. </span></p>

		<p class="noindent mono"><span class="line-number">106.</span>
		while True:</p>

		<p class="noindent mono"><span class="line-number">107.</span>
		runGame()</p>

		<p class="noindent mono"><span class="line-number">108. </span></p>

		<p class="noindent mono"><span class="line-number">109. </span></p>

		<p class="noindent mono"><span class="line-number">110.</span>
		def runGame():</p>

		<p class="noindent mono"><span class="line-number">111.</span>
		<span class="comment"># Plays through a single game. When the game is
		over, this function returns.</span></p>

		<p class="noindent mono"><span class="line-number">112. </span></p>

		<p class="noindent mono"><span class="line-number">113.</span>
		<span class="comment"># initialize the board</span></p>

		<p class="noindent mono"><span class="line-number">114.</span>
		gameBoard = getBlankBoard()</p>

		<p class="noindent mono"><span class="line-number">115.</span>
		score = 0</p>

		<p class="noindent mono"><span class="line-number">116.</span>
		fillBoardAndAnimate(gameBoard, [], score) <span class="comment"># Drop
		the initial gems.</span></p>

		<p class="noindent mono"><span class="line-number">117. </span></p>

		<p class="noindent mono"><span class="line-number">118.</span>
		<span class="comment"># initialize variables for the start of a new
		game</span></p>

		<p class="noindent mono"><span class="line-number">119.</span>
		firstSelectedGem = None</p>

		<p class="noindent mono"><span class="line-number">120.</span>
		lastMouseDownX = None</p>

		<p class="noindent mono"><span class="line-number">121.</span>
		lastMouseDownY = None</p>

		<p class="noindent mono"><span class="line-number">122.</span>
		gameIsOver = False</p>

		<p class="noindent mono"><span class="line-number">123.</span>
		lastScoreDeduction = time.time()</p>

		<p class="noindent mono"><span class="line-number">124.</span>
		clickContinueTextSurf = None</p>

		<p class="noindent mono"><span class="line-number">125. </span></p>

		<p class="noindent mono"><span class="line-number">126.</span>
		while True: <span class="comment"># main game loop</span></p>

		<p class="noindent mono"><span class="line-number">127.</span>
		clickedSpace = None</p>

		<p class="noindent mono"><span class="line-number">128.</span>
		for event in pygame.event.get(): <span class="comment"># event handling
		loop</span></p>

		<p class="noindent mono"><span class="line-number">129.</span>
		if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE):</p>

		<p class="noindent mono"><span class="line-number">130.</span>
		pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">131.</span>
		sys.exit()</p>

		<p class="noindent mono"><span class="line-number">132.</span>
		elif event.type == KEYUP and event.key == K_BACKSPACE:</p>

		<p class="noindent mono"><span class="line-number">133.</span>
		return <span class="comment"># start a new game</span></p>

		<p class="noindent mono"><span class="line-number">134. </span></p>

		<p class="noindent mono"><span class="line-number">135.</span>
		elif event.type == MOUSEBUTTONUP:</p>

		<p class="noindent mono"><span class="line-number">136.</span>
		      if gameIsOver:</p>

		<p class="noindent mono"><span class="line-number">137.</span>
		return <span class="comment"># after games ends, click to start a new
		game</span></p>

		<p class="noindent mono"><span class="line-number">138. </span></p>

		<p class="noindent mono"><span class="line-number">139.</span>
		if event.pos == (lastMouseDownX, lastMouseDownY):</p>

		<p class="noindent mono"><span class="line-number">140.</span>
		<span class="comment"># This event is a mouse click, not the end of a
		mouse drag.</span></p>

		<p class="noindent mono"><span class="line-number">141.</span>
		clickedSpace = checkForGemClick(event.pos)</p>

		<p class="noindent mono"><span class="line-number">142.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">143.</span>
		<span class="comment"># this is the end of a mouse drag</span></p>

		<p class="noindent mono"><span class="line-number">144.</span>
		firstSelectedGem = checkForGemClick((lastMouseDownX, lastMouseDownY))</p>

		<p class="noindent mono"><span class="line-number">145.</span>
		clickedSpace = checkForGemClick(event.pos)</p>

		<p class="noindent mono"><span class="line-number">146.</span>
		if not firstSelectedGem or not clickedSpace:</p>

		<p class="noindent mono"><span class="line-number">147.</span>
		<span class="comment"># if not part of a valid drag, deselect both</span></p>

		<p class="noindent mono"><span class="line-number">148.</span>
		firstSelectedGem = None</p>

		<p class="noindent mono"><span class="line-number">149.</span>
		clickedSpace = None</p>

		<p class="noindent mono"><span class="line-number">150.</span>
		elif event.type == MOUSEBUTTONDOWN:</p>

		<p class="noindent mono"><span class="line-number">151.</span>
		<span class="comment"># this is the start of a mouse click or mouse
		drag</span></p>

		<p class="noindent mono"><span class="line-number">152.</span>
		lastMouseDownX, lastMouseDownY = event.pos</p>

		<p class="noindent mono"><span class="line-number">153. </span></p>

		<p class="noindent mono"><span class="line-number">154.</span>         if
		clickedSpace and not firstSelectedGem:</p>

		<p class="noindent mono"><span class="line-number">155.</span>
		<span class="comment"># This was the first gem clicked on.</span></p>

		<p class="noindent mono"><span class="line-number">156.</span>
		firstSelectedGem = clickedSpace</p>

		<p class="noindent mono"><span class="line-number">157.</span>
		elif clickedSpace and firstSelectedGem:</p>

		<p class="noindent mono"><span class="line-number">158.</span>
		<span class="comment"># Two gems have been clicked on and selected.
		Swap the gems.</span></p>

		<p class="noindent mono"><span class="line-number">159.</span>
		firstSwappingGem, secondSwappingGem = getSwappingGems(gameBoard,
		firstSelectedGem, clickedSpace)</p>

		<p class="noindent mono"><span class="line-number">160.</span>
		if firstSwappingGem == None and secondSwappingGem == None:</p>

		<p class="noindent mono"><span class="line-number">161.</span>
		<span class="comment"># If both are None, then the gems were not
		adjacent</span></p>

		<p class="noindent mono"><span class="line-number">162.</span>
		firstSelectedGem = None <span class="comment"># deselect the first gem</span></p>

		<p class="noindent mono"><span class="line-number">163.</span>
		continue</p>

		<p class="noindent mono"><span class="line-number">164. </span></p>

		<p class="noindent mono"><span class="line-number">165.</span>
		<span class="comment"># Show the swap animation on the screen.</span></p>

		<p class="noindent mono"><span class="line-number">166.</span>
		boardCopy = getBoardCopyMinusGems(gameBoard, (firstSwappingGem,
		secondSwappingGem))</p>

		<p class="noindent mono"><span class="line-number">167.</span>
		animateMovingGems(boardCopy, [firstSwappingGem, secondSwappingGem], [], score)</p>

		<p class="noindent mono"><span class="line-number">168. </span></p>

		<p class="noindent mono"><span class="line-number">169.</span>
		<span class="comment"># Swap the gems in the board data structure.</span></p>

		<p class="noindent mono"><span class="line-number">170.</span>
		gameBoard[firstSwappingGem['x']][firstSwappingGem['y']] = secondSwappingGem['imageNum']</p>

		<p class="noindent mono"><span class="line-number">171.</span>
		gameBoard[secondSwappingGem['x']][secondSwappingGem['y']] = firstSwappingGem['imageNum']</p>

		<p class="noindent mono"><span class="line-number">172. </span></p>

		<p class="noindent mono"><span class="line-number">173.</span>
		<span class="comment"># See if this is a matching move.</span></p>

		<p class="noindent mono"><span class="line-number">174.</span>
		matchedGems = findMatchingGems(gameBoard)</p>

		<p class="noindent mono"><span class="line-number">175.</span>
		if matchedGems == []:</p>

		<p class="noindent mono"><span class="line-number">176.</span>
		<span class="comment"># Was not a matching move; swap the gems back</span></p>

		<p class="noindent mono"><span class="line-number">177.</span>
		GAMESOUNDS['bad swap'].play()</p>

		<p class="noindent mono"><span class="line-number">178.</span>
		animateMovingGems(boardCopy, [firstSwappingGem, secondSwappingGem], [], score)</p>

		<p class="noindent mono"><span class="line-number">179.</span>
		gameBoard[firstSwappingGem['x']][firstSwappingGem['y']] = firstSwappingGem['imageNum']</p>

		<p class="noindent mono"><span class="line-number">180.</span>
		gameBoard[secondSwappingGem['x']][secondSwappingGem['y']] =
		secondSwappingGem['imageNum']</p>

		<p class="noindent mono"><span class="line-number">181.</span>
		    else:</p>

		<p class="noindent mono"><span class="line-number">182.</span>
		<span class="comment"># This was a matching move.</span></p>

		<p class="noindent mono"><span class="line-number">183.</span>
		scoreAdd = 0</p>

		<p class="noindent mono"><span class="line-number">184.</span>
		while matchedGems != []:</p>

		<p class="noindent mono"><span class="line-number">185.</span>
		<span class="comment"># Remove matched gems, then pull down the board.</span></p>

		<p class="noindent mono"><span class="line-number">186. </span></p>

		<p class="noindent mono"><span class="line-number">187.</span>
		<span class="comment"># points is a list of dicts that tells</span> <span
		class="comment">fillBoardAndAnimate()</span></p>

		<p class="noindent mono"><span class="line-number">188.</span>
		<span class="comment"># where on the screen to display text to show how
		many</span> </p>

		<p class="noindent mono"><span class="line-number">189.</span>
		<span class="comment"># points the player got. points is a list because
		if</span> </p>

		<p class="noindent mono"><span class="line-number">190.</span>
		<span class="comment"># the player gets multiple matches, then multiple
		points text should appear.</span></p>

		<p class="noindent mono"><span class="line-number">191.</span>
		points = []</p>

		<p class="noindent mono"><span class="line-number">192.</span>
		for gemSet in matchedGems:</p>

		<p class="noindent mono"><span class="line-number">193.</span>
		scoreAdd += (10 + (len(gemSet) - 3) * 10)</p>

		<p class="noindent mono"><span class="line-number">194.</span>
		for gem in gemSet:</p>

		<p class="noindent mono"><span class="line-number">195.</span>
		gameBoard[gem[0]][gem[1]] = EMPTY_SPACE</p>

		<p class="noindent mono"><span class="line-number">196.</span>
		points.append({'points': scoreAdd,</p>

		<p class="noindent mono"><span class="line-number">197.</span>
		'x': gem[0] * GEMIMAGESIZE + XMARGIN,</p>

		<p class="noindent mono"><span class="line-number">198.</span>
		              'y': gem[1] * GEMIMAGESIZE + YMARGIN})</p>

		<p class="noindent mono"><span class="line-number">199.</span>
		random.choice(GAMESOUNDS['match']).play()</p>

		<p class="noindent mono"><span class="line-number">200.</span>
		score += scoreAdd</p>

		<p class="noindent mono"><span class="line-number">201. </span></p>

		<p class="noindent mono"><span class="line-number">202.</span>
		<span class="comment"># Drop the new gems.</span></p>

		<p class="noindent mono"><span class="line-number">203.</span>
		fillBoardAndAnimate(gameBoard, points, score)</p>

		<p class="noindent mono"><span class="line-number">204. </span></p>

		<p class="noindent mono"><span class="line-number">205.</span>
		<span class="comment"># Check if there are any new matches.</span></p>

		<p class="noindent mono"><span class="line-number">206.</span>
		matchedGems = findMatchingGems(gameBoard)</p>

		<p class="noindent mono"><span class="line-number">207.</span>
		firstSelectedGem = None</p>

		<p class="noindent mono"><span class="line-number">208. </span></p>

		<p class="noindent mono"><span class="line-number">209.</span>
		if not canMakeMove(gameBoard):</p>

		<p class="noindent mono"><span class="line-number">210.</span>
		gameIsOver = True</p>

		<p class="noindent mono"><span class="line-number">211. </span></p>

		<p class="noindent mono"><span class="line-number">212.</span>
		<span class="comment"># Draw the board.</span></p>

		<p class="noindent mono"><span class="line-number">213.</span>
		DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">214.</span>
		drawBoard(gameBoard)</p>

		<p class="noindent mono"><span class="line-number">215.</span>
		if firstSelectedGem != None:</p>

		<p class="noindent mono"><span class="line-number">216.</span>
		highlightSpace(firstSelectedGem['x'], firstSelectedGem['y'])</p>

		<p class="noindent mono"><span class="line-number">217.</span>
		if gameIsOver:</p>

		<p class="noindent mono"><span class="line-number">218.</span>
		if clickContinueTextSurf == None:</p>

		<p class="noindent mono"><span class="line-number">219.</span>
		<span class="comment"># Only render the text once. In future
		iterations, just</span></p>

		<p class="noindent mono"><span class="line-number">220.</span>
		<span class="comment"># use the Surface object already in
		clickContinueTextSurf</span></p>

		<p class="noindent mono"><span class="line-number">221.</span>
		clickContinueTextSurf = BASICFONT.render('Final Score: %s (Click to continue)'
		% (score), 1, GAMEOVERCOLOR, GAMEOVERBGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">222.</span>
		clickContinueTextRect = clickContinueTextSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">223.</span>
		clickContinueTextRect.center = int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2)</p>

		<p class="noindent mono"><span class="line-number">224.</span>
		DISPLAYSURF.blit(clickContinueTextSurf, clickContinueTextRect)</p>

		<p class="noindent mono"><span class="line-number">225.</span>
		elif score &gt; 0 and time.time() - lastScoreDeduction &gt; DEDUCTSPEED:</p>

		<p class="noindent mono"><span class="line-number">226.</span>
		<span class="comment"># score drops over time</span></p>

		<p class="noindent mono"><span class="line-number">227.</span>
		score -= 1</p>

		<p class="noindent mono"><span class="line-number">228.</span>
		lastScoreDeduction = time.time()</p>

		<p class="noindent mono"><span class="line-number">229.</span>
		drawScore(score)</p>

		<p class="noindent mono"><span class="line-number">230.</span>
		pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">231.</span>
		FPSCLOCK.tick(FPS)</p>

		<p class="noindent mono"><span class="line-number">232. </span></p>

		<p class="noindent mono"><span class="line-number">233. </span></p>

		<p class="noindent mono"><span class="line-number">234.</span>
		def getSwappingGems(board, firstXY, secondXY):</p>

		<p class="noindent mono"><span class="line-number">235.</span>
		<span class="comment"># If the gems at the (X, Y) coordinates of the
		two gems are adjacent,</span></p>

		<p class="noindent mono"><span class="line-number">236.</span>
		<span class="comment"># then their 'direction' keys are set to the
		appropriate direction</span></p>

		<p class="noindent mono"><span class="line-number">237.</span>
		<span class="comment"># value to be swapped with each other.</span></p>

		<p class="noindent mono"><span class="line-number">238.</span>
		<span class="comment"># Otherwise, (None, None) is returned.</span></p>

		<p class="noindent mono"><span class="line-number">239.</span>
		firstGem = {'imageNum': board[firstXY['x']][firstXY['y']],</p>

		<p class="noindent mono"><span class="line-number">240.</span>
		'x': firstXY['x'],</p>

		<p class="noindent mono"><span class="line-number">241.</span>
		'y': firstXY['y']}</p>

		<p class="noindent mono"><span class="line-number">242.</span>
		secondGem = {'imageNum': board[secondXY['x']][secondXY['y']],</p>

		<p class="noindent mono"><span class="line-number">243.</span>
		'x': secondXY['x'],</p>

		<p class="noindent mono"><span class="line-number">244.</span>
		             'y': secondXY['y']}</p>

		<p class="noindent mono"><span class="line-number">245.</span>
		highlightedGem = None</p>

		<p class="noindent mono"><span class="line-number">246.</span>
		if firstGem['x'] == secondGem['x'] + 1 and firstGem['y'] == secondGem['y']:</p>

		<p class="noindent mono"><span class="line-number">247.</span>
		firstGem['direction'] = LEFT</p>

		<p class="noindent mono"><span class="line-number">248.</span>
		secondGem['direction'] = RIGHT</p>

		<p class="noindent mono"><span class="line-number">249.</span>
		elif firstGem['x'] == secondGem['x'] - 1 and firstGem['y'] == secondGem['y']:</p>

		<p class="noindent mono"><span class="line-number">250.</span>
		firstGem['direction'] = RIGHT</p>

		<p class="noindent mono"><span class="line-number">251.</span>
		secondGem['direction'] = LEFT</p>

		<p class="noindent mono"><span class="line-number">252.</span>
		elif firstGem['y'] == secondGem['y'] + 1 and firstGem['x'] == secondGem['x']:</p>

		<p class="noindent mono"><span class="line-number">253.</span>
		firstGem['direction'] = UP</p>

		<p class="noindent mono"><span class="line-number">254.</span>
		secondGem['direction'] = DOWN</p>

		<p class="noindent mono"><span class="line-number">255.</span>
		elif firstGem['y'] == secondGem['y'] - 1 and firstGem['x'] == secondGem['x']:</p>

		<p class="noindent mono"><span class="line-number">256.</span>
		firstGem['direction'] = DOWN</p>

		<p class="noindent mono"><span class="line-number">257.</span>
		secondGem['direction'] = UP</p>

		<p class="noindent mono"><span class="line-number">258.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">259.</span>         <span
		class="comment"># These gems are not adjacent and can't be swapped.</span></p>

		<p class="noindent mono"><span class="line-number">260.</span>
		return None, None</p>

		<p class="noindent mono"><span class="line-number">261.</span>
		return firstGem, secondGem</p>

		<p class="noindent mono"><span class="line-number">262. </span></p>

		<p class="noindent mono"><span class="line-number">263. </span></p>

		<p class="noindent mono"><span class="line-number">264.</span>
		def getBlankBoard():</p>

		<p class="noindent mono"><span class="line-number">265.</span>
		<span class="comment"># Create and return a blank board data structure.</span></p>

		<p class="noindent mono"><span class="line-number">266.</span>
		board = []</p>

		<p class="noindent mono"><span class="line-number">267.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">268.</span>
		board.append([EMPTY_SPACE] * BOARDHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">269.</span>
		return board</p>

		<p class="noindent mono"><span class="line-number">270. </span></p>

		<p class="noindent mono"><span class="line-number">271. </span></p>

		<p class="noindent mono"><span class="line-number">272.</span>
		def canMakeMove(board):</p>

		<p class="noindent mono"><span class="line-number">273.</span>
		<span class="comment"># Return True if the board is in a state where a
		matching</span></p>

		<p class="noindent mono"><span class="line-number">274.</span>
		<span class="comment"># move can be made on it. Otherwise return False.</span></p>

		<p class="noindent mono"><span class="line-number">275. </span></p>

		<p class="noindent mono"><span class="line-number">276.</span>
		<span class="comment"># The patterns in oneOffPatterns represent gems
		that are configured</span></p>

		<p class="noindent mono"><span class="line-number">277.</span>
		<span class="comment"># in a way where it only takes one move to make a
		triplet.</span></p>

		<p class="noindent mono"><span class="line-number">278.</span>
		oneOffPatterns = (((0,1), (1,0), (2,0)),</p>

		<p class="noindent mono"><span class="line-number">279.</span>
		((0,1), (1,1), (2,0)),</p>

		<p class="noindent mono"><span class="line-number">280.</span>
		((0,0), (1,1), (2,0)),</p>

		<p class="noindent mono"><span class="line-number">281.</span>
		((0,1), (1,0), (2,1)),</p>

		<p class="noindent mono"><span class="line-number">282.</span>
		((0,0), (1,0), (2,1)),</p>

		<p class="noindent mono"><span class="line-number">283.</span>
		((0,0), (1,1), (2,1)),</p>

		<p class="noindent mono"><span class="line-number">284.</span>
		((0,0), (0,2), (0,3)),</p>

		<p class="noindent mono"><span class="line-number">285.</span>
		((0,0), (0,1), (0,3)))</p>

		<p class="noindent mono"><span class="line-number">286. </span></p>

		<p class="noindent mono"><span class="line-number">287.</span><span
		class="comment">     # The x and y variables iterate over each space on
		the board.</span></p>

		<p class="noindent mono"><span class="line-number">288.</span><span
		class="comment">     # If we use + to represent the currently iterated
		space on the</span></p>

		<p class="noindent mono"><span class="line-number">289.</span><span
		class="comment">     # board, then this pattern: ((0,1), (1,0), (2,0))refers
		to identical</span></p>

		<p class="noindent mono"><span class="line-number">290.</span><span
		class="comment">     # gems being set up like this:</span></p>

		<p class="noindent mono"><span class="line-number">291.</span><span
		class="comment">     #</span></p>

		<p class="noindent mono"><span class="line-number">292.</span><span
		class="comment">     #     +A</span></p>

		<p class="noindent mono"><span class="line-number">293.</span><span
		class="comment">     #     B</span></p>

		<p class="noindent mono"><span class="line-number">294.</span><span
		class="comment">     #     C</span></p>

		<p class="noindent mono"><span class="line-number">295.</span><span
		class="comment">     #</span></p>

		<p class="noindent mono"><span class="line-number">296.</span><span
		class="comment">     # That is, gem A is offset from the + by (0,1),
		gem B is offset</span></p>

		<p class="noindent mono"><span class="line-number">297.</span><span
		class="comment">     # by (1,0), and gem C is offset by (2,0). In this
		case, gem A can</span></p>

		<p class="noindent mono"><span class="line-number">298.</span><span
		class="comment">     # be swapped to the left to form a vertical
		three-in-a-row triplet.</span></p>

		<p class="noindent mono"><span class="line-number">299.</span><span
		class="comment">     #</span></p>

		<p class="noindent mono"><span class="line-number">300.</span><span
		class="comment">     # There are eight possible ways for the gems to be
		one move</span></p>

		<p class="noindent mono"><span class="line-number">301.</span><span
		class="comment">     # away from forming a triple, hence oneOffPattern
		has 8 patterns.</span></p>

		<p class="noindent mono"><span class="line-number">302. </span></p>

		<p class="noindent mono"><span class="line-number">303.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">304.</span>
		for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">305.</span>
		for pat in oneOffPatterns:</p>

		<p class="noindent mono"><span class="line-number">306.</span>
		<span class="comment"># check each possible pattern of &quot;match in
		next move&quot; to</span></p>

		<p class="noindent mono"><span class="line-number">307.</span>
		<span class="comment"># see if a possible move can be made.</span></p>

		<p class="noindent mono"><span class="line-number">308.</span>
		if (getGemAt(board, x+pat[0][0], y+pat[0][1]) == \</p>

		<p class="noindent mono"><span class="line-number">309.</span>
		getGemAt(board, x+pat[1][0], y+pat[1][1]) == \</p>

		<p class="noindent mono"><span class="line-number">310.</span>
		getGemAt(board, x+pat[2][0], y+pat[2][1]) != None) or \</p>

		<p class="noindent mono"><span class="line-number">311.</span>
		        (getGemAt(board, x+pat[0][1], y+pat[0][0]) == \</p>

		<p class="noindent mono"><span class="line-number">312.</span>
		getGemAt(board, x+pat[1][1], y+pat[1][0]) == \</p>

		<p class="noindent mono"><span class="line-number">313.</span>
		getGemAt(board, x+pat[2][1], y+pat[2][0]) != None):</p>

		<p class="noindent mono"><span class="line-number">314.</span>
		return True <span class="comment"># return True the first time you find
		a pattern</span></p>

		<p class="noindent mono"><span class="line-number">315.</span>
		return False</p>

		<p class="noindent mono"><span class="line-number">316. </span></p>

		<p class="noindent mono"><span class="line-number">317. </span></p>

		<p class="noindent mono"><span class="line-number">318.</span>
		def drawMovingGem(gem, progress):</p>

		<p class="noindent mono"><span class="line-number">319.</span>
		<span class="comment"># Draw a gem sliding in the direction that its
		'direction' key</span></p>

		<p class="noindent mono"><span class="line-number">320.</span>
		<span class="comment"># indicates. The progress parameter is a number
		from 0 (just</span></p>

		<p class="noindent mono"><span class="line-number">321.</span>
		  <span class="comment"># starting) to 100 (slide complete).</span></p>

		<p class="noindent mono"><span class="line-number">322.</span>
		movex = 0</p>

		<p class="noindent mono"><span class="line-number">323.</span>
		movey = 0</p>

		<p class="noindent mono"><span class="line-number">324.</span>
		progress *= 0.01</p>

		<p class="noindent mono"><span class="line-number">325. </span></p>

		<p class="noindent mono"><span class="line-number">326.</span>
		if gem['direction'] == UP:</p>

		<p class="noindent mono"><span class="line-number">327.</span>
		movey = -int(progress * GEMIMAGESIZE)</p>

		<p class="noindent mono"><span class="line-number">328.</span>
		elif gem['direction'] == DOWN:</p>

		<p class="noindent mono"><span class="line-number">329.</span>
		movey = int(progress * GEMIMAGESIZE)</p>

		<p class="noindent mono"><span class="line-number">330.</span>
		elif gem['direction'] == RIGHT:</p>

		<p class="noindent mono"><span class="line-number">331.</span>
		movex = int(progress * GEMIMAGESIZE)</p>

		<p class="noindent mono"><span class="line-number">332.</span>
		elif gem['direction'] == LEFT:</p>

		<p class="noindent mono"><span class="line-number">333.</span>
		movex = -int(progress * GEMIMAGESIZE)</p>

		<p class="noindent mono"><span class="line-number">334. </span></p>

		<p class="noindent mono"><span class="line-number">335.</span>
		basex = gem['x']</p>

		<p class="noindent mono"><span class="line-number">336.</span>
		basey = gem['y']</p>

		<p class="noindent mono"><span class="line-number">337.</span>
		if basey == ROWABOVEBOARD:</p>

		<p class="noindent mono"><span class="line-number">338.</span>
		basey = -1</p>

		<p class="noindent mono"><span class="line-number">339. </span></p>

		<p class="noindent mono"><span class="line-number">340.</span>
		pixelx = XMARGIN + (basex * GEMIMAGESIZE)</p>

		<p class="noindent mono"><span class="line-number">341.</span>
		pixely = YMARGIN + (basey * GEMIMAGESIZE)</p>

		<p class="noindent mono"><span class="line-number">342.</span>
		r = pygame.Rect( (pixelx + movex, pixely + movey, GEMIMAGESIZE, GEMIMAGESIZE) )</p>

		<p class="noindent mono"><span class="line-number">343.</span>
		DISPLAYSURF.blit(GEMIMAGES[gem['imageNum']], r)</p>

		<p class="noindent mono"><span class="line-number">344. </span></p>

		<p class="noindent mono"><span class="line-number">345. </span></p>

		<p class="noindent mono"><span class="line-number">346.</span>
		def pullDownAllGems(board):</p>

		<p class="noindent mono"><span class="line-number">347.</span>
		<span class="comment"># pulls down gems on the board to the bottom to
		fill in any gaps</span></p>

		<p class="noindent mono"><span class="line-number">348.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">349.</span>
		gemsInColumn = []</p>

		<p class="noindent mono"><span class="line-number">350.</span>
		for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">351.</span>
		if board[x][y] != EMPTY_SPACE:</p>

		<p class="noindent mono"><span class="line-number">352.</span>
		gemsInColumn.append(board[x][y])</p>

		<p class="noindent mono"><span class="line-number">353.</span>
		board[x] = ([EMPTY_SPACE] * (BOARDHEIGHT - len(gemsInColumn))) + gemsInColumn</p>

		<p class="noindent mono"><span class="line-number">354. </span></p>

		<p class="noindent mono"><span class="line-number">355. </span></p>

		<p class="noindent mono"><span class="line-number">356.</span>
		def getGemAt(board, x, y):</p>

		<p class="noindent mono"><span class="line-number">357.</span>
		if x &lt; 0 or y &lt; 0 or x &gt;= BOARDWIDTH or y &gt;= BOARDHEIGHT:</p>

		<p class="noindent mono"><span class="line-number">358.</span>
		return None</p>

		<p class="noindent mono"><span class="line-number">359.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">360.</span>
		return board[x][y]</p>

		<p class="noindent mono"><span class="line-number">361. </span></p>

		<p class="noindent mono"><span class="line-number">362. </span></p>

		<p class="noindent mono"><span class="line-number">363.</span>
		def getDropSlots(board):</p>

		<p class="noindent mono"><span class="line-number">364.</span>
		<span class="comment"># Creates a &quot;drop slot&quot; for each column
		and fills the slot with a</span></p>

		<p class="noindent mono"><span class="line-number">365.</span>
		<span class="comment"># number of gems that that column is lacking.
		This function assumes</span></p>

		<p class="noindent mono"><span class="line-number">366.</span>
		<span class="comment"># that the gems have been gravity dropped
		already.</span></p>

		<p class="noindent mono"><span class="line-number">367.</span>
		boardCopy = copy.deepcopy(board)</p>

		<p class="noindent mono"><span class="line-number">368.</span>
		pullDownAllGems(boardCopy)</p>

		<p class="noindent mono"><span class="line-number">369. </span></p>

		<p class="noindent mono"><span class="line-number">370.</span>
		dropSlots = []</p>

		<p class="noindent mono"><span class="line-number">371.</span>
		for i in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">372.</span>
		dropSlots.append([])</p>

		<p class="noindent mono"><span class="line-number">373. </span></p>

		<p class="noindent mono"><span class="line-number">374.</span>
		<span class="comment"># count the number of empty spaces in each column
		on the board</span></p>

		<p class="noindent mono"><span class="line-number">375.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">376.</span>
		for y in range(BOARDHEIGHT-1, -1, -1): <span class="comment"># start
		from bottom, going up</span></p>

		<p class="noindent mono"><span class="line-number">377.</span>
		if boardCopy[x][y] == EMPTY_SPACE:</p>

		<p class="noindent mono"><span class="line-number">378.</span>
		possibleGems = list(range(len(GEMIMAGES)))</p>

		<p class="noindent mono"><span class="line-number">379.</span>
		for offsetX, offsetY in ((0, -1), (1, 0), (0, 1), (-1, 0)):</p>

		<p class="noindent mono"><span class="line-number">380.</span>
		<span class="comment"># Narrow down the possible gems we should put in
		the</span></p>

		<p class="noindent mono"><span class="line-number">381.</span>
		<span class="comment"># blank space so we don't end up putting an two
		of</span></p>

		<p class="noindent mono"><span class="line-number">382.</span>
		<span class="comment"># the same gems next to each other when they
		drop.</span></p>

		<p class="noindent mono"><span class="line-number">383.</span>
		neighborGem = getGemAt(boardCopy, x + offsetX, y + offsetY)</p>

		<p class="noindent mono"><span class="line-number">384.</span>
		if neighborGem != None and neighborGem in possibleGems:</p>

		<p class="noindent mono"><span class="line-number">385.</span>
		possibleGems.remove(neighborGem)</p>

		<p class="noindent mono"><span class="line-number">386. </span></p>

		<p class="noindent mono"><span class="line-number">387.</span>
		newGem = random.choice(possibleGems)</p>

		<p class="noindent mono"><span class="line-number">388.</span>
		boardCopy[x][y] = newGem</p>

		<p class="noindent mono"><span class="line-number">389.</span>
		dropSlots[x].append(newGem)</p>

		<p class="noindent mono"><span class="line-number">390.</span>
		return dropSlots</p>

		<p class="noindent mono"><span class="line-number">391. </span></p>

		<p class="noindent mono"><span class="line-number">392. </span></p>

		<p class="noindent mono"><span class="line-number">393.</span>
		def findMatchingGems(board):</p>

		<p class="noindent mono"><span class="line-number">394.</span>
		gemsToRemove = [] <span class="comment"># a list of lists of gems in
		matching triplets that should be removed</span></p>

		<p class="noindent mono"><span class="line-number">395.</span>
		boardCopy = copy.deepcopy(board)</p>

		<p class="noindent mono"><span class="line-number">396. </span></p>

		<p class="noindent mono"><span class="line-number">397.</span>
		<span class="comment"># loop through each space, checking for 3
		adjacent identical gems</span></p>

		<p class="noindent mono"><span class="line-number">398.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">399.</span>
		for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">400.</span>
		<span class="comment"># look for horizontal matches</span></p>

		<p class="noindent mono"><span class="line-number">401.</span>
		if getGemAt(boardCopy, x, y) == getGemAt(boardCopy, x + 1, y) ==
		getGemAt(boardCopy, x + 2, y) and getGemAt(boardCopy, x, y) != EMPTY_SPACE:</p>

		<p class="noindent mono"><span class="line-number">402.</span>
		targetGem = boardCopy[x][y]</p>

		<p class="noindent mono"><span class="line-number">403.</span>
		offset = 0</p>

		<p class="noindent mono"><span class="line-number">404.</span>
		removeSet = []</p>

		<p class="noindent mono"><span class="line-number">405.</span>
		while getGemAt(boardCopy, x + offset, y) == targetGem:</p>

		<p class="noindent mono"><span class="line-number">406.</span>
		<span class="comment"># keep checking, in case there's more than 3 gems
		in a row</span></p>

		<p class="noindent mono"><span class="line-number">407.</span>
		removeSet.append((x + offset, y))</p>

		<p class="noindent mono"><span class="line-number">408.</span>
		boardCopy[x + offset][y] = EMPTY_SPACE</p>

		<p class="noindent mono"><span class="line-number">409.</span>
		offset += 1</p>

		<p class="noindent mono"><span class="line-number">410.</span>
		gemsToRemove.append(removeSet)</p>

		<p class="noindent mono"><span class="line-number">411. </span></p>

		<p class="noindent mono"><span class="line-number">412.</span>
		<span class="comment"># look for vertical matches</span></p>

		<p class="noindent mono"><span class="line-number">413.</span>
		if getGemAt(boardCopy, x, y) == getGemAt(boardCopy, x, y + 1) == getGemAt(boardCopy,
		x, y + 2) and getGemAt(boardCopy, x, y) != EMPTY_SPACE:</p>

		<p class="noindent mono"><span class="line-number">414.</span>
		targetGem = boardCopy[x][y]</p>

		<p class="noindent mono"><span class="line-number">415.</span>
		offset = 0</p>

		<p class="noindent mono"><span class="line-number">416.</span>
		removeSet = []</p>

		<p class="noindent mono"><span class="line-number">417.</span>
		while getGemAt(boardCopy, x, y + offset) == targetGem:</p>

		<p class="noindent mono"><span class="line-number">418.</span>
		<span class="comment"># keep checking if there's more than 3 gems in a
		row</span></p>

		<p class="noindent mono"><span class="line-number">419.</span>
		removeSet.append((x, y + offset))</p>

		<p class="noindent mono"><span class="line-number">420.</span>
		boardCopy[x][y + offset] = EMPTY_SPACE</p>

		<p class="noindent mono"><span class="line-number">421.</span>
		offset += 1</p>

		<p class="noindent mono"><span class="line-number">422.</span>
		       gemsToRemove.append(removeSet)</p>

		<p class="noindent mono"><span class="line-number">423. </span></p>

		<p class="noindent mono"><span class="line-number">424.</span>
		return gemsToRemove</p>

		<p class="noindent mono"><span class="line-number">425. </span></p>

		<p class="noindent mono"><span class="line-number">426. </span></p>

		<p class="noindent mono"><span class="line-number">427.</span>
		def highlightSpace(x, y):</p>

		<p class="noindent mono"><span class="line-number">428.</span>
		pygame.draw.rect(DISPLAYSURF, HIGHLIGHTCOLOR, BOARDRECTS[x][y], 4)</p>

		<p class="noindent mono"><span class="line-number">429. </span></p>

		<p class="noindent mono"><span class="line-number">430. </span></p>

		<p class="noindent mono"><span class="line-number">431.</span>
		def getDroppingGems(board):</p>

		<p class="noindent mono"><span class="line-number">432.</span>
		<span class="comment"># Find all the gems that have an empty space
		below them</span></p>

		<p class="noindent mono"><span class="line-number">433.</span>
		boardCopy = copy.deepcopy(board)</p>

		<p class="noindent mono"><span class="line-number">434.</span>
		droppingGems = []</p>

		<p class="noindent mono"><span class="line-number">435.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">436.</span>
		for y in range(BOARDHEIGHT - 2, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">437.</span>
		if boardCopy[x][y + 1] == EMPTY_SPACE and boardCopy[x][y] != EMPTY_SPACE:</p>

		<p class="noindent mono"><span class="line-number">438.</span>
		<span class="comment"># This space drops if not empty but the space
		below it is</span></p>

		<p class="noindent mono"><span class="line-number">439.</span>
		droppingGems.append( {'imageNum': boardCopy[x][y], 'x': x, 'y': y, 'direction':
		DOWN} )</p>

		<p class="noindent mono"><span class="line-number">440.</span>
		boardCopy[x][y] = EMPTY_SPACE</p>

		<p class="noindent mono"><span class="line-number">441.</span>
		return droppingGems</p>

		<p class="noindent mono"><span class="line-number">442. </span></p>

		<p class="noindent mono"><span class="line-number">443. </span></p>

		<p class="noindent mono"><span class="line-number">444.</span>
		def animateMovingGems(board, gems, pointsText, score):</p>

		<p class="noindent mono"><span class="line-number">445.</span>
		<span class="comment"># pointsText is a dictionary with keys 'x', 'y',
		and 'points'</span></p>

		<p class="noindent mono"><span class="line-number">446.</span>
		progress = 0 <span class="comment"># progress at 0 represents
		beginning, 100 means finished.</span></p>

		<p class="noindent mono"><span class="line-number">447.</span>
		while progress &lt; 100: <span class="comment"># animation loop</span></p>

		<p class="noindent mono"><span class="line-number">448.</span>
		DISPLAYSURF.fill(BGCOLOR)</p>

		<p class="noindent mono"><span class="line-number">449.</span>
		drawBoard(board)</p>

		<p class="noindent mono"><span class="line-number">450.</span>
		for gem in gems: <span class="comment"># Draw each gem.</span></p>

		<p class="noindent mono"><span class="line-number">451.</span>
		drawMovingGem(gem, progress)</p>

		<p class="noindent mono"><span class="line-number">452.</span>
		drawScore(score)</p>

		<p class="noindent mono"><span class="line-number">453.</span>
		for pointText in pointsText:</p>

		<p class="noindent mono"><span class="line-number">454.</span>
		pointsSurf = BASICFONT.render(str(pointText['points']), 1, SCORECOLOR)</p>

		<p class="noindent mono"><span class="line-number">455.</span>
		pointsRect = pointsSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">456.</span>
		pointsRect.center = (pointText['x'], pointText['y'])</p>

		<p class="noindent mono"><span class="line-number">457.</span>
		DISPLAYSURF.blit(pointsSurf, pointsRect)</p>

		<p class="noindent mono"><span class="line-number">458. </span></p>

		<p class="noindent mono"><span class="line-number">459.</span>
		pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">460.</span>
		FPSCLOCK.tick(FPS)</p>

		<p class="noindent mono"><span class="line-number">461.</span>
		progress += MOVERATE <span class="comment"># progress the animation a
		little bit more for the next frame</span></p>

		<p class="noindent mono"><span class="line-number">462. </span></p>

		<p class="noindent mono"><span class="line-number">463. </span></p>

		<p class="noindent mono"><span class="line-number">464.</span>
		def moveGems(board, movingGems):</p>

		<p class="noindent mono"><span class="line-number">465.</span>
		<span class="comment"># movingGems is a list of dicts with keys x, y,
		direction, imageNum</span></p>

		<p class="noindent mono"><span class="line-number">466.</span>
		for gem in movingGems:</p>

		<p class="noindent mono"><span class="line-number">467.</span>
		if gem['y'] != ROWABOVEBOARD:</p>

		<p class="noindent mono"><span class="line-number">468.</span>
		board[gem['x']][gem['y']] = EMPTY_SPACE</p>

		<p class="noindent mono"><span class="line-number">469.</span>
		movex = 0</p>

		<p class="noindent mono"><span class="line-number">470.</span>
		movey = 0</p>

		<p class="noindent mono"><span class="line-number">471.</span>
		if gem['direction'] == LEFT:</p>

		<p class="noindent mono"><span class="line-number">472.</span>
		movex = -1</p>

		<p class="noindent mono"><span class="line-number">473.</span>
		elif gem['direction'] == RIGHT:</p>

		<p class="noindent mono"><span class="line-number">474.</span>
		movex = 1</p>

		<p class="noindent mono"><span class="line-number">475.</span>
		elif gem['direction'] == DOWN:</p>

		<p class="noindent mono"><span class="line-number">476.</span>
		 movey = 1</p>

		<p class="noindent mono"><span class="line-number">477.</span>
		elif gem['direction'] == UP:</p>

		<p class="noindent mono"><span class="line-number">478.</span>
		movey = -1</p>

		<p class="noindent mono"><span class="line-number">479.</span>
		board[gem['x'] + movex][gem['y'] + movey] = gem['imageNum']</p>

		<p class="noindent mono"><span class="line-number">480.</span>
		else:</p>

		<p class="noindent mono"><span class="line-number">481.</span>
		<span class="comment"># gem is located above the board (where new gems
		come from)</span></p>

		<p class="noindent mono"><span class="line-number">482.</span>
		board[gem['x']][0] = gem['imageNum'] <span class="comment"># move to
		top row</span></p>

		<p class="noindent mono"><span class="line-number">483. </span></p>

		<p class="noindent mono"><span class="line-number">484. </span></p>

		<p class="noindent mono"><span class="line-number">485.</span>
		def fillBoardAndAnimate(board, points, score):</p>

		<p class="noindent mono"><span class="line-number">486.</span>
		dropSlots = getDropSlots(board)</p>

		<p class="noindent mono"><span class="line-number">487.</span>
		while dropSlots != [[]] * BOARDWIDTH:</p>

		<p class="noindent mono"><span class="line-number">488.</span>
		<span class="comment"># do the dropping animation as long as there are
		more gems to drop</span></p>

		<p class="noindent mono"><span class="line-number">489.</span>
		movingGems = getDroppingGems(board)</p>

		<p class="noindent mono"><span class="line-number">490.</span>
		for x in range(len(dropSlots)):</p>

		<p class="noindent mono"><span class="line-number">491.</span>
		if len(dropSlots[x]) != 0:</p>

		<p class="noindent mono"><span class="line-number">492.</span>
		<span class="comment"># cause the lowest gem in each slot to begin
		moving in the DOWN direction</span></p>

		<p class="noindent mono"><span class="line-number">493.</span>
		movingGems.append({'imageNum': dropSlots[x][0], 'x': x, 'y': ROWABOVEBOARD,
		'direction': DOWN})</p>

		<p class="noindent mono"><span class="line-number">494. </span></p>

		<p class="noindent mono"><span class="line-number">495.</span>
		boardCopy = getBoardCopyMinusGems(board, movingGems)</p>

		<p class="noindent mono"><span class="line-number">496.</span>
		animateMovingGems(boardCopy, movingGems, points, score)</p>

		<p class="noindent mono"><span class="line-number">497.</span>
		moveGems(board, movingGems)</p>

		<p class="noindent mono"><span class="line-number">498. </span></p>

		<p class="noindent mono"><span class="line-number">499.</span>
		<span class="comment"># Make the next row of gems from the drop slots</span></p>

		<p class="noindent mono"><span class="line-number">500.</span>
		<span class="comment"># the lowest by deleting the previous lowest
		gems.</span></p>

		<p class="noindent mono"><span class="line-number">501.</span>
		for x in range(len(dropSlots)):</p>

		<p class="noindent mono"><span class="line-number">502.</span>
		           if len(dropSlots[x]) == 0:</p>

		<p class="noindent mono"><span class="line-number">503.</span>
		continue</p>

		<p class="noindent mono"><span class="line-number">504.</span>
		board[x][0] = dropSlots[x][0]</p>

		<p class="noindent mono"><span class="line-number">505.</span>
		del dropSlots[x][0]</p>

		<p class="noindent mono"><span class="line-number">506. </span></p>

		<p class="noindent mono"><span class="line-number">507. </span></p>

		<p class="noindent mono"><span class="line-number">508.</span>
		def checkForGemClick(pos):</p>

		<p class="noindent mono"><span class="line-number">509.</span>
		<span class="comment"># See if the mouse click was on the board</span></p>

		<p class="noindent mono"><span class="line-number">510.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">511.</span>
		for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">512.</span>
		if BOARDRECTS[x][y].collidepoint(pos[0], pos[1]):</p>

		<p class="noindent mono"><span class="line-number">513.</span>
		return {'x': x, 'y': y}</p>

		<p class="noindent mono"><span class="line-number">514.</span>
		return None <span class="comment"># Click was not on the board.</span></p>

		<p class="noindent mono"><span class="line-number">515. </span></p>

		<p class="noindent mono"><span class="line-number">516. </span></p>

		<p class="noindent mono"><span class="line-number">517.</span>
		def drawBoard(board):</p>

		<p class="noindent mono"><span class="line-number">518.</span>
		for x in range(BOARDWIDTH):</p>

		<p class="noindent mono"><span class="line-number">519.</span>
		for y in range(BOARDHEIGHT):</p>

		<p class="noindent mono"><span class="line-number">520.</span>
		pygame.draw.rect(DISPLAYSURF, GRIDCOLOR, BOARDRECTS[x][y], 1)</p>

		<p class="noindent mono"><span class="line-number">521.</span>
		gemToDraw = board[x][y]</p>

		<p class="noindent mono"><span class="line-number">522.</span>
		if gemToDraw != EMPTY_SPACE:</p>

		<p class="noindent mono"><span class="line-number">523.</span>
		DISPLAYSURF.blit(GEMIMAGES[gemToDraw], BOARDRECTS[x][y])</p>

		<p class="noindent mono"><span class="line-number">524. </span></p>

		<p class="noindent mono"><span class="line-number">525. </span></p>

		<p class="noindent mono"><span class="line-number">526.</span>
		def getBoardCopyMinusGems(board, gems):</p>

		<p class="noindent mono"><span class="line-number">527.</span>
		<span class="comment"># Creates and returns a copy of the passed board
		data structure,</span></p>

		<p class="noindent mono"><span class="line-number">528.</span>
		<span class="comment"># with the gems in the &quot;gems&quot; list
		removed from it.</span></p>

		<p class="noindent mono"><span class="line-number">529.</span>
		<span class="comment">#</span></p>

		<p class="noindent mono"><span class="line-number">530.</span>
		<span class="comment"># Gems is a list of dicts, with keys x, y,
		direction, imageNum</span></p>

		<p class="noindent mono"><span class="line-number">531. </span></p>

		<p class="noindent mono"><span class="line-number">532.</span>
		boardCopy = copy.deepcopy(board)</p>

		<p class="noindent mono"><span class="line-number">533. </span></p>

		<p class="noindent mono"><span class="line-number">534.</span>
		<span class="comment"># Remove some of the gems from this board data
		structure copy.</span></p>

		<p class="noindent mono"><span class="line-number">535.</span>
		for gem in gems:</p>

		<p class="noindent mono"><span class="line-number">536.</span>
		if gem['y'] != ROWABOVEBOARD:</p>

		<p class="noindent mono"><span class="line-number">537.</span>
		boardCopy[gem['x']][gem['y']] = EMPTY_SPACE</p>

		<p class="noindent mono"><span class="line-number">538.</span>
		return boardCopy</p>

		<p class="noindent mono"><span class="line-number">539. </span></p>

		<p class="noindent mono"><span class="line-number">540. </span></p>

		<p class="noindent mono"><span class="line-number">541.</span>
		def drawScore(score):</p>

		<p class="noindent mono"><span class="line-number">542.</span>
		scoreImg = BASICFONT.render(str(score), 1, SCORECOLOR)</p>

		<p class="noindent mono"><span class="line-number">543.</span>
		scoreRect = scoreImg.get_rect()</p>

		<p class="noindent mono"><span class="line-number">544.</span>
		scoreRect.bottomleft = (10, WINDOWHEIGHT - 6)</p>

		<p class="noindent mono"><span class="line-number">545.</span>
		DISPLAYSURF.blit(scoreImg, scoreRect)</p>

		<p class="noindent mono"><span class="line-number">546. </span></p>

		<p class="noindent mono"><span class="line-number">547. </span></p>

		<p class="noindent mono"><span class="line-number">548.</span> if __name__ == '__main__':</p>
		<p class="noindent mono"><span class="line-number">549.</span>    main()</p>
	</div>

	<h1 class="subheading" id="summary">Summary</h1>
	<p class="noindent">I hope these game programs have given you your own ideas about what games you’d like to make and how you can write the code for them. Even if you don’t have any ideas of your own, it’s great practice to try to program clones of other games you’ve played.</p>
	<p>Here are several websites that can teach you more about programming Python:</p>

	<ul>
		<li><a href="https://pygame.org">https://pygame.org</a> – The official Pygame website has the source code to hundreds of games that people have written that make use of the Pygame library. You can learn a lot by downloading and reading other people’s source code.</li>
		<li><a href="https://python.org/doc/">https://python.org/doc/</a> – More Python tutorials and the documentation of all the Python modules and functions.</li>
		<li><a href="https://pygame.org/docs/">https://pygame.org/docs/</a> – Complete documentation on the modules and functions for Pygame.</li>
		<li><a href="https://reddit.com/r/learnpython">https://reddit.com/r/learnpython</a> and <a href="https://reddit.com/r/learnprogramming">https://reddit.com/r/learnprogramming</a> have several users that could help you with finding resources to learn programming.</li>
		<li><a href="https://inventwithpython.com/pygame">https://inventwithpython.com/pygame</a> – This book's website, which includes all the source code for these programs and additional information. This site also has the image and sound files used in the Pygame programs.</li>
		<li><a href="https://inventwithpython.com">https://inventwithpython.com</a> – The website for the book <i>“Invent Your Own Computer Games with Python”</i>, which covers basic Python programming.</li>
		<li><a href="https://invpy.com/wiki">https://invpy.com/wiki</a> – A wiki that covers individual Python programming concepts that you can look up if you need to learn about something specific.</li>
		<li><a href="https://invpy.com/traces">https://invpy.com/traces</a> – A web application that helps you trace through the execution of the programs in this book, step by step.</li>
		<li><a href="https://invpy.com/videos">https://invpy.com/videos</a> – Videos that accompany the programs in this book.</li>
		<li><a href="http://www.hobbygamedev.com/">http://www.hobbygamedev.com/</a> – A helpful website about how to design and program video games.</li>
		<li><a href="mailto:al@inventwithpython.com">al@inventwithpython.com</a> – My email address. Feel free to email me your questions about this book or about Python programming.</li>
	</ul>

	<p>Or you can find out more about Python by searching the World Wide Web. Go to the search website <a href="https://google.com">https://google.com</a> and search for “Python programming” or “Python tutorials” to find web sites that can teach you more about Python programming.</p>
	<p>Now get going and invent your own games. And good luck!</p>

</body>
</html>
