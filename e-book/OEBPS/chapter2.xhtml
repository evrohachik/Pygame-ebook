<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Chapter 2</title>
</head>

<body>

	<h1 class="heading">Chapter 2 – Pygame Basics</h1>
	<hr class="heading"/>

	<p class="noindent">Just like how Python comes with several modules like random, math, or time that provide additional functions for your programs, the Pygame framework includes several modules with functions for drawing graphics, playing sounds, handling mouse input, and other things.</p>
	<p>This chapter will cover the basic modules and functions that Pygame provides and assumes you already know basic Python programming. If you have trouble with some of the programming concepts, you can read through the <i>“Invent Your Own Computer Games with Python“</i> book online at <a href="https://invpy.com/book">https://invpy.com/book</a>. This book is aimed at complete beginners to programming.</p>
	<p>The <i>“Invent with Python“</i> book also has a few chapters covering Pygame. You can read them online at <a href="https://invpy.com/chap17">https://invpy.com/chap17</a>.</p>
	<p>Once you learn more about Pygame, you can view the other modules that Pygame provides from the online documentation at <a href="https://pygame.org/docs">https://pygame.org/docs</a>.</p>

	<h1 class="subheading">GUI vs. CLI</h1>
	<p class="noindent">The Python programs that you can write with Python’s built-in functions only deal with text through the <span class="mono">print()</span> and <span class="mono">input()</span> functions. Your program can display text on the screen and let the user type in text from the keyboard. This type of program has a command line interface, or CLI (which is pronounced like the first part of “climb“ and rhymes with “sky“). These programs are somewhat limited because they can’t display graphics, have colors, or use the mouse. These CLI programs only get input from the keyboard with the <span class="mono">input()</span> function and even then user must press Enter before the program can respond to the input. This means real-time (that is, continuing to run code without waiting for the user) action games are impossible to make.</p>
	<p>Pygame provides functions for creating programs with a graphical user interface, or GUI (pronounced, “gooey”). Instead of a text-based CLI, programs with a graphics-based GUI can show a window with images and colors.</p>

	<h1 class="subheading">Source Code for Hello World with Pygame</h1>
	<p class="noindent">Our first program made with Pygame is a small program that makes a window that says “Hello World!” appear on the screen. Open a new file editor window by clicking on IDLE’s <b>File</b> menu, then New Window. Type in the following code into IDLE’s file editor and save it as <i>blankpygame.py</i>. Then run the program by pressing <b>F5</b> or selecting <b>Run > Run Module</b> from the menu at the top of the file editor.</p>
	<p>Remember, do not type the numbers or the periods at the beginning of each line (that’s just for reference in this book).</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">1.</span> <span class="keyword">import</span> pygame, sys</p>
		<p class="noindent mono"><span class="line-number">2.</span> <span class="keyword">from</span> pygame.locals <span class="keyword">import</span> *</p>
		<p class="noindent mono"><span class="line-number">3.</span></p>
		<p class="noindent mono"><span class="line-number">4.</span> pygame.init()</p>
		<p class="noindent mono"><span class="line-number">5.</span> DISPLAYSURF = pygame.display.set_mode((400, 300))</p>
		<p class="noindent mono"><span class="line-number">6.</span> pygame.display.set_caption(<span class="string">'Hello World!'</span>)</p>
		<p class="noindent mono"><span class="line-number">7.</span> <span class="keyword">while True</span>: <span class="comment"># main game loop</span></p>
		<p class="noindent mono"><span class="line-number">8.</span> &#160;&#160;&#160;&#160;<span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</p>
		<p class="noindent mono"><span class="line-number">9.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="keyword">if</span> event.type == QUIT:</p>
		<p class="noindent mono"><span class="line-number">10.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pygame.quit()</p>
		<p class="noindent mono"><span class="line-number">11.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sys.exit()</p>
		<p class="noindent mono"><span class="line-number">12.</span> &#160;&#160;&#160;pygame.display.update()</p>
	</div>

	<p>When you run this program, a black window like this will appear:</p>

	<p>Yay! You’ve just made the world’s most boring video game! It’s just a blank window with “Hello World!” at the top of the window (in what is called the window’s title bar, which holds the caption text). But creating a window is the first step to making graphical games. When you click on the X button in the corner of the window, the program will end and the window will disappear.</p>
	<p>Calling the <span class="mono">print()</span> function to make text appear in the window won’t work because <span class="mono">print()</span> is a function for CLI programs. The same goes for <span class="mono">input()</span> to get keyboard input from the user. Pygame uses other functions for input and output which are explained later in this chapter. For now, let’s look at each line in our “Hello World” program in more detail.</p>

	<h1 class="subheading">Setting Up a Pygame Program</h1>
	<p class="noindent">The first few lines of code in the Hello World program are lines that will begin almost every program you write that uses Pygame.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">1.</span> import pygame, sys</p>
	</div>

	<p>Line 1 is a simple <span class="mono">import</span> statement that imports the <span class="mono">pygame</span> and <span class="mono">sys</span> modules so that our program can use the functions in them. All of the Pygame functions dealing with graphics, sound, and other features that Pygame provides are in the <span class="mono">pygame</span> module.</p>
	<p>Note that when you import the pygame module you automatically import all the modules that are in the pygame module as well, such as <span class="mono">pygame.images</span> and <span class="mono">pygame.mixer.music</span>. There’s no need to import these modules-inside-modules with additional <span class="mono">import</span> statements.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">2.</span> from pygame.locals import *</p>
	</div>

	<p>Line 2 is also an <span class="mono">import</span> statement. However, instead of the <span class="mono">import modulename</span> format, it uses the from modulename import * format. Normally if you want to call a function that is in a module, you must use the <span class="mono">modulename.functionname()</span> format after importing the module. However, with from <span class="mono">modulename import *</span>, you can skip the modulename. portion and simply use <span class="mono">functionname()</span> (just like Python’s built-in functions).</p>
	<p>The reason we use this form of import statement for <span class="mono">pygame.locals</span> is because pygame.locals contains several constant variables that are easy to identify as being in the pygame.locals module without <span class="mono">pygame.locals</span>. in front of them. For all other modules, you generally want to use the regular import modulename format. (There is more information about why you want to do this at <a href="https://invpy.com/namespaces">https://invpy.com/namespaces</a>.)</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">4.</span> pygame.init()</p>
	</div>

	<p>Line 4 is the <span class="mono">pygame.init()</span> function call, which always needs to be called after importing the pygame module and before calling any other Pygame function. You don’t need to know what this function does, you just need to know that it needs to be called first in order for many Pygame functions to work. If you ever see an error message like pygame.error: font not initialized, check to see if you forgot to call <span class="mono">pygame.init()</span> at the start of your program.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">5.</span> DISPLAYSURF = pygame.display.set_mode((400, 300))</p>
	</div>

	<p>Line 5 is a call to the <span class="mono">pygame.display.set_mode()</span> function, which returns the pygame.Surface object for the window. (Surface objects are described later in this chapter.) Notice that we pass a tuple value of two integers to the function: <span class="mono">(400, 300)</span>. This tuple tells the <span class="mono">set_mode()</span> function how wide and how high to make the window in pixels. <span class="mono">(400, 300)</span> will make a window with a width of 400 pixels and height of 300 pixels.</p>
	<p>Remember to pass a tuple of two integers to <span class="mono">set_mode()</span>, not just two integers themselves. The correct way to call the function is like this: <span class="mono">pygame.display.set_mode((400, 300))</span>. A function call like <span class="mono">pygame.display.set_mode(400, 300)</span> will cause an error that looks like this: <span class="mono">TypeError: argument 1 must be 2-item sequence, not int</span>.</p>
	<p>The <span class="mono">pygame.Surface</span> object (we will just call them Surface objects for short) returned is stored in a variable named <span class="mono">DISPLAYSURF</span>.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">6.</span> pygame.display.set_caption('Hello World!')</p>
	</div>

	<p>Line 6 sets the caption text that will appear at the top of the window by calling the <span class="mono">pygame.display.set_caption()</span> function. The string value <span class="mono">'Hello World!'</span> is passed in this function call to make that text appear as the caption:</p>

	<h1 class="subheading">Game Loops and Game States</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">7.</span> <span class="keyword">while True</span>: <span class="comment"># main game loop</span></p>
		<p class="noindent mono"><span class="line-number">8.</span> &#160;&#160;&#160;&#160;<span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</p>
	</div>

	<p>Line 7 is a <span class="mono">while</span> loop that has a condition of simply the value <span class="mono">True</span>. This means that it never exits due to its condition evaluating to <span class="mono">False</span>. The only way the program execution will ever exit the loop is if a break statement is executed (which moves execution to the first line after the loop) or <span class="mono">sys.exit()</span> (which terminates the program). If a loop like this was inside a function, a <span class="mono">return</span> statement will also move execution out of the loop (as well as the function too).</p>
	<p>The games in this book all have these while True loops in them along with a comment calling it the “main game loop”. A <b>game loop</b> (also called a <b>main loop</b>) is a loop where the code does three things:</p>

	<ol>
		<li>Handles events.</li>
		<li>Updates the game state.</li>
		<li>Draws the game state to the screen.</li>
	</ol>

	<p>The game state is simply a way of referring to a set of values for all the variables in a game program. In many games, the game state includes the values in the variables that tracks the player’s health and position, the health and position of any enemies, which marks have been made on a board, the score, or whose turn it is. Whenever something happens like the player taking damage (which lowers their health value), or an enemy moves somewhere, or something happens in the game world we say that the game state has changed.</p>
	<p>If you’ve ever played a game that let you saved, the “save state” is the game state at the point that you’ve saved it. In most games, pausing the game will prevent the game state from changing.</p>
	<p>Since the game state is usually updated in response to events (such as mouse clicks or keyboard presses) or the passage of time, the game loop is constantly checking and re-checking many times a second for any new events that have happened. Inside the main loop is code that looks at which events have been created (with Pygame, this is done by calling the <span class="mono">pygame.event.get()</span> function). The main loop also has code that updates the game state based on which events have been created. This is usually called <b>event handling</b>.</p>

	<h1 class="subheading"><span class="mono">pygame.event.Event</span> Objects</h1>
	<p class="noindent">Any time the user does one of several actions (they are listed later in this chapter) such as pressing a keyboard key or moving the mouse on the program’s window, a pygame.event.Event object is created by the Pygame library to record this “event”. (This is a type of object called Event that exists in the <span class="mono">event</span> module, which itself is in the <span class="mono">pygame</span> module.) We can find out which events have happened by calling the <span class="mono">pygame.event.get()</span> function, which returns a list of <span class="mono">pygame.event.Event</span> objects (which we will just call Event objects for short).</p>
	<p>The list of Event objects will be for each event that has happened since the last time the <span class="mono">pygame.event.get()</span> function was called. (Or, if <span class="mono">pygame.event.get()</span> has never been called, the events that have happened since the start of the program.)</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">7.</span> <span class="keyword">while True</span>: <span class="comment"># main game loop</span></p>
		<p class="noindent mono"><span class="line-number">8.</span> &#160;&#160;&#160;&#160;<span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</p>
	</div>

	<p>Line 8 is a for loop that will iterate over the list of Event objects that was returned by <span class="mono">pygame.event.get()</span>. On each iteration through the for loop, a variable named event will be assigned the value of the next event object in this list. The list of Event objects returned from <span class="mono">pygame.event.get()</span> will be in the order that the events happened. If the user clicked the mouse and then pressed a keyboard key, the Event object for the mouse click would be the first item in the list and the Event object for the keyboard press would be second. If no events have happened, then <span class="mono">pygame.event.get()</span> will return a blank list.</p>

	<h1 class="subheading">The <span class="mono">QUIT</span> Event and <span class="mono">pygame.quit()</span> Function</h1>
	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">9.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="keyword">if</span> event.type == QUIT:</p>
		<p class="noindent mono"><span class="line-number">10.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pygame.quit()</p>
		<p class="noindent mono"><span class="line-number">11.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sys.exit()</p>
	</div>

	<p>Event objects have a member variable (also called attributes or properties) named type which tells us what kind of event the object represents. Pygame has a constant variable for each of possible types in the pygame.locals modules. Line 9 checks if the Event object’s type is equal to the constant QUIT. Remember that since we used the from pygame.locals import * form of the import statement, we only have to type QUIT instead of pygame.locals.QUIT.</p>
	<p>If the Event object is a quit event, then the pygame.quit() and sys.exit() functions are called. The pygame.quit() function is sort of the opposite of the pygame.init() function: it runs code that deactivates the Pygame library. Your programs should always call pygame.quit() before they call sys.exit() to terminate the program. Normally it doesn’t really matter since Python closes it when the program exits anyway. But there is a bug in IDLE that causes IDLE to hang if a Pygame program terminates before pygame.quit() is called.</p>
	<p>Since we have no if statements that run code for other types of Event object, there is no event-handling code for when the user clicks the mouse, presses keyboard keys, or causes any other type of Event objects to be created. The user can do things to create these Event objects but it doesn’t change anything in the program because the program does not have any event-handling code for these types of Event objects. After the for loop on line 8 is done handling all the Event objects that have been returned by pygame.event.get(), the program execution continues to line 12.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">12.</span> &#160;&#160;&#160;pygame.display.update()</p>
	</div>

</body>
</html>
