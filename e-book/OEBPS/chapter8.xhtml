<?xml version="1.0" encoding="UTF-8" standalone="no" ?><html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="http://www.w3.org/1999/xhtml; charset=utf-8" http-equiv="Content-Type"/>
<link href="styles/zstylesheet.css" rel="stylesheet" type="text/css"/>
<title>Chapter 8</title>
</head>

<body>

	<h1 class="heading">Chapter 8 – Squirrel Eat Squirrel</h1>
	<hr class="heading"/>

	<h1 class="subheading" id="">How to Play Squirrel Eat Squirrel</h1>
	<p class="noindent">Squirrel Eat Squirrel is loosely based on the game “<i>Katamari Damacy</i>”. The player controls a small squirrel that must hop around the screen eating smaller squirrels and avoiding larger squirrels. Each time the player’s squirrel eats a squirrel that is smaller than it, it grows larger. If the player’s squirrel gets hit by a larger squirrel larger than it, it loses a life point. The player wins when the squirrel becomes a monstrously large squirrel called the Omega Squirrel. The player loses if their squirrel gets hit three times.</p>
	<p>I’m not really sure where I got the idea for a video game where squirrels eat each other. I’m a little strange sometimes.</p>

	<h1 class="subheading" id="">The Design of Squirrel Eat Squirrel</h1>
	<p class="noindent">There are three types of data structures in this game, which are represented as dictionary values. The types are player squirrels, enemy squirrels, and grass objects. There is only one player squirrel object at a time in the game.</p>
	<p>Note: Technically, “object” means something specific in Object-Oriented Programming. Python does have OOP features, but they aren’t covered in this book. Technically the Pygame objects such as “Rect object” or “Surface object” are objects. But I’m going to use the term “object” in this book to refer to “things that exist in the game world”. But really, the player squirrel, enemy squirrels, and grass “objects” are just dictionary values.</p>
	<p>All the objects have the following keys in their dictionary value: <span class="mono">'x'</span>, <span class="mono">'y'</span>, and <span class="mono">'rect'</span>. The <span class="mono">'x'</span> and <span class="mono">'y'</span> key’s value give the coordinates of the top left of the object in <i>game world coordinates</i>. These are different from pixel coordinates (which is what the <span class="mono">'rect'</span> key’s value tracks). The difference between game world and pixel coordinates will be explained when you learn about the concept of cameras.</p>
	<p>In addition, the player squirrel, enemy squirrel, and grass objects have other keys which are explained in a large comment at the start of the source code. </p>

	<h1 class="subheading" id="">Source Code to Squirrel Eat Squirrel</h1>
	<p class="noindent">This source code can be downloaded from <a href="https://invpy.com/squirrel.py">https://invpy.com/squirrel.py</a>. If you get any error messages, look at the line number that is mentioned in the error message and check your code for any typos. You can also copy and paste your code into the web form at <a href="https://invpy.com/diff/squirrel">https://invpy.com/diff/squirrel</a> to see if the differences between your code and the code in the book.</p>
	<p>You will also need to download the following image files:</p>

	<ul>
		<li><a href="https://invpy.com/gameicon.png">https://invpy.com/gameicon.png</a></li>
		<li><a href="https://invpy.com/squirrel.png">https://invpy.com/squirrel.png</a></li>
		<li><a href="https://invpy.com/grass1.png">https://invpy.com/grass1.png</a></li>
		<li><a href="https://invpy.com/grass2.png">https://invpy.com/grass2.png</a></li>
		<li><a href="https://invpy.com/grass3.png">https://invpy.com/grass3.png</a></li>
		<li><a href="https://invpy.com/grass4.png">https://invpy.com/grass4.png</a></li>
	</ul>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">&#160;&#160;1.</span> <span class="comment"># Squirrel Eat Squirrel (a 2D Katamari Damacy clone)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;2.</span> <span class="comment"># By Al Sweigart al@inventwithpython.com</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;3.</span> <span class="comment"># http://inventwithpython.com/pygame</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;4.</span> <span class="comment"># Creative Commons BY-NC-SA 3.0 US</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;5.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;6.</span> import random, sys, time, math, pygame</p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;7.</span> from pygame.locals import *</p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;8.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;&#160;9.</span> FPS = 30 <span class="comment"># frames per second to update the screen</span></p>
		<p class="noindent mono"><span class="line-number">&#160;10.</span> WINWIDTH = 640 <span class="comment"># width of the program's window, in pixels</span></p>
		<p class="noindent mono"><span class="line-number">&#160;11.</span> WINHEIGHT = 480 <span class="comment"># height in pixels</span></p>
		<p class="noindent mono"><span class="line-number">&#160;12.</span> HALF_WINWIDTH = int(WINWIDTH / 2)</p>
		<p class="noindent mono"><span class="line-number">&#160;13.</span> HALF_WINHEIGHT = int(WINHEIGHT / 2)</p>
		<p class="noindent mono"><span class="line-number">&#160;14.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;15.</span> GRASSCOLOR = (24, 255, 0)</p>
		<p class="noindent mono"><span class="line-number">&#160;16.</span> WHITE = (255, 255, 255)</p>
		<p class="noindent mono"><span class="line-number">&#160;17.</span> RED = (255, 0, 0)</p>
		<p class="noindent mono"><span class="line-number">&#160;18.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;19.</span> CAMERASLACK = 90 &#160;&#160;&#160;&#160;<span class="comment"># how far from the center the squirrel moves before moving the camera</span></p>
		<p class="noindent mono"><span class="line-number">&#160;20.</span> MOVERATE = 9 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># how fast the player moves</span></p>
		<p class="noindent mono"><span class="line-number">&#160;21.</span> BOUNCERATE = 6 &#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># how fast the player bounces (large is slower)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;22.</span> BOUNCEHEIGHT = 30 &#160;&#160;&#160;<span class="comment"># how high the player bounces</span></p>
		<p class="noindent mono"><span class="line-number">&#160;23.</span> STARTSIZE = 25 &#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># how big the player starts off</span></p>
		<p class="noindent mono"><span class="line-number">&#160;24.</span> WINSIZE = 300 &#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># how big the player needs to be to win</span></p>
		<p class="noindent mono"><span class="line-number">&#160;25.</span> INVULNTIME = 2 &#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># how long the player is invulnerable after being hit in seconds</span></p>
		<p class="noindent mono"><span class="line-number">&#160;26.</span> GAMEOVERTIME = 4 &#160;&#160;&#160;&#160;<span class="comment"># how long the &quot;game over&quot; text stays on the screen in seconds</span></p>
		<p class="noindent mono"><span class="line-number">&#160;27.</span> MAXHEALTH = 3 &#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># how much health the player starts with</span></p>
		<p class="noindent mono"><span class="line-number">&#160;28.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;29.</span> NUMGRASS = 80 &#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="comment"># number of grass objects in the active area</span></p>
		<p class="noindent mono"><span class="line-number">&#160;30.</span> NUMSQUIRRELS = 30 &#160;&#160;&#160;<span class="comment"># number of squirrels in the active area</span></p>
		<p class="noindent mono"><span class="line-number">&#160;31.</span> SQUIRRELMINSPEED = 3 <span class="comment"># slowest squirrel speed</span></p>
		<p class="noindent mono"><span class="line-number">&#160;32.</span> SQUIRRELMAXSPEED = 7 <span class="comment"># fastest squirrel speed</span></p>
		<p class="noindent mono"><span class="line-number">&#160;33.</span> DIRCHANGEFREQ = 2 &#160;&#160;&#160;<span class="comment"># % chance of direction change per frame</span></p>
		<p class="noindent mono"><span class="line-number">&#160;34.</span> LEFT = 'left'</p>
		<p class="noindent mono"><span class="line-number">&#160;35.</span> RIGHT = 'right'</p>
		<p class="noindent mono"><span class="line-number">&#160;36.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;37.</span> <span class="comment">&quot;&quot;&quot;</span></p>
		<p class="noindent mono"><span class="line-number">&#160;38.</span> <span class="comment">This program has three data structures to represent the player, enemy squirrels, and grass background objects. The data structures are dictionaries with the following keys:</span></p>
		<p class="noindent mono"><span class="line-number">&#160;39.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;40.</span> <span class="comment">Keys used by all three data structures:</span></p>
		<p class="noindent mono"><span class="line-number">&#160;41.</span> &#160;&#160;&#160;&#160;<span class="comment">'x' - the left edge coordinate of the object in the game world (not a pixel coordinate on the screen)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;42.</span> &#160;&#160;&#160;&#160;<span class="comment">'y' - the top edge coordinate of the object in the game world (not a pixel coordinate on the screen)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;43.</span> &#160;&#160;&#160;&#160;<span class="comment">'rect' - the pygame.Rect object representing where on the screen the object is located.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;44.</span> <span class="comment">Player data structure keys:</span></p>
		<p class="noindent mono"><span class="line-number">&#160;45.</span> &#160;&#160;&#160;&#160;<span class="comment">'surface' - the pygame.Surface object that stores the image of the squirrel which will be drawn to the screen.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;46.</span> &#160;&#160;&#160;&#160;<span class="comment">'facing' - either set to LEFT or RIGHT, stores which direction the player is facing.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;47.</span> &#160;&#160;&#160;&#160;<span class="comment">'size' - the width and height of the player in pixels. (The width &amp; height are always the same.)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;48.</span> &#160;&#160;&#160;&#160;<span class="comment">'bounce' - represents at what point in a bounce the player is in. 0 means standing (no bounce), up to BOUNCERATE (the completion of the bounce)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;49.</span> &#160;&#160;&#160;&#160;<span class="comment">'health' - an integer showing how many more times the player can be hit by a larger squirrel before dying.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;50.</span> <span class="comment">Enemy Squirrel data structure keys:</span></p>
		<p class="noindent mono"><span class="line-number">&#160;51.</span> &#160;&#160;&#160;&#160;<span class="comment">'surface' - the pygame.Surface object that stores the image of the squirrel which will be drawn to the screen.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;52.</span> &#160;&#160;&#160;&#160;<span class="comment">'movex' - how many pixels per frame the squirrel moves horizontally. A negative integer is moving to the left, a positive to the right.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;53.</span> &#160;&#160;&#160;&#160;<span class="comment">'movey' - how many pixels per frame the squirrel moves vertically. A negative integer is moving up, a positive moving down.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;54.</span> &#160;&#160;&#160;&#160;<span class="comment">'width' - the width of the squirrel's image, in pixels</span></p>
		<p class="noindent mono"><span class="line-number">&#160;55.</span> &#160;&#160;&#160;&#160;<span class="comment">'height' - the height of the squirrel's image, in pixels</span></p>
		<p class="noindent mono"><span class="line-number">&#160;56.</span> &#160;&#160;&#160;&#160;<span class="comment">'bounce' - represents at what point in a bounce the player is in. 0 means standing (no bounce), up to BOUNCERATE (the completion of the bounce)</span></p>
		<p class="noindent mono"><span class="line-number">&#160;57.</span> &#160;&#160;&#160;&#160;<span class="comment">'bouncerate' - how quickly the squirrel bounces. A lower number means a quicker bounce.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;58.</span> &#160;&#160;&#160;&#160;<span class="comment">'bounceheight' - how high (in pixels) the squirrel bounces</span></p>
		<p class="noindent mono"><span class="line-number">&#160;59.</span> <span class="comment">Grass data structure keys:</span></p>
		<p class="noindent mono"><span class="line-number">&#160;60.</span> &#160;&#160;&#160;&#160;<span class="comment">'grassImage' - an integer that refers to the index of the pygame.Surface object in GRASSIMAGES used for this grass object</span></p>
		<p class="noindent mono"><span class="line-number">&#160;61.</span> <span class="comment">&quot;&quot;&quot;</span></p>
		<p class="noindent mono"><span class="line-number">&#160;62.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;63.</span> def main():</p>
		<p class="noindent mono"><span class="line-number">&#160;64.</span> &#160;&#160;&#160;&#160;global FPSCLOCK, DISPLAYSURF, BASICFONT, L_SQUIR_IMG, R_SQUIR_IMG, GRASSIMAGES</p>
		<p class="noindent mono"><span class="line-number">&#160;65.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;66.</span> &#160;&#160;&#160;&#160;pygame.init()</p>
		<p class="noindent mono"><span class="line-number">&#160;67.</span> &#160;&#160;&#160;&#160;FPSCLOCK = pygame.time.Clock()</p>
		<p class="noindent mono"><span class="line-number">&#160;68.</span> &#160;&#160;&#160;&#160;pygame.display.set_icon(pygame.image.load('gameicon.png'))</p>
		<p class="noindent mono"><span class="line-number">&#160;69.</span> &#160;&#160;&#160;&#160;DISPLAYSURF = pygame.display.set_mode((WINWIDTH, WINHEIGHT))</p>
		<p class="noindent mono"><span class="line-number">&#160;70.</span> &#160;&#160;&#160;&#160;pygame.display.set_caption('Squirrel Eat Squirrel')</p>
		<p class="noindent mono"><span class="line-number">&#160;71.</span> &#160;&#160;&#160;&#160;BASICFONT = pygame.font.Font('freesansbold.ttf', 32)</p>
		<p class="noindent mono"><span class="line-number">&#160;72.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;73.</span> &#160;&#160;&#160;&#160;<span class="comment"># load the image files</span></p>
		<p class="noindent mono"><span class="line-number">&#160;74.</span> &#160;&#160;&#160;&#160;L_SQUIR_IMG = pygame.image.load('squirrel.png')</p>
		<p class="noindent mono"><span class="line-number">&#160;75.</span> &#160;&#160;&#160;&#160;R_SQUIR_IMG = pygame.transform.flip(L_SQUIR_IMG, True, False)</p>
		<p class="noindent mono"><span class="line-number">&#160;76.</span> &#160;&#160;&#160;&#160;GRASSIMAGES = []</p>
		<p class="noindent mono"><span class="line-number">&#160;77.</span> &#160;&#160;&#160;&#160;for i in range(1, 5):</p>
		<p class="noindent mono"><span class="line-number">&#160;78.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GRASSIMAGES.append(pygame.image.load('grass%s.png' % i))</p>
		<p class="noindent mono"><span class="line-number">&#160;79.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;80.</span> &#160;&#160;&#160;&#160;while True:</p>
		<p class="noindent mono"><span class="line-number">&#160;81.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;runGame()</p>
		<p class="noindent mono"><span class="line-number">&#160;82.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;83.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;84.</span> def runGame():</p>
		<p class="noindent mono"><span class="line-number">&#160;85.</span> &#160;&#160;&#160;&#160;<span class="comment"># set up variables for the start of a new game</span></p>
		<p class="noindent mono"><span class="line-number">&#160;86.</span> &#160;&#160;&#160;&#160;invulnerableMode = False  <span class="comment"># if the player is invulnerable</span></p>
		<p class="noindent mono"><span class="line-number">&#160;87.</span> &#160;&#160;&#160;&#160;invulnerableStartTime = 0 <span class="comment"># time the player became invulnerable</span></p>
		<p class="noindent mono"><span class="line-number">&#160;88.</span> &#160;&#160;&#160;&#160;gameOverMode = False      <span class="comment"># if the player has lost</span></p>
		<p class="noindent mono"><span class="line-number">&#160;89.</span> &#160;&#160;&#160;&#160;gameOverStartTime = 0     <span class="comment"># time the player lost</span></p>
		<p class="noindent mono"><span class="line-number">&#160;90.</span> &#160;&#160;&#160;&#160;winMode = False           <span class="comment"># if the player has won</span></p>
		<p class="noindent mono"><span class="line-number">&#160;91.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;92.</span> &#160;&#160;&#160;&#160;<span class="comment"># create the surfaces to hold game text</span></p>
		<p class="noindent mono"><span class="line-number">&#160;93.</span> &#160;&#160;&#160;&#160;gameOverSurf = BASICFONT.render('Game Over', True, WHITE)</p>
		<p class="noindent mono"><span class="line-number">&#160;94.</span> &#160;&#160;&#160;&#160;gameOverRect = gameOverSurf.get_rect()</p>
		<p class="noindent mono"><span class="line-number">&#160;95.</span> &#160;&#160;&#160;&#160;gameOverRect.center = (HALF_WINWIDTH, HALF_WINHEIGHT)</p>
		<p class="noindent mono"><span class="line-number">&#160;96.</span></p>
		<p class="noindent mono"><span class="line-number">&#160;97.</span> &#160;&#160;&#160;&#160;winSurf = BASICFONT.render('You have achieved OMEGA SQUIRREL!', True, WHITE)</p>
		<p class="noindent mono"><span class="line-number">&#160;98.</span> &#160;&#160;&#160;&#160;winRect = winSurf.get_rect()</p>
		<p class="noindent mono"><span class="line-number">&#160;99.</span> &#160;&#160;&#160;&#160;winRect.center = (HALF_WINWIDTH, HALF_WINHEIGHT)</p>
		<p class="noindent mono"><span class="line-number">100.</span></p>
		<p class="noindent mono"><span class="line-number">101.</span> &#160;&#160;&#160;&#160;winSurf2 = BASICFONT.render('(Press &quot;r&quot; to restart.)', True, WHITE)</p>
		<p class="noindent mono"><span class="line-number">102.</span> &#160;&#160;&#160;&#160;winRect2 = winSurf2.get_rect()</p>
		<p class="noindent mono"><span class="line-number">103.</span> &#160;&#160;&#160;&#160;winRect2.center = (HALF_WINWIDTH, HALF_WINHEIGHT + 30)</p>
		<p class="noindent mono"><span class="line-number">104.</span></p>
		<p class="noindent mono"><span class="line-number">105.</span> &#160;&#160;&#160;&#160;<span class="comment"># camerax and cameray are where the middle of the camera view is</span></p>
		<p class="noindent mono"><span class="line-number">106.</span> &#160;&#160;&#160;&#160;camerax = 0</p>
		<p class="noindent mono"><span class="line-number">107.</span> &#160;&#160;&#160;&#160;cameray = 0</p>
		<p class="noindent mono"><span class="line-number">108.</span></p>
		<p class="noindent mono"><span class="line-number">109.</span> &#160;&#160;&#160;&#160;grassObjs = [] &#160;&#160;&#160;<span class="comment"># stores all the grass objects in the game</span></p>
		<p class="noindent mono"><span class="line-number">110.</span> &#160;&#160;&#160;&#160;squirrelObjs = [] <span class="comment"># stores all the non-player squirrel objects</span></p>
		<p class="noindent mono"><span class="line-number">111.</span> &#160;&#160;&#160;&#160;<span class="comment"># stores the player object:</span></p>
		<p class="noindent mono"><span class="line-number">112.</span> &#160;&#160;&#160;&#160;playerObj = {'surface': pygame.transform.scale(L_SQUIR_IMG, (STARTSIZE, STARTSIZE)),</p>
		<p class="noindent mono"><span class="line-number">113.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'facing': LEFT,</p>
		<p class="noindent mono"><span class="line-number">114.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'size': STARTSIZE,</p>
		<p class="noindent mono"><span class="line-number">115.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'x': HALF_WINWIDTH,</p>
		<p class="noindent mono"><span class="line-number">116.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'y': HALF_WINHEIGHT,</p>
		<p class="noindent mono"><span class="line-number">117.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'bounce':0,</p>
		<p class="noindent mono"><span class="line-number">118.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'health': MAXHEALTH}</p>
		<p class="noindent mono"><span class="line-number">119.</span></p>
		<p class="noindent mono"><span class="line-number">120.</span> &#160;&#160;&#160;&#160;moveLeft = False</p>
		<p class="noindent mono"><span class="line-number">121.</span> &#160;&#160;&#160;&#160;moveRight = False</p>
		<p class="noindent mono"><span class="line-number">122.</span> &#160;&#160;&#160;&#160;moveUp = False</p>
		<p class="noindent mono"><span class="line-number">123.</span> &#160;&#160;&#160;&#160;moveDown = False</p>
		<p class="noindent mono"><span class="line-number">124.</span></p>
		<p class="noindent mono"><span class="line-number">125.</span> &#160;&#160;&#160;&#160;<span class="comment"># start off with some random grass images on the screen</span></p>
		<p class="noindent mono"><span class="line-number">126.</span>    for i in range(10):</p>
		<p class="noindent mono"><span class="line-number">127.</span>        grassObjs.append(makeNewGrass(camerax, cameray))</p>
		<p class="noindent mono"><span class="line-number">128.</span>        grassObjs[i]['x'] = random.randint(0, WINWIDTH)</p>
		<p class="noindent mono"><span class="line-number">129.</span>        grassObjs[i]['y'] = random.randint(0, WINHEIGHT)</p>
		<p class="noindent mono"><span class="line-number">130.</span></p>
		<p class="noindent mono"><span class="line-number">131.</span>    while True: <span class="comment"># main game loop</span></p>
		<p class="noindent mono"><span class="line-number">132.</span>        <span
class="comment"># Check if we should turn off invulnerability</span></p>

		<p class="noindent mono"><span class="line-number">133.</span>        if
invulnerableMode and time.time() - invulnerableStartTime &gt; INVULNTIME:</p>

		<p class="noindent mono"><span class="line-number">134.</span>            invulnerableMode
= False</p>

		<p class="noindent mono"><span class="line-number">135.</span></p>

		<p class="noindent mono"><span class="line-number">136.</span>        <span
class="comment"># move all the squirrels</span></p>

		<p class="noindent mono"><span class="line-number">137.</span>        for
sObj in squirrelObjs:</p>

		<p class="noindent mono"><span class="line-number">138.</span>            <span
class="comment"># move the squirrel, and adjust for their bounce</span></p>

		<p class="noindent mono"><span class="line-number">139.</span>            sObj['x']
+= sObj['movex']</p>

		<p class="noindent mono"><span class="line-number">140.</span>            sObj['y']
+= sObj['movey']</p>

		<p class="noindent mono"><span class="line-number">141.</span>            sObj['bounce']
+= 1</p>

		<p class="noindent mono"><span class="line-number">142.</span>            if
sObj['bounce'] &gt; sObj['bouncerate']:</p>

		<p class="noindent mono"><span class="line-number">143.</span>                sObj['bounce']
= 0 <span class="comment"># reset bounce amount</span></p>

		<p class="noindent mono"><span class="line-number">144.</span></p>

		<p class="noindent mono"><span class="line-number">145.</span>            <span
class="comment"># random chance they change direction</span></p>

		<p class="noindent mono"><span class="line-number">146.</span>            if
random.randint(0, 99) &lt; DIRCHANGEFREQ:</p>

		<p class="noindent mono"><span class="line-number">147.</span>                sObj['movex']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">148.</span>                sObj['movey']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">149.</span>                if
sObj['movex'] &gt; 0: <span class="comment"># faces right</span></p>

		<p class="noindent mono"><span class="line-number">150.</span>                    sObj['surface']
= pygame.transform.scale(R_SQUIR_IMG, (sObj['width'], sObj['height']))</p>

		<p class="noindent mono"><span class="line-number">151.</span>                else:
<span class="comment"># faces left</span></p>

		<p class="noindent mono"><span class="line-number">152.</span>                    sObj['surface']
= pygame.transform.scale(L_SQUIR_IMG, (sObj['width'], sObj['height']))</p>

		<p class="noindent mono"><span class="line-number">153.</span></p>

		<p class="noindent mono"><span class="line-number">154.</span></p>

		<p class="noindent mono"><span class="line-number">155.</span>        <span
class="comment"># go through all the objects and see if any need to be
deleted.</span></p>

		<p class="noindent mono"><span class="line-number">156.</span>        for
i in range(len(grassObjs) - 1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">157.</span>            if
isOutsideActiveArea(camerax, cameray, grassObjs[i]):</p>

		<p class="noindent mono"><span class="line-number">158.</span>                del
grassObjs[i]</p>

		<p class="noindent mono"><span class="line-number">159.</span>        for
i in range(len(squirrelObjs) - 1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">160.</span>            if
isOutsideActiveArea(camerax, cameray, squirrelObjs[i]):</p>

		<p class="noindent mono"><span class="line-number">161.</span>                del
squirrelObjs[i]</p>

		<p class="noindent mono"><span class="line-number">162.</span></p>

		<p class="noindent mono"><span class="line-number">163.</span>        <span
class="comment"># add more grass &amp; squirrels if we don't have
enough.</span></p>

		<p class="noindent mono"><span class="line-number">164.</span>        while
len(grassObjs) &lt; NUMGRASS:</p>

		<p class="noindent mono"><span class="line-number">165.</span>            grassObjs.append(makeNewGrass(camerax,
cameray))</p>

		<p class="noindent mono"><span class="line-number">166.</span>        while
len(squirrelObjs) &lt; NUMSQUIRRELS:</p>

		<p class="noindent mono"><span class="line-number">167.</span>            squirrelObjs.append(makeNewSquirrel(camerax,
cameray))</p>

		<p class="noindent mono"><span class="line-number">168.</span></p>

		<p class="noindent mono"><span class="line-number">169.</span>        <span
class="comment"># adjust camerax and cameray if beyond the &quot;camera
slack&quot;</span></p>

		<p class="noindent mono"><span class="line-number">170.</span>        playerCenterx
= playerObj['x'] + int(playerObj['size'] / 2)</p>

		<p class="noindent mono"><span class="line-number">171.</span>        playerCentery
= playerObj['y'] + int(playerObj['size'] / 2)</p>

		<p class="noindent mono"><span class="line-number">172.</span>         if
(camerax + HALF_WINWIDTH) - playerCenterx &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">173.</span>             camerax
= playerCenterx + CAMERASLACK - HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">174.</span>         elif
playerCenterx – (camerax + HALF_WINWIDTH) &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">175.</span>             camerax
= playerCenterx – CAMERASLACK - HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">176.</span>         if
(cameray + HALF_WINHEIGHT) - playerCentery &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">177.</span>             cameray
= playerCentery + CAMERASLACK - HALF_WINHEIGHT</p>

		<p class="noindent mono"><span class="line-number">178.</span>         elif
playerCentery – (cameray + HALF_WINHEIGHT) &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">179.</span>             cameray
= playerCentery – CAMERASLACK - HALF_WINHEIGHT</p>

		<p class="noindent mono"><span class="line-number">180.</span></p>

		<p class="noindent mono"><span class="line-number">181.</span>        <span
class="comment"># draw the green background</span></p>

		<p class="noindent mono"><span class="line-number">182.</span>        DISPLAYSURF.fill(GRASSCOLOR)</p>

		<p class="noindent mono"><span class="line-number">183.</span></p>

		<p class="noindent mono"><span class="line-number">184.</span>        <span
class="comment"># draw all the grass objects on the screen</span></p>

		<p class="noindent mono"><span class="line-number">185.</span>        for
gObj in grassObjs:</p>

		<p class="noindent mono"><span class="line-number">186.</span>            gRect
= pygame.Rect( (gObj['x'] - camerax,</p>

		<p class="noindent mono"><span class="line-number">187.</span>                                  gObj['y']
- cameray,</p>

		<p class="noindent mono"><span class="line-number">188.</span>                                  gObj['width'],</p>

		<p class="noindent mono"><span class="line-number">189.</span>                                  gObj['height'])
)</p>

		<p class="noindent mono"><span class="line-number">190.</span>            DISPLAYSURF.blit(GRASSIMAGES[gObj['grassImage']],
gRect)</p>

		<p class="noindent mono"><span class="line-number">191.</span></p>

		<p class="noindent mono"><span class="line-number">192.</span></p>

		<p class="noindent mono"><span class="line-number">193.</span>        <span
class="comment"># draw the other squirrels</span></p>

		<p class="noindent mono"><span class="line-number">194.</span>        for
sObj in squirrelObjs:</p>

		<p class="noindent mono"><span class="line-number">195.</span>            sObj['rect']
= pygame.Rect( (sObj['x'] - camerax,</p>

		<p class="noindent mono"><span class="line-number">196.</span>                                         sObj['y']
- cameray - getBounceAmount(sObj['bounce'], sObj['bouncerate'],
sObj['bounceheight']),</p>

		<p class="noindent mono"><span class="line-number">197.</span>                                         sObj['width'],</p>

		<p class="noindent mono"><span class="line-number">198.</span>                                         sObj['height'])
)</p>

		<p class="noindent mono"><span class="line-number">199.</span>            DISPLAYSURF.blit(sObj['surface'],
sObj['rect'])</p>

		<p class="noindent mono"><span class="line-number">200.</span></p>

		<p class="noindent mono"><span class="line-number">201.</span></p>

		<p class="noindent mono"><span class="line-number">202.</span>        <span
class="comment"># draw the player squirrel</span></p>

		<p class="noindent mono"><span class="line-number">203.</span>        flashIsOn
= round(time.time(), 1) * 10 % 2 == 1</p>

		<p class="noindent mono"><span class="line-number">204.</span>        if
not gameOverMode and not (invulnerableMode and flashIsOn):</p>

		<p class="noindent mono"><span class="line-number">205.</span>            playerObj['rect']
= pygame.Rect( (playerObj['x'] - camerax,</p>

		<p class="noindent mono"><span class="line-number">206.</span>                                              playerObj['y']
– cameray - getBounceAmount(playerObj['bounce'], BOUNCERATE, BOUNCEHEIGHT),</p>

		<p class="noindent mono"><span class="line-number">207.</span>                                              playerObj['size'],</p>

		<p class="noindent mono"><span class="line-number">208.</span>                                              playerObj['size'])
)</p>

		<p class="noindent mono"><span class="line-number">209.</span>            DISPLAYSURF.blit(playerObj['surface'],
playerObj['rect'])</p>

		<p class="noindent mono"><span class="line-number">210.</span></p>

		<p class="noindent mono"><span class="line-number">211.</span></p>

		<p class="noindent mono"><span class="line-number">212.</span>        <span
class="comment"># draw the health meter</span></p>

		<p class="noindent mono"><span class="line-number">213.</span>        drawHealthMeter(playerObj['health'])</p>

		<p class="noindent mono"><span class="line-number">214.</span></p>

		<p class="noindent mono"><span class="line-number">215.</span>        for
event in pygame.event.get(): <span class="comment"># event handling
loop</span></p>

		<p class="noindent mono"><span class="line-number">216.</span>            if
event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">217.</span>                terminate()</p>

		<p class="noindent mono"><span class="line-number">218.</span></p>

		<p class="noindent mono"><span class="line-number">219.</span>            elif
event.type == KEYDOWN:</p>

		<p class="noindent mono"><span class="line-number">220.</span>                if
event.key in (K_UP, K_w):</p>

		<p class="noindent mono"><span class="line-number">221.</span>                    moveDown
= False</p>

		<p class="noindent mono"><span class="line-number">222.</span>                    moveUp
= True</p>

		<p class="noindent mono"><span class="line-number">223.</span>                elif
event.key in (K_DOWN, K_s):</p>

		<p class="noindent mono"><span class="line-number">224.</span>                    moveUp
= False</p>

		<p class="noindent mono"><span class="line-number">225.</span>                    moveDown
= True</p>

		<p class="noindent mono"><span class="line-number">226.</span>                elif
event.key in (K_LEFT, K_a):</p>

		<p class="noindent mono"><span class="line-number">227.</span>                    moveRight
= False</p>

		<p class="noindent mono"><span class="line-number">228.</span>                    moveLeft
= True</p>

		<p class="noindent mono"><span class="line-number">229.</span>                    if
playerObj['facing'] == RIGHT: <span class="comment"># change player
image</span></p>

		<p class="noindent mono"><span class="line-number">230.</span>                        playerObj['surface']
= pygame.transform.scale(L_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">231.</span>                    playerObj['facing']
= LEFT</p>

		<p class="noindent mono"><span class="line-number">232.</span>                elif
event.key in (K_RIGHT, K_d):</p>

		<p class="noindent mono"><span class="line-number">233.</span>                    moveLeft
= False</p>

		<p class="noindent mono"><span class="line-number">234.</span>                    moveRight
= True</p>

		<p class="noindent mono"><span class="line-number">235.</span>                    if
playerObj['facing'] == LEFT: <span class="comment"># change player
image</span></p>

		<p class="noindent mono"><span class="line-number">236.</span>                        playerObj['surface']
= pygame.transform.scale(R_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">237.</span>                    playerObj['facing']
= RIGHT</p>

		<p class="noindent mono"><span class="line-number">238.</span>                elif
winMode and event.key == K_r:</p>

		<p class="noindent mono"><span class="line-number">239.</span>                    return</p>

		<p class="noindent mono"><span class="line-number">240.</span></p>

		<p class="noindent mono"><span class="line-number">241.</span>            elif
event.type == KEYUP:</p>

		<p class="noindent mono"><span class="line-number">242.</span>                <span
class="comment"># stop moving the player's squirrel</span></p>

		<p class="noindent mono"><span class="line-number">243.</span>                if
event.key in (K_LEFT, K_a):</p>

		<p class="noindent mono"><span class="line-number">244.</span>                    moveLeft
= False</p>

		<p class="noindent mono"><span class="line-number">245.</span>                elif
event.key in (K_RIGHT, K_d):</p>

		<p class="noindent mono"><span class="line-number">246.</span>                    moveRight
= False</p>

		<p class="noindent mono"><span class="line-number">247.</span>                elif
event.key in (K_UP, K_w):</p>

		<p class="noindent mono"><span class="line-number">248.</span>                    moveUp
= False</p>

		<p class="noindent mono"><span class="line-number">249.</span>                elif
event.key in (K_DOWN, K_s):</p>

		<p class="noindent mono"><span class="line-number">250.</span>                    moveDown
= False</p>

		<p class="noindent mono"><span class="line-number">251.</span></p>

		<p class="noindent mono"><span class="line-number">252.</span>                elif
event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">253.</span>                    terminate()</p>

		<p class="noindent mono"><span class="line-number">254.</span></p>

		<p class="noindent mono"><span class="line-number">255.</span>        if
not gameOverMode:</p>

		<p class="noindent mono"><span class="line-number">256.</span>            <span
class="comment"># actually move the player</span></p>

		<p class="noindent mono"><span class="line-number">257.</span>            if
moveLeft:</p>

		<p class="noindent mono"><span class="line-number">258.</span>                playerObj['x']
-= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">259.</span>            if
moveRight:</p>

		<p class="noindent mono"><span class="line-number">260.</span>                playerObj['x']
+= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">261.</span>            if
moveUp:</p>

		<p class="noindent mono"><span class="line-number">262.</span>                playerObj['y']
-= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">263.</span>            if
moveDown:</p>

		<p class="noindent mono"><span class="line-number">264.</span>                playerObj['y']
+= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">265.</span></p>

		<p class="noindent mono"><span class="line-number">266.</span>            if
(moveLeft or moveRight or moveUp or moveDown) or playerObj['bounce'] != 0:</p>

		<p class="noindent mono"><span class="line-number">267.</span>                playerObj['bounce']
+= 1</p>

		<p class="noindent mono"><span class="line-number">268.</span></p>

		<p class="noindent mono"><span class="line-number">269.</span>            if
playerObj['bounce'] &gt; BOUNCERATE:</p>

		<p class="noindent mono"><span class="line-number">270.</span>                playerObj['bounce']
= 0 <span class="comment"># reset bounce amount</span></p>

		<p class="noindent mono"><span class="line-number">271.</span></p>

		<p class="noindent mono"><span class="line-number">272.</span>            <span
class="comment"># check if the player has collided with any squirrels</span></p>

		<p class="noindent mono"><span class="line-number">273.</span>            for
i in range(len(squirrelObjs)-1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">274.</span>                sqObj
= squirrelObjs[i]</p>

		<p class="noindent mono"><span class="line-number">275.</span>                if
'rect' in sqObj and playerObj['rect'].colliderect(sqObj['rect']):</p>

		<p class="noindent mono"><span class="line-number">276.</span>                    <span
class="comment"># a player/squirrel collision has occurred</span></p>

		<p class="noindent mono"><span class="line-number">277.</span></p>

		<p class="noindent mono"><span class="line-number">278.</span>                    if
sqObj['width'] * sqObj['height'] &lt;= playerObj['size']**2:</p>

		<p class="noindent mono"><span class="line-number">279.</span>                        <span
class="comment"># player is larger and eats the squirrel</span></p>

		<p class="noindent mono"><span class="line-number">280.</span>                        playerObj['size']
+= int( (sqObj['width'] * sqObj['height'])**0.2 ) + 1</p>

		<p class="noindent mono"><span class="line-number">281.</span>                        del
squirrelObjs[i]</p>

		<p class="noindent mono"><span class="line-number">282.</span></p>

		<p class="noindent mono"><span class="line-number">283.</span>                        if
playerObj['facing'] == LEFT:</p>

		<p class="noindent mono"><span class="line-number">284.</span>                            playerObj['surface']
= pygame.transform.scale(L_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">285.</span>                        if
playerObj['facing'] == RIGHT:</p>

		<p class="noindent mono"><span class="line-number">286.</span>                            playerObj['surface']
= pygame.transform.scale(R_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">287.</span></p>

		<p class="noindent mono"><span class="line-number">288.</span>                        if
playerObj['size'] &gt; WINSIZE:</p>

		<p class="noindent mono"><span class="line-number">289.</span>                            winMode
= True <span class="comment"># turn on &quot;win mode&quot;</span></p>

		<p class="noindent mono"><span class="line-number">290.</span></p>

		<p class="noindent mono"><span class="line-number">291.</span>                    elif
not invulnerableMode:</p>

		<p class="noindent mono"><span class="line-number">292.</span>                        <span
class="comment"># player is smaller and takes damage</span></p>

		<p class="noindent mono"><span class="line-number">293.</span>                        invulnerableMode
= True</p>

		<p class="noindent mono"><span class="line-number">294.</span>                        invulnerableStartTime
= time.time()</p>

		<p class="noindent mono"><span class="line-number">295.</span>                        playerObj['health']
-= 1</p>

		<p class="noindent mono"><span class="line-number">296.</span>                        if
playerObj['health'] == 0:</p>

		<p class="noindent mono"><span class="line-number">297.</span>                            gameOverMode
= True <span class="comment"># turn on &quot;game over mode&quot;</span></p>

		<p class="noindent mono"><span class="line-number">298.</span>                            gameOverStartTime
= time.time()</p>

		<p class="noindent mono"><span class="line-number">299.</span>        else:</p>

		<p class="noindent mono"><span class="line-number">300.</span>            <span
class="comment"># game is over, show &quot;game over&quot; text</span></p>

		<p class="noindent mono"><span class="line-number">301.</span>            DISPLAYSURF.blit(gameOverSurf,
gameOverRect)</p>

		<p class="noindent mono"><span class="line-number">302.</span>            if
time.time() - gameOverStartTime &gt; GAMEOVERTIME:</p>

		<p class="noindent mono"><span class="line-number">303.</span>                return
<span class="comment"># end the current game</span></p>

		<p class="noindent mono"><span class="line-number">304.</span></p>

		<p class="noindent mono"><span class="line-number">305.</span>        <span
class="comment"># check if the player has won.</span></p>

		<p class="noindent mono"><span class="line-number">306.</span>        if
winMode:</p>

		<p class="noindent mono"><span class="line-number">307.</span>            DISPLAYSURF.blit(winSurf,
winRect)</p>

		<p class="noindent mono"><span class="line-number">308.</span>            DISPLAYSURF.blit(winSurf2,
winRect2)</p>

		<p class="noindent mono"><span class="line-number">309.</span></p>

		<p class="noindent mono"><span class="line-number">310.</span>        pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">311.</span>        FPSCLOCK.tick(FPS)</p>

		<p class="noindent mono"><span class="line-number">312.</span></p>

		<p class="noindent mono"><span class="line-number">313.</span></p>

		<p class="noindent mono"><span class="line-number">314.</span></p>

		<p class="noindent mono"><span class="line-number">315.</span></p>

		<p class="noindent mono"><span class="line-number">316.</span> def
drawHealthMeter(currentHealth):</p>

		<p class="noindent mono"><span class="line-number">317.</span>    for
i in range(currentHealth): <span class="comment"># draw red health bars</span></p>

		<p class="noindent mono"><span class="line-number">318.</span>        pygame.draw.rect(DISPLAYSURF,
RED,   (15, 5 + (10 * MAXHEALTH) - i * 10, 20, 10))</p>

		<p class="noindent mono"><span class="line-number">319.</span>    for
i in range(MAXHEALTH): <span class="comment"># draw the white outlines</span></p>

		<p class="noindent mono"><span class="line-number">320.</span>        pygame.draw.rect(DISPLAYSURF,
WHITE, (15, 5 + (10 * MAXHEALTH) - i * 10, 20, 10), 1)</p>

		<p class="noindent mono"><span class="line-number">321.</span></p>

		<p class="noindent mono"><span class="line-number">322.</span></p>

		<p class="noindent mono"><span class="line-number">323.</span> def
terminate():</p>

		<p class="noindent mono"><span class="line-number">324.</span>    pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">325.</span>    sys.exit()</p>

		<p class="noindent mono"><span class="line-number">326.</span></p>

		<p class="noindent mono"><span class="line-number">327.</span></p>

		<p class="noindent mono"><span class="line-number">328.</span> def
getBounceAmount(currentBounce, bounceRate, bounceHeight):</p>

		<p class="noindent mono"><span class="line-number">329.</span>    <span
class="comment"># Returns the number of pixels to offset based on the
bounce.</span></p>

		<p class="noindent mono"><span class="line-number">330.</span>    <span
class="comment"># Larger bounceRate means a slower bounce.</span></p>

		<p class="noindent mono"><span class="line-number">331.</span>    <span
class="comment"># Larger bounceHeight means a higher bounce.</span></p>

		<p class="noindent mono"><span class="line-number">332.</span>     <span
class="comment"># currentBounce will always be less than bounceRate</span></p>

		<p class="noindent mono"><span class="line-number">333.</span>    return
int(math.sin( (math.pi / float(bounceRate)) * currentBounce ) * bounceHeight)</p>

		<p class="noindent mono"><span class="line-number">334.</span></p>

		<p class="noindent mono"><span class="line-number">335.</span> def
getRandomVelocity():</p>

		<p class="noindent mono"><span class="line-number">336.</span>    speed
= random.randint(SQUIRRELMINSPEED, SQUIRRELMAXSPEED)</p>

		<p class="noindent mono"><span class="line-number">337.</span>    if
random.randint(0, 1) == 0:</p>

		<p class="noindent mono"><span class="line-number">338.</span>        return
speed</p>

		<p class="noindent mono"><span class="line-number">339.</span>    else:</p>

		<p class="noindent mono"><span class="line-number">340.</span>        return
-speed</p>

		<p class="noindent mono"><span class="line-number">341.</span></p>

		<p class="noindent mono"><span class="line-number">342.</span></p>

		<p class="noindent mono"><span class="line-number">343.</span> def
getRandomOffCameraPos(camerax, cameray, objWidth, objHeight):</p>

		<p class="noindent mono"><span class="line-number">344.</span>    <span
class="comment"># create a Rect of the camera view</span></p>

		<p class="noindent mono"><span class="line-number">345.</span>    cameraRect
= pygame.Rect(camerax, cameray, WINWIDTH, WINHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">346.</span>    while
True:</p>

		<p class="noindent mono"><span class="line-number">347.</span>        x
= random.randint(camerax - WINWIDTH, camerax + (2 * WINWIDTH))</p>

		<p class="noindent mono"><span class="line-number">348.</span>        y
= random.randint(cameray - WINHEIGHT, cameray + (2 * WINHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">&#160;349.
</span><span class="comment"># create a Rect object with the random
coordinates and use colliderect()</span></p>

		<p class="noindent mono"><span class="line-number">350.</span><span
class="comment">         # to make sure the right edge isn't in the
camera view.</span></p>

		<p class="noindent mono"><span class="line-number">351.</span>        objRect
= pygame.Rect(x, y, objWidth, objHeight)</p>

		<p class="noindent mono"><span class="line-number">352.</span>        if
not objRect.colliderect(cameraRect):</p>

		<p class="noindent mono"><span class="line-number">353.</span>            return
x, y</p>

		<p class="noindent mono"><span class="line-number">354.</span></p>

		<p class="noindent mono"><span class="line-number">355.</span></p>

		<p class="noindent mono"><span class="line-number">356.</span> def
makeNewSquirrel(camerax, cameray):</p>

		<p class="noindent mono"><span class="line-number">357.</span>    sq
= {}</p>

		<p class="noindent mono"><span class="line-number">358.</span>    generalSize
= random.randint(5, 25)</p>

		<p class="noindent mono"><span class="line-number">359.</span>    multiplier
= random.randint(1, 3)</p>

		<p class="noindent mono"><span class="line-number">360.</span>    sq['width']
= (generalSize + random.randint(0, 10)) * multiplier</p>

		<p class="noindent mono"><span class="line-number">361.</span>    sq['height']
= (generalSize + random.randint(0, 10)) * multiplier</p>

		<p class="noindent mono"><span class="line-number">362.</span>    sq['x'],
sq['y'] = getRandomOffCameraPos(camerax, cameray, sq['width'], sq['height'])</p>

		<p class="noindent mono"><span class="line-number">363.</span>    sq['movex']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">364.</span>    sq['movey']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">365.</span>    if
sq['movex'] &lt; 0: <span class="comment"># squirrel is facing left</span></p>

		<p class="noindent mono"><span class="line-number">366.</span>        sq['surface']
= pygame.transform.scale(L_SQUIR_IMG, (sq['width'], sq['height']))</p>

		<p class="noindent mono"><span class="line-number">367.</span>    else:
<span class="comment"># squirrel is facing right</span></p>

		<p class="noindent mono"><span class="line-number">368.</span>        sq['surface']
= pygame.transform.scale(R_SQUIR_IMG, (sq['width'], sq['height']))</p>

		<p class="noindent mono"><span class="line-number">369.</span>    sq['bounce']
= 0</p>

		<p class="noindent mono"><span class="line-number">370.</span>    sq['bouncerate']
= random.randint(10, 18)</p>

		<p class="noindent mono"><span class="line-number">371.</span>    sq['bounceheight']
= random.randint(10, 50)</p>

		<p class="noindent mono"><span class="line-number">372.</span>    return
sq</p>

		<p class="noindent mono"><span class="line-number">373.</span></p>

		<p class="noindent mono"><span class="line-number">374.</span></p>

		<p class="noindent mono"><span class="line-number">375.</span> def
makeNewGrass(camerax, cameray):</p>

		<p class="noindent mono"><span class="line-number">376.</span>    gr
= {}</p>

		<p class="noindent mono"><span class="line-number">377.</span>    gr['grassImage']
= random.randint(0, len(GRASSIMAGES) - 1)</p>

		<p class="noindent mono"><span class="line-number">378.</span>    gr['width']
= GRASSIMAGES[0].get_width()</p>

		<p class="noindent mono"><span class="line-number">379.</span>    gr['height']
= GRASSIMAGES[0].get_height()</p>

		<p class="noindent mono"><span class="line-number">380.</span>
 gr['x'], gr['y'] = getRandomOffCameraPos(camerax, cameray, gr['width'],
gr['height'])</p>

		<p class="noindent mono"><span class="line-number">381.</span>
gr['rect'] = pygame.Rect( (gr['x'], gr['y'], gr['width'], gr['height']) )</p>

		<p class="noindent mono"><span class="line-number">382.</span>    return
gr</p>

		<p class="noindent mono"><span class="line-number">383.</span></p>

		<p class="noindent mono"><span class="line-number">384.</span></p>

		<p class="noindent mono"><span class="line-number">385.</span> def
isOutsideActiveArea(camerax, cameray, obj):</p>

		<p class="noindent mono"><span class="line-number">386.</span>    <span
class="comment"># Return False if camerax and cameray are more than</span></p>

		<p class="noindent mono"><span class="line-number">387.</span>    <span
class="comment"># a half-window length beyond the edge of the window.</span></p>

		<p class="noindent mono"><span class="line-number">388.</span>    boundsLeftEdge
= camerax - WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">389.</span>    boundsTopEdge
= cameray - WINHEIGHT</p>

		<p class="noindent mono"><span class="line-number">390.</span>    boundsRect
= pygame.Rect(boundsLeftEdge, boundsTopEdge, WINWIDTH * 3, WINHEIGHT * 3)</p>

		<p class="noindent mono"><span class="line-number">391.</span>    objRect
= pygame.Rect(obj['x'], obj['y'], obj['width'], obj['height'])</p>

		<p class="noindent mono"><span class="line-number">392.</span>    return
not boundsRect.colliderect(objRect)</p>

		<p class="noindent mono"><span class="line-number">393.</span></p>

		<p class="noindent mono"><span class="line-number">394.</span></p>

		<p class="noindent mono"><span class="line-number">395.</span> if
__name__ == '__main__':</p>

		<p class="noindent mono"><span class="line-number">396.</span>     main()</p>

</div>

	<h1 class="subheading" id="">The Usual Setup Code</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;&#160;1.</span> <span
class="comment"># Squirrel Eat Squirrel (a 2D Katamari Damacy clone)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;2.</span> <span
class="comment"># By Al Sweigart al@inventwithpython.com</span></p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;3.</span> <span
class="comment"># http://inventwithpython.com/pygame</span></p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;4.</span> <span
class="comment"># Creative Commons BY-NC-SA 3.0 US</span></p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;5.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;6.</span> import
random, sys, time, math, pygame</p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;7.</span> from
pygame.locals import *</p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;8.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;&#160;9.</span> FPS
= 30 <span class="comment"># frames per second to update the screen</span></p>

		<p class="noindent mono"><span class="line-number">&#160;10.</span> WINWIDTH
= 640 <span class="comment"># width of the program's window, in pixels</span></p>

		<p class="noindent mono"><span class="line-number">&#160;11.</span> WINHEIGHT
= 480 <span class="comment"># height in pixels</span></p>

		<p class="noindent mono"><span class="line-number">&#160;12.</span> HALF_WINWIDTH
= int(WINWIDTH / 2)</p>

		<p class="noindent mono"><span class="line-number">&#160;13.</span> HALF_WINHEIGHT
= int(WINHEIGHT / 2)</p>

		<p class="noindent mono"><span class="line-number">&#160;14.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;15.</span> GRASSCOLOR
= (24, 255, 0)</p>

		<p class="noindent mono"><span class="line-number">&#160;16.</span> WHITE
= (255, 255, 255)</p>

		<p class="noindent mono"><span class="line-number">&#160;17.</span> RED
= (255, 0, 0)</p>

	</div>

	<p>The start of the program assigns several constant variables.
This program frequently makes use of the half length of the width and height of
the window so much that the <span class="mono">HALF_WINWIDTH</span> and <span
class="mono">HALF_WINHEIGHT</span> variables store these numbers.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">&#160;19.</span> CAMERASLACK = 90     <span class="comment"># how far from the center the squirrel moves before moving the camera</span></p>
	</div>

	<p>The “camera slack” is described later. Basically, it means
that the camera will begin following the player squirrel when it moves 90
pixels away from the center of the window.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;20.</span> MOVERATE
= 9         <span class="comment"># how fast the player moves</span></p>

		<p class="noindent mono"><span class="line-number">&#160;21.</span> BOUNCERATE
= 6       <span class="comment"># how fast the player bounces (large is
slower)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;22.</span> BOUNCEHEIGHT
= 30    <span class="comment"># how high the player bounces</span></p>

		<p class="noindent mono"><span class="line-number">&#160;23.</span> STARTSIZE
= 25       <span class="comment"># how big the player starts off</span></p>

		<p class="noindent mono"><span class="line-number">&#160;24.</span> WINSIZE
= 300        <span class="comment"># how big the player needs to be to
win</span></p>

		<p class="noindent mono"><span class="line-number">&#160;25.</span> INVULNTIME
= 2       <span class="comment"># how long the player is invulnerable
after being hit in seconds</span></p>

		<p class="noindent mono"><span class="line-number">&#160;26.</span> GAMEOVERTIME
= 4     <span class="comment"># how long the &quot;game over&quot; text
stays on the screen in seconds</span></p>

		<p class="noindent mono"><span class="line-number">&#160;27.</span> MAXHEALTH
= 3        <span class="comment"># how much health the player starts
with</span></p>

		<p class="noindent mono"><span class="line-number">&#160;28.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;29.</span> NUMGRASS
= 80        <span class="comment"># number of grass objects in the active
area</span></p>

		<p class="noindent mono"><span class="line-number">&#160;30.</span> NUMSQUIRRELS
= 30    <span class="comment"># number of squirrels in the active area</span></p>

		<p class="noindent mono"><span class="line-number">&#160;31.</span> SQUIRRELMINSPEED
= 3 <span class="comment"># slowest squirrel speed</span></p>

		<p class="noindent mono"><span class="line-number">&#160;32.</span> SQUIRRELMAXSPEED
= 7 <span class="comment"># fastest squirrel speed</span></p>

		<p class="noindent mono"><span class="line-number">&#160;33.</span> DIRCHANGEFREQ
= 2    <span class="comment"># % chance of direction change per frame</span></p>

		<p class="noindent mono"><span class="line-number">&#160;34.</span> LEFT
= 'left'</p>

		<p class="noindent mono"><span class="line-number">&#160;35.</span> RIGHT
= 'right'</p>

</div>

	<p>The comments next to these constants explains what the
constant variable is used for. </p>

	<h1 class="subheading" id="">Describing the Data Structures</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;37.</span> <span
class="comment">&quot;&quot;&quot;</span></p>

		<p class="noindent mono"><span class="line-number">&#160;38.</span> <span
class="comment">This program has three data structures to represent the
player, enemy squirrels, and grass background objects. The data structures are
dictionaries with the following keys:</span></p>

		<p class="noindent mono"><span class="line-number">&#160;39.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;40.</span> <span
class="comment">Keys used by all three data structures:</span></p>

		<p class="noindent mono"><span class="line-number">&#160;41.</span>    <span
class="comment">'x' - the left edge coordinate of the object in the
game world (not a pixel coordinate on the screen)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;42.</span>    <span
class="comment">'y' - the top edge coordinate of the object in the game
world (not a pixel coordinate on the screen)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;43.</span>    <span
class="comment">'rect' - the pygame.Rect object representing where on
the screen the object is located.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;44.</span> <span
class="comment">Player data structure keys:</span></p>

		<p class="noindent mono"><span class="line-number">&#160;45.</span>    <span
class="comment">'surface' - the pygame.Surface object that stores the
image of the squirrel which will be drawn to the screen.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;46.</span>    <span
class="comment">'facing' - either set to LEFT or RIGHT, stores which
direction the player is facing.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;47.</span>    <span
class="comment">'size' - the width and height of the player in pixels.
(The width &amp; height are always the same.)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;48.</span>    <span
class="comment">'bounce' - represents at what point in a bounce the
player is in. 0 means standing (no bounce), up to BOUNCERATE (the completion of
the bounce)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;49.</span>    <span
class="comment">'health' - an integer showing how many more times the
player can be hit by a larger squirrel before dying.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;50.</span> <span
class="comment">Enemy Squirrel data structure keys:</span></p>

		<p class="noindent mono"><span class="line-number">&#160;51.</span>    <span
class="comment">'surface' - the pygame.Surface object that stores the
image of the squirrel which will be drawn to the screen.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;52.</span>    <span
class="comment">'movex' - how many pixels per frame the squirrel moves
horizontally. A negative integer is moving to the left, a positive to the
right.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;53.</span>    <span
class="comment">'movey' - how many pixels per frame the squirrel moves
vertically. A negative integer is moving up, a positive moving down.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;54.</span>    <span
class="comment">'width' - the width of the squirrel's image, in pixels</span></p>

		<p class="noindent mono"><span class="line-number">&#160;55.</span>    <span
class="comment">'height' - the height of the squirrel's image, in
pixels</span></p>

		<p class="noindent mono"><span class="line-number">&#160;56.</span>    <span
class="comment">'bounce' - represents at what point in a bounce the
player is in. 0 means standing (no bounce), up to BOUNCERATE (the completion of
the bounce)</span></p>

		<p class="noindent mono"><span class="line-number">&#160;57.</span>    <span
class="comment">'bouncerate' - how quickly the squirrel bounces. A
lower number means a quicker bounce.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;58.</span>    <span
class="comment">'bounceheight' - how high (in pixels) the squirrel
bounces</span></p>

		<p class="noindent mono"><span class="line-number">&#160;59.</span> <span
class="comment">Grass data structure keys:</span></p>

		<p class="noindent mono"><span class="line-number">&#160;60.</span>    <span
class="comment">'grassImage' - an integer that refers to the index of
the pygame.Surface object in GRASSIMAGES used for this grass object</span></p>

		<p class="noindent mono"><span class="line-number">&#160;61.</span> <span
class="comment">&quot;&quot;&quot;</span></p>

</div>

	<p>The comments from lines 37 to 61 are in one large,
multi-line string. They describe the keys in the player squirrel, enemy
squirrel, and grass objects. In Python, a multi-line string value by itself
works as a multi-line comment.</p>

<h2><a name="_Toc316488704">The </a><span class="mono">main()</span> Function</h2>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;63.</span> def
main():</p>

		<p class="noindent mono"><span class="line-number">&#160;64.</span>    global
FPSCLOCK, DISPLAYSURF, BASICFONT, L_SQUIR_IMG, R_SQUIR_IMG, GRASSIMAGES</p>

		<p class="noindent mono"><span class="line-number">&#160;65.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;66.</span>    pygame.init()</p>

		<p class="noindent mono"><span class="line-number">&#160;67.</span>    FPSCLOCK
= pygame.time.Clock()</p>

		<p class="noindent mono"><span class="line-number">&#160;68.</span>    pygame.display.set_icon(pygame.image.load('gameicon.png'))</p>

		<p class="noindent mono"><span class="line-number">&#160;69.</span>    DISPLAYSURF
= pygame.display.set_mode((WINWIDTH, WINHEIGHT))</p>

		<p class="noindent mono"><span class="line-number">&#160;70.</span>    pygame.display.set_caption('Squirrel
Eat Squirrel')</p>

		<p class="noindent mono"><span class="line-number">&#160;71.</span>    BASICFONT
= pygame.font.Font('freesansbold.ttf', 32)</p>

</div>

	<p>The first several lines of the <span class="mono">main()</span>
function are the same setup code that we’ve seen in our previous game programs.
The <span class="mono">pygame.display.set_icon()</span> is a Pygame function
that sets the icon in the window’s title bar (just like <span class="mono">pygame.display.set_caption()</span>
sets the caption text in the title bar). The single argument to <span
class="mono">pygame.display.set_icon()</span> is a Surface object of a small
image. The ideal image size is 32 x 32 pixels, although you can use other sized
images. The image will just be compressed into a smaller size to be used as the
window’s icon.</p>

	<h1 class="subheading" id="">The <span class="mono">pygame.transform.flip()</span> Function</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">&#160;73.</span> &#160;&#160;&#160;&#160;<span class="comment"># load the image files</span></p>
		<p class="noindent mono"><span class="line-number">&#160;74.</span>    L_SQUIR_IMG = pygame.image.load('squirrel.png')</p>
		<p class="noindent mono"><span class="line-number">&#160;75.</span>    R_SQUIR_IMG = pygame.transform.flip(L_SQUIR_IMG, True, False)</p>
		<p class="noindent mono"><span class="line-number">&#160;76.</span>    GRASSIMAGES = []</p>
		<p class="noindent mono"><span class="line-number">&#160;77.</span>    for i in range(1, 5):</p>
		<p class="noindent mono"><span class="line-number">&#160;78.</span>        GRASSIMAGES.append(pygame.image.load('grass%s.png' % i))</p>
	</div>

	<p>The image for the player and enemy squirrels is loaded from <i>squirrel.png</i>
on line 74. Make sure that this PNG file is in the same folder as <i>squirrel.py</i>,
otherwise you will get the error <span class="mono">pygame.error: Couldn't open
squirrel.png</span>.</p>

	<p>The image in <i>squirrel.png</i> (which you can download
from <a href="https://invpy.com/squirrel.png">https://invpy.com/squirrel.png</a>) is of a
squirrel facing to the left. We also need a Surface object that contains a
picture of the squirrel facing to the right. Instead of creating a second PNG
image file, we can call the <span class="mono">pygame.transform.flip()</span>
function. This function has three parameters: the Surface object with the image
to flip, a Boolean value to do a horizontal flip, and a Boolean value to do a
vertical flip. By passing <span class="mono">True</span> for the second
parameter and <span class="mono">False</span> for the third parameter, the
Surface object that returns has the image of the squirrel facing to the right.
The original Surface object in <span class="mono">L_SQUIR_IMG</span> that we
passed in is unchanged.</p>

	<p>Here are examples of images being horizontally and
vertically flipped:</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;80.</span>    while
True:</p>

		<p class="noindent mono"><span class="line-number">&#160;81.</span>        runGame()</p>

</div>

	<p>After the setup in <span class="mono">main()</span> is
complete, the game begins with <span class="mono">runGame()</span> being
called. </p>

	<h1 class="subheading" id="">A More Detailed Game State than Usual</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;84.</span> def
runGame():</p>

		<p class="noindent mono"><span class="line-number"> 85.</span>
<span class="comment"># set up variables for the start of a new game</span></p>

		<p class="noindent mono"><span class="line-number">&#160;86.</span>    invulnerableMode
= False  <span class="comment"># if the player is invulnerable</span></p>

		<p class="noindent mono"><span class="line-number">&#160;87.</span>    invulnerableStartTime
= 0 <span class="comment"># time the player became invulnerable</span></p>

		<p class="noindent mono"><span class="line-number">&#160;88.</span>    gameOverMode
= False      <span class="comment"># if the player has lost</span></p>

		<p class="noindent mono"><span class="line-number">&#160;89.</span>    gameOverStartTime
= 0     <span class="comment"># time the player lost</span></p>

		<p class="noindent mono"><span class="line-number">&#160;90.</span>    winMode
= False           <span class="comment"># if the player has won</span></p>

</div>

	<p>The Squirrel Eat Squirrel game has quite a few variables
that track the game state. These variables will be explained in more detail
later when they are used in the code.</p>

	<h1 class="subheading" id="">The Usual Text Creation Code</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">&#160;92.</span>    <span
class="comment"># create the surfaces to hold game text</span></p>

		<p class="noindent mono"><span class="line-number">&#160;93.</span>    gameOverSurf
= BASICFONT.render('Game Over', True, WHITE)</p>

		<p class="noindent mono"><span class="line-number">&#160;94.</span>    gameOverRect
= gameOverSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">&#160;95.</span>    gameOverRect.center
= (HALF_WINWIDTH, HALF_WINHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">&#160;96.</span></p>

		<p class="noindent mono"><span class="line-number">&#160;97.</span>    winSurf
= BASICFONT.render('You have achieved OMEGA SQUIRREL!', True, WHITE)</p>

		<p class="noindent mono"><span class="line-number">&#160;98.</span>    winRect
= winSurf.get_rect()</p>

		<p class="noindent mono"><span class="line-number">&#160;99.</span>    winRect.center
= (HALF_WINWIDTH, HALF_WINHEIGHT)</p>

		<p class="noindent mono"><span class="line-number">100.</span></p>

		<p class="noindent mono"><span class="line-number">101.</span>    winSurf2
= BASICFONT.render('(Press &quot;r&quot; to restart.)', True, WHITE)</p>

		<p class="noindent mono"><span class="line-number">102.</span>    winRect2
= winSurf2.get_rect()</p>

	<p class="noindent mono"><span class="line-number">103.</span>     winRect2.center = (HALF_WINWIDTH, HALF_WINHEIGHT + 30)</p>

	</div>

	<p>These variables contain Surface objects with the “Game
Over”, “You have achieved OMEGA SQUIRREL!”, and “(Press &quot;r&quot; to
restart.)” text that appears on the screen after the game ends (with either the
player losing or winning).</p>

	<h1 class="subheading" id="">Cameras</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">105.</span>     <span class="comment"># camerax and cameray are where the middle of the camera view is</span></p>
		<p class="noindent mono"><span class="line-number">106.</span>    camerax = 0</p>
		<p class="noindent mono"><span class="line-number">107.</span>     cameray = 0</p>
	</div>

	<p>The <span class="mono">camerax</span> and <span
class="mono">cameray</span> variables track the game coordinates of the
“camera”. Imagine the game world as an infinite 2D space. This could, of
course, never fit on any screen. We can only draw a portion of the infinite 2D
space on the screen. We call the area of this portion a <a href="glossary.xhtml#camera"><b>camera</b></a>,
because it is as though our screen is just the area of the game world in front what
a camera would see. Here’s a picture of the game world (an infinite green
field) and the area that the camera can view:</p>

	<p>As you can see, the game world XY coordinates keep getting
bigger and smaller forever. The game world origin is where the (0, 0) game
world coordinates are. You can see that the three squirrels are located (in
game world coordinates) at (-384, -84), (384, 306), and (585, -234).</p>

	<p>But we can only display 640 x 480 pixel area on the screen
(though this can change if we pass different numbers to the <span
class="mono">pygame.display.set_mode()</span> function), so we need to track
where the camera’s origin is located in game world coordinates. In the picture above,
the camera is placed at (-486, -330) in game world coordinates.</p>

	<p>The picture below shows the same field and squirrels, except
everything is given in camera coordinates:</p>

	<p>The area that the camera can see (called the camera view)
has it’s center (that is, its origin) at the game world coordinates (-486, -330).
Since what the camera sees is displayed on the player’s screen, the “camera”
coordinates are the same as the “pixel” coordinates. To find out the pixel
coordinates of the squirrels (that is, where on the screen they appear), take
the game coordinates of the squirrel and subtract the game coordinates of the
camera’s origin.</p>

	<p>So the squirrel on the left has game world coordinates of (-384,
-84) but appears at (102, 246) on the screen in pixel coordinates. (For the X
coordinate, -384 - -486 = 102 and for the Y coordinate, -84 - -330 = 246.)</p>

	<p>When we do the same calculation to find the pixel
coordinates of the other two squirrels, we find that they exist outside of the
range of the screen. This is why they don’t appear in the camera’s view.</p>

	<h1 class="subheading" id="">The “Active Area”</h1>

	<p>The “active area” is just a name I came up with to describe
the area of the game world that the camera views plus an area around it the
size of the camera area:</p>

	<p>Calculating if something is in the active area or not is
explained in the <span class="mono">isOutsideActiveArea()</span> function’s
explanation later in this chapter. When we create new enemy squirrel or grass
objects, we don’t want them to be created inside the view of the camera, since
it’ll appear that they just pop out of nowhere.</p>

	<p>But we also don’t want to create them too far away from the
camera, because then they may never wander into the camera’s view. Inside the
active area but outside the camera is where squirrel and grass objects can safely
be created.</p>

	<p>Also, when squirrel and grass objects are beyond the border
of the active area then they are far away enough to delete so that they don’t
take up memory any more. Objects that far away aren’t needed since it is much
less likely that they’ll come back into view of the camera.</p>

	<p>If you have ever played Super Mario World on the Super
Nintendo, there is a good YouTube video explaining how Super Mario World’s
camera system works. You can find this video at <a href="https://invpy.com/mariocamera">https://invpy.com/mariocamera</a>.</p>

	<h1 class="subheading" id="">Keeping Track of the Location of Things in the Game World</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">109.</span>     grassObjs
= []    <span class="comment"># stores all the grass objects in the
game</span></p>

		<p class="noindent mono"><span class="line-number">110.</span>    squirrelObjs
= [] <span class="comment"># stores all the non-player squirrel objects</span></p>

		<p class="noindent mono"><span class="line-number">111.</span>    <span
class="comment"># stores the player object:</span></p>

		<p class="noindent mono"><span class="line-number">112.</span>    playerObj
= {'surface': pygame.transform.scale(L_SQUIR_IMG, (STARTSIZE, STARTSIZE)),</p>

		<p class="noindent mono"><span class="line-number">113.</span>                 'facing':
LEFT,</p>

		<p class="noindent mono"><span class="line-number">114.</span>                 'size':
STARTSIZE,</p>

		<p class="noindent mono"><span class="line-number">115.</span>                 'x':
HALF_WINWIDTH,</p>

		<p class="noindent mono"><span class="line-number">116.</span>                 'y':
HALF_WINHEIGHT,</p>

		<p class="noindent mono"><span class="line-number">117.</span>                 'bounce':0,</p>

		<p class="noindent mono"><span class="line-number">118.</span>                 'health':
MAXHEALTH}</p>

		<p class="noindent mono"><span class="line-number">119.</span></p>

		<p class="noindent mono"><span class="line-number">120.</span>    moveLeft
= False</p>

		<p class="noindent mono"><span class="line-number">121.</span>    moveRight
= False</p>

		<p class="noindent mono"><span class="line-number">122.</span>    moveUp
= False</p>

		<p class="noindent mono"><span class="line-number">123.</span>     moveDown
= False</p>

</div>

	<p>The <span class="mono">grassObjs</span> variable holds a
list of all the grass objects in the game. As new grass objects are created,
they are added to this list. As grass objects are deleted, they are removed
from this list. The same goes for the <span class="mono">squirrelObjs</span>
variable and the enemy squirrel objects.</p>

	<p>The <span class="mono">playerObj</span> variable is not a
list, but just the dictionary value itself.</p>

	<p>The move variables on lines 120 to 123 track which of arrow
keys (or WASD keys) are being held down, just like in a few of the previous
game programs.</p>

	<h1 class="subheading" id="">Starting Off with Some Grass</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">125.</span>     <span
class="comment"># start off with some random grass images on the screen</span></p>

		<p class="noindent mono"><span class="line-number">126.</span>    for
i in range(10):</p>

		<p class="noindent mono"><span class="line-number">127.</span>        grassObjs.append(makeNewGrass(camerax,
cameray))</p>

		<p class="noindent mono"><span class="line-number">128.</span>        grassObjs[i]['x']
= random.randint(0, WINWIDTH)</p>

		<p class="noindent mono"><span class="line-number">129.</span>         grassObjs[i]['y']
= random.randint(0, WINHEIGHT)</p>

</div>

	<p>The active area should start off with a few grass objects
visible on the screen. The <span class="mono">makeNewGrass()</span> function
will create and return a grass object that is randomly located somewhere in the
active area but outside the camera view. This is what we normally want when we
call <span class="mono">makeNewGrass()</span>, but since we want to make sure
the first few grass objects are on the screen, the X and Y coordinates are
overwritten.</p>

	<h1 class="subheading" id="">The Game Loop</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">131.</span>     while True: <span class="comment"># main game loop</span></p>
	</div>

	<p>The game loop, like the game loops in the previous game
programs, will do event handling, updating the game state, and drawing
everything to the screen.</p>

	<h1 class="subheading" id="">Checking to Disable Invulnerability</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">132.</span>         <span
class="comment"># Check if we should turn off invulnerability</span></p>

		<p class="noindent mono"><span class="line-number">133.</span>        if
invulnerableMode and time.time() - invulnerableStartTime &gt; INVULNTIME:</p>

		<p class="noindent mono"><span class="line-number">134.</span>             invulnerableMode
= False</p>

</div>

	<p>When the player gets hit by an enemy squirrel and does not
die, we make the player invulnerable for a couple seconds (since the <span
class="mono">INVULNTIME</span> constant is set to <span class="mono">2</span>).
During this time, the player’s squirrel flashes and the won’t take any damage
from other squirrels. If the “invulnerability mode” time is over, line 134 will
set <span class="mono">invulnerableMode</span> to <span class="mono">False</span>.</p>

	<h1 class="subheading" id="">Moving the Enemy Squirrels</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">136.</span>         <span
class="comment"># move all the squirrels</span></p>

		<p class="noindent mono"><span class="line-number">137.</span>        for
sObj in squirrelObjs:</p>

		<p class="noindent mono"><span class="line-number">138.</span>            <span
class="comment"># move the squirrel, and adjust for their bounce</span></p>

		<p class="noindent mono"><span class="line-number">139.</span>            sObj['x']
+= sObj['movex']</p>

		<p class="noindent mono"><span class="line-number">140.</span>             sObj['y']
+= sObj['movey']</p>

</div>

	<p>The enemy squirrels all move according to the values in
their <span class="mono">'movex'</span> and <span class="mono">'movey'</span>
keys. If these values are positive, the squirrels move right or down. If these
values are negative, they move left or up. The larger the value, the farther
they move on each iteration through the game loop (which means they move
faster).</p>

	<p>The <span class="mono">for</span> loop on line 137 will
apply this moving code to each of the enemy squirrel objects in the <span
class="mono">squirrelObjs</span> list. First, line 139 and 140 will adjust
their <span class="mono">'x'</span> and <span class="mono">'y'</span> keys’
values.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">141.</span>             sObj['bounce']
+= 1</p>

		<p class="noindent mono"><span class="line-number">142.</span>            if
sObj['bounce'] &gt; sObj['bouncerate']:</p>

		<p class="noindent mono"><span class="line-number">143.</span>                 sObj['bounce']
= 0 <span class="comment"># reset bounce amount</span></p>

</div>

	<p>The value in <span class="mono">sObj['bounce']</span> is
incremented on each iteration of the game loop for each squirrel. When this
value is <span class="mono">0</span>, the squirrel is at the very beginning of
its bounce. When this value is equal to the value in <span class="mono">sObj['bouncerate']</span>
the value is at its end. (This is why a smaller <span class="mono">sObj['bouncerate']</span>
value makes for a faster bounce. If <span class="mono">sObj['bouncerate']</span>
is <span class="mono">3</span>, then it only takes three iterations through
the game loop for the squirrel to do a full bounce. If <span class="mono">sObj['bouncerate']</span>
were <span class="mono">10</span>, then it would take ten iterations.)</p>

	<p>When <span class="mono">sObj['bounce']</span> gets larger
than <span class="mono">sObj['bouncerate']</span>, then it needs to be reset
to <span class="mono">0</span>. This is what lines 142 and 143 do.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">145.</span>             <span class="comment"># random chance they change direction</span></p>

		<p class="noindent mono"><span class="line-number">146.</span>            if
random.randint(0, 99) &lt; DIRCHANGEFREQ:</p>

		<p class="noindent mono"><span class="line-number">147.</span>                sObj['movex']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">148.</span>                sObj['movey']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">149.</span>                if
sObj['movex'] &gt; 0: <span class="comment"># faces right</span></p>

		<p class="noindent mono"><span class="line-number">150.</span>                    sObj['surface']
= pygame.transform.scale(R_SQUIR_IMG, (sObj['width'], sObj['height']))</p>

		<p class="noindent mono"><span class="line-number">151.</span>                else:
<span class="comment"># faces left</span></p>

		<p class="noindent mono"><span class="line-number">152.</span>                     sObj['surface']
= pygame.transform.scale(L_SQUIR_IMG, (sObj['width'], sObj['height']))</p>

	</div>

	<p>There is a 2% chance on each iteration through the game loop
that the squirrel will randomly change speed and direction. On line 146 the <span
class="mono">random.randint(0, 99)</span> call randomly selects an integer out
of 100 possible integers. If this number is less than <span class="mono">DIRCHANGEFREQ</span>
(which we set to <span class="mono">2</span> on line 33) then a new value will
be set for <span class="mono">sObj['movex']</span> and <span class="mono">sObj['movey']</span>.
</p>

	<p>Because this means the squirrel might have changed
direction, the Surface object in <span class="mono">sObj['surface']</span>
should be replaced by a new one that is properly facing left or right and
scaled to the squirrel’s size. This is what lines 149 to 152 determine. Note
that line 150 gets a Surface object scaled from <span class="mono">R_SQUIR_IMG</span>
and line 152 gets one scaled from <span class="mono">L_SQUIR_IMG</span>.</p>

	<h1 class="subheading" id="">Removing the Far Away Grass and Squirrel Objects</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">155.</span>         <span
class="comment"># go through all the objects and see if any need to be
deleted.</span></p>

		<p class="noindent mono"><span class="line-number">156.</span>        for
i in range(len(grassObjs) - 1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">157.</span>            if
isOutsideActiveArea(camerax, cameray, grassObjs[i]):</p>

		<p class="noindent mono"><span class="line-number">158.</span>                del
grassObjs[i]</p>

		<p class="noindent mono"><span class="line-number">159.</span>        for
i in range(len(squirrelObjs) - 1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">160.</span>            if
isOutsideActiveArea(camerax, cameray, squirrelObjs[i]):</p>

		<p class="noindent mono"><span class="line-number">161.</span>                 del
squirrelObjs[i]</p>

</div>

	<p>During each iteration of the game loop, the code will check
all of the grass and enemy squirrel objects to see if they are outside the
“active area”. The <span class="mono">isOutsideActiveArea()</span> function
takes the current coordinates of the camera (which are stored in <span
class="mono">camerax</span> and <span class="mono">cameray</span>) and the
grass/enemy squirrel object, and returns <span class="mono">True</span> if the
object is not located in the active area.</p>

	<p>If this is the case, this object is deleted on line 158 (for
grass objects) or line 161 (for squirrel objects). This is how squirrel and
grass objects get deleted when the player moves far enough away from them (or
when the enemy squirrels move away far enough from the player). This ensures
that there is always a number of squirrels and grass objects near the player.</p>

<h2><a name="_Toc316488716">When Deleting Items in a List, Iterate Over the
List in Reverse</a></h2>

	<p>Deleting squirrel and grass objects is done with the <span
class="mono">del</span> operator. However, notice that the <span
class="mono">for</span> loop on line 156 and 159 pass arguments to the <span
class="mono">range()</span> function so that the numbering starts at the index
of the last item and then decrements by <span class="mono">-1</span> (unlike
incrementing by <span class="mono">1</span> as it normally does) until it
reaches the number <span class="mono">-1</span>. We are iterating backwards
over the list’s indexes compared to how it is normally done. This is done
because we are iterating over the list that we are also deleting items from.</p>

	<p>To see why this reverse order is needed, say we had the
following list value:</p>

	<div class="python-shell">
		<p class="noindent mono">animals = ['cat', 'mouse', 'dog', 'horse']</p>
	</div>

	<p>So we wanted to write code to delete any instances of the
string <span class="mono">'dog'</span> from this list. We might think to write
out code like this:</p>

	<div class="python-shell">

		<p class="noindent mono">for i in
range(len(animals)):</p>

		<p class="noindent mono">    if
animals[i] == 'dog':</p>

		<p class="noindent mono">        del
animals[i]</p>

</div>

	<p>But if we ran this code, we would get an <span
class="mono">IndexError</span> error that looks like this:</p>

	<div class="python-shell">

		<p class="noindent mono">Traceback (most
recent call last):</p>

		<p class="noindent mono">  File
&quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</p>

		<p class="noindent mono">IndexError: list
index out of range</p>

</div>

	<p>To see why this error happens, let’s walk through the code.
First, the <span class="mono">animals</span> list would be set to <span
class="mono">['cat', 'mouse', 'dog', 'horse']</span> and <span class="mono">len(animals)</span>
would return <span class="mono">4</span>. This means that the call to <span
class="mono">range(4)</span> would cause the <span class="mono">for</span>
loop to iterate with the values <span class="mono">0</span>, <span
class="mono">1</span>, <span class="mono">2</span>, and <span class="mono">3</span>.</p>

	<p>When the <span class="mono">for</span> loop iterates with <span
class="mono">i</span> set to <span class="mono">2</span>, the <span
class="mono">if</span> statement’s condition will be <span class="mono">True</span>
and the <span class="mono">del animals[i]</span> statement will delete <span
class="mono">animals[2]</span>. This means that afterwards the animals list
will be <span class="mono">['cat', 'mouse', 'horse']</span>. The indexes of
all the items after <span class="mono">'dog'</span> are all shifted down by
one because the <span class="mono">'dog'</span> value was removed.</p>

	<p>But on the next iteration through the <span class="mono">for</span>
loop, <span class="mono">i</span> is set to <span class="mono">3</span>. But <span
class="mono">animals[3]</span> is out of bounds because the valid indexes of
the animals list is no longer <span class="mono">0</span> to <span
class="mono">3</span> but <span class="mono">0</span> to <span class="mono">2</span>.
The original call to <span class="mono">range()</span> was for a list with 4
items in it. The list changed in length, but the <span class="mono">for</span>
loop is set up for the original length.</p>

	<p>However, if we iterate from the last index of the list to <span
class="mono">0</span>, we don’t run into this problem. The following program
deletes the <span class="mono">'dog'</span> string from the <span
class="mono">animals</span> list without causing an <span class="mono">IndexError</span>
error:</p>

	<div class="python-shell">

		<p class="noindent mono">animals = ['cat',
'mouse', 'dog', 'horse']</p>

		<p class="noindent mono">for i in
range(len(animals) - 1, -1, -1):</p>

		<p class="noindent mono">    if
animals[i] == 'dog':</p>

		<p class="noindent mono">        del
animals[i]</p>

</div>

	<p>The reason this code doesn’t cause an error is because the <span
class="mono">for</span> loop iterates over <span class="mono">3</span>, <span
class="mono">2</span>, <span class="mono">1</span>, and <span class="mono">0</span>.
On the first iteration, the code checks if <span class="mono">animals[3]</span>
is equal to <span class="mono">'dog'</span>. It isn’t (<span class="mono">animals[3]</span>
is <span class="mono">'horse'</span>) so the code moves on to the next
iteration. Then <span class="mono">animals[2]</span> is checked if it equals <span
class="mono">'dog'</span>. It does, so <span class="mono">animals[2]</span>
is deleted.</p>

	<p>After <span class="mono">animals[2]</span> is deleted, the <span
class="mono">animals</span> list is set to <span class="mono">['cat',
'mouse', 'horse']</span>. On the next iteration, <span class="mono">i</span>
is set to <span class="mono">1</span>. There is a value at <span
class="mono">animals[1]</span> (the <span class="mono">'mouse'</span> value),
so no error is caused. It doesn’t matter that all the items in the list after <span
class="mono">'dog'</span> have shifted down by one, because since we started
at the end of the list and are going towards the front, all of those items have
already been checked.</p>

	<p>Similarly, we can delete grass and squirrel objects from the
<span class="mono">grassObjs</span> and <span class="mono">squirrelObjs</span>
lists without error because the <span class="mono">for</span> loop on lines
156 and 159 iterate in reverse order.</p>

	<h1 class="subheading" id="">Adding New Grass and Squirrel Objects</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">163.</span>         <span
class="comment"># add more grass &amp;amp; squirrels if we don't have
enough.</span></p>

		<p class="noindent mono"><span class="line-number">164.</span>        while
len(grassObjs) &lt; NUMGRASS:</p>

		<p class="noindent mono"><span class="line-number">165.</span>            grassObjs.append(makeNewGrass(camerax,
cameray))</p>

		<p class="noindent mono"><span class="line-number">166.</span>        while
len(squirrelObjs) &lt; NUMSQUIRRELS:</p>

		<p class="noindent mono"><span class="line-number">167.</span>             squirrelObjs.append(makeNewSquirrel(camerax,
cameray))</p>

</div>

	<p>Remember that the <span class="mono">NUMGRASS</span>
constant was set to <span class="mono">80</span> and the <span class="mono">NUMSQUIRRELS</span>
constant was set to <span class="mono">30</span> at the beginning of the
program? These variables are set so that we can be sure there are always plenty
of grass and squirrel objects in the active area at all times. If the length of
the <span class="mono">grassObjs</span> or <span class="mono">squirrelObjs</span>
drops below <span class="mono">NUMGRASS</span> or <span class="mono">NUMSQUIRRELS</span>
respectively, then new grass and squirrel objects are created. The <span
class="mono">makeNewGrass()</span> and <span class="mono">makeNewSquirrel()</span>
functions that create these objects are explained later in this chapter.</p>

	<h1 class="subheading" id="">Camera Slack, and Moving the Camera View</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">169.</span>         <span
class="comment"># adjust camerax and cameray if beyond the &quot;camera
slack&quot;</span></p>

		<p class="noindent mono"><span class="line-number">170.</span>        playerCenterx
= playerObj['x'] + int(playerObj['size'] / 2)</p>

		<p class="noindent mono"><span class="line-number">171.</span>        playerCentery
= playerObj['y'] + int(playerObj['size'] / 2)</p>

		<p class="noindent mono"><span class="line-number">172.</span>         if
(camerax + HALF_WINWIDTH) - playerCenterx &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">173.</span>             camerax
= playerCenterx + CAMERASLACK - HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">174.</span>         elif
playerCenterx – (camerax + HALF_WINWIDTH) &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">175.</span>             camerax
= playerCenterx – CAMERASLACK - HALF_WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">176.</span>         if
(cameray + HALF_WINHEIGHT) - playerCentery &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">177.</span>             cameray
= playerCentery + CAMERASLACK - HALF_WINHEIGHT</p>

		<p class="noindent mono"><span class="line-number">178.</span>         elif
playerCentery – (cameray + HALF_WINHEIGHT) &gt; CAMERASLACK:</p>

		<p class="noindent mono"><span class="line-number">179.</span>             cameray
= playerCentery – CAMERASLACK - HALF_WINHEIGHT</p>

</div>

	<p>The camera’s position (which is stored as integers in the <span
class="mono">camerax</span> and <span class="mono">cameray</span> variables) needs
to be updated when the player moves over. I’ve called the number of pixels the
player can move before the camera gets updated the “camera slack”. Line 19 set
the <span class="mono">CAMERASLACK</span> constant to <span class="mono">90</span>,
which our program will take to mean that the player squirrel can move 90 pixels
from the center before the camera position gets updated to follow the squirrel.</p>

	<p>In order to understand the equations used in the <span
class="mono">if</span> statements on lines 172, 174, 176, and 178, you should
note that <span class="mono">(camerax + HALF_WINWIDTH)</span> and <span
class="mono">(cameray + HALF_WINHEIGHT)</span> are the XY game world coordinates
currently at the center of the screen. The <span class="mono">playerCenterx</span>
and <span class="mono">playerCentery</span> is set to the middle of the player’s
squirrel’s position, also in game world coordinates.</p>

	<p>For line 172, if the center X coordinate minus the player’s
center X coordinate is greater than the <span class="mono">CAMERASLACK</span>
value, that means the player is more pixels to the right of the center of the
camera than the camera slack should allow. The <span class="mono">camerax</span>
value needs to be updated so that the player squirrel is just at the edge of
the camera slack. This is why line 173 sets <span class="mono">camerax</span>
to <span class="mono">playerCenterx + CAMERASLACK – HALF_WINWIDTH</span>. Note
that the <span class="mono">camerax</span> variable is changed, not the <span
class="mono">playerObj['x']</span> value. We want to move the camera, not the
player.</p>

	<p>The other three <span class="mono">if</span> statements
follow similar logic for the left, up and down sides.</p>

<h2><a name="_Toc316488719">Drawing the Background, Grass, Squirrels, and
Health Meter</a></h2>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">181.</span>         <span
class="comment"># draw the green background</span></p>

		<p class="noindent mono"><span class="line-number">182.</span>         DISPLAYSURF.fill(GRASSCOLOR)</p>

</div>

	<p>Line 182 begins the code that starts drawing the contents of
the display Surface object. First, line 182 draws a green color for the
background. This will paint over all of the previous contents of the Surface so
that we can start drawing the frame from scratch.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">184.</span>         <span
class="comment"># draw all the grass objects on the screen</span></p>

		<p class="noindent mono"><span class="line-number">185.</span>        for
gObj in grassObjs:</p>

		<p class="noindent mono"><span class="line-number">186.</span>            gRect
= pygame.Rect( (gObj['x'] - camerax,</p>

		<p class="noindent mono"><span class="line-number">187.</span>                                  gObj['y']
- cameray,</p>

		<p class="noindent mono"><span class="line-number">188.</span>                                  gObj['width'],</p>

		<p class="noindent mono"><span class="line-number">189.</span>                                  gObj['height'])
)</p>

		<p class="noindent mono"><span class="line-number">190.</span>             DISPLAYSURF.blit(GRASSIMAGES[gObj['grassImage']],
gRect)</p>

</div>

	<p>The <span class="mono">for</span> loop on line 185 goes
through all the grass objects in the <span class="mono">grassObjs</span> list
and creates a Rect object from the x, y, width, and height information stored
in it. This Rect object is stored in a variable named <span class="mono">gRect</span>.
On line 190, <span class="mono">gRect</span> is used in the <span
class="mono">blit()</span> method call to draw the grass image on the display
Surface. Note that <span class="mono">gObj['grassImage']</span> only contains
an integer that is an index to <span class="mono">GRASSIMAGES</span>. <span
class="mono">GRASSIMAGES</span> is a list of Surface objects that contain all
the grass images. Surface objects take up much more memory than just a single
integer, and all the grass objects with similar <span class="mono">gObj['grassImage']</span>
values look identical. So it makes sense to only have each grass image stored
once in <span class="mono">GRASSIMAGES</span> and simply store integers in the
grass objects themselves.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">193.</span>         <span
class="comment"># draw the other squirrels</span></p>

		<p class="noindent mono"><span class="line-number">194.</span>        for
sObj in squirrelObjs:</p>

		<p class="noindent mono"><span class="line-number">195.</span>            sObj['rect']
= pygame.Rect( (sObj['x'] - camerax,</p>

		<p class="noindent mono"><span class="line-number">196.</span>                                         sObj['y']
- cameray - getBounceAmount(sObj['bounce'], sObj['bouncerate'],
sObj['bounceheight']),</p>

		<p class="noindent mono"><span class="line-number">197.</span>                                         sObj['width'],</p>

		<p class="noindent mono"><span class="line-number">198.</span>                                         sObj['height'])
)</p>

		<p class="noindent mono"><span class="line-number">199.</span>             DISPLAYSURF.blit(sObj['surface'],
sObj['rect'])</p>

</div>

	<p>The <span class="mono">for</span> loop that draws all the
enemy squirrel game objects is similar to the previous <span class="mono">for</span>
loop, except that the Rect object it creates is saved in the <span
class="mono">'rect'</span> key’s value of the squirrel dictionary. The reason
the code does this is because we will use this Rect object later to check if
the enemy squirrels have collided with the player squirrel.</p>

	<p>Note that the top parameter for the Rect constructor is not
just <span class="mono">sObj['y'] - cameray</span> but <span class="mono">sObj['y']
- cameray - getBounceAmount(sObj['bounce'], sObj['bouncerate'],
sObj['bounceheight'])</span>. The <span class="mono">getBounceAmount()</span>
function will return the number of pixels that the top value should be raised.</p>

	<p>Also, there is no common list of Surface objects of the squirrel
images, like there was with grass game objects and <span class="mono">GRASSIMAGES</span>.
Each enemy squirrel game object has its own Surface object stored in the <span
class="mono">'surface'</span> key. This is because the squirrel images can be scaled
to different sizes.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">202.</span>         <span
class="comment"># draw the player squirrel</span></p>

		<p class="noindent mono"><span class="line-number">203.</span>         flashIsOn
= round(time.time(), 1) * 10 % 2 == 1</p>

</div>

	<p>After drawing the grass and enemy squirrels, the code will
draw the player’s squirrel. However, there is one case where we would skip
drawing the player’s squirrel. When the player collides with a larger enemy
squirrel, the player takes damage and flashes for a little bit to indicate that
the player is temporarily invulnerable. This flashing effect is done by drawing
the player squirrel on some iterations through the game loop but not on others.
</p>

	<p>The player squirrel will be drawn on game loop iterations
for a tenth of a second, and then not drawn on the game loop iterations for a
tenth of second. This repeats over and over again as long as the player is
invulnerable (which, in the code, means that the <span class="mono">invulnerableMode</span>
variable is set to <span class="mono">True</span>). Our code will make the
flashing last for two seconds, since <span class="mono">2</span> was stored in
the <span class="mono">INVULNTIME</span> constant variable on line 25.</p>

	<p>To determine if the flash is on or not, line 202 grabs the
current time from <span class="mono">time.time()</span>. Let’s use the example
where this function call returns <span class="mono">1323926893.622</span>.
This value is passed to <span class="mono">round()</span>, which rounds it to
one digit past the decimal point (since <span class="mono">1</span> is passed
as <span class="mono">round()</span>’s second parameter). This means <span
class="mono">round()</span> will return the value <span class="mono">1323926893.6</span>.</p>

	<p>This value is then multiplied by <span class="mono">10</span>,
to become <span class="mono">13239268936</span>. Once we have it as an
integer, we can do the “mod two” trick first discussed in the Memory Puzzle
chapter to see if it is even or odd. <span class="mono">13239268936 % 2</span>
evaluates to <span class="mono">0</span>, which means that <span
class="mono">flashIsOn</span> will be set to <span class="mono">False</span>,
since <span class="mono">0 == 1</span> is <span class="mono">False</span>.</p>

	<p>In fact, <span class="mono">time.time()</span> will keep
returning values that will end up putting <span class="mono">False</span> into
<span class="mono">flashIsOn</span> until <span class="mono">1323926893.700</span>,
which is the next tenth second. This is why the <span class="mono">flashIsOn</span>
variable will constantly have <span class="mono">False</span> for one tenth of
a second, and then <span class="mono">True</span> for the next one tenth of a
second (no matter how many iterations happen in that tenth of a second).</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">204.</span>         if
not gameOverMode and not (invulnerableMode and flashIsOn):</p>

		<p class="noindent mono"><span class="line-number">205.</span>            playerObj['rect']
= pygame.Rect( (playerObj['x'] - camerax,</p>

		<p class="noindent mono"><span class="line-number">206.</span>                                              playerObj['y']
– cameray - getBounceAmount(playerObj['bounce'], BOUNCERATE, BOUNCEHEIGHT),</p>

		<p class="noindent mono"><span class="line-number">207.</span>                                              playerObj['size'],</p>

		<p class="noindent mono"><span class="line-number">208.</span>                                              playerObj['size'])
)</p>

		<p class="noindent mono"><span class="line-number">209.</span>             DISPLAYSURF.blit(playerObj['surface'],
playerObj['rect'])</p>

</div>

	<p>There are three things that must be <span class="mono">True</span>
before we draw the player’s squirrel. The game must currently be going on
(which happens while <span class="mono">gameOverMode</span> is <span
class="mono">False</span>) and the player is not invulnerable and not flashing
(which happens while <span class="mono">invulnerableMode</span> and <span
class="mono">flashIsOn</span> are <span class="mono">False</span>).</p>

	<p>The code for drawing the player’s squirrel is almost
identical to the code for drawing the enemy squirrels.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">212.</span>         <span
class="comment"># draw the health meter</span></p>

		<p class="noindent mono"><span class="line-number">213.</span>         drawHealthMeter(playerObj['health'])</p>

</div>

	<p>The <span class="mono">drawHealthMeter()</span> function
draws the indicator at the top left corner of the screen that tells the player
how many times the player squirrel can be hit before dying. This function will
be explained later in this chapter.</p>

	<h1 class="subheading" id="">The Event Handling Loop</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">215.</span>         for
event in pygame.event.get(): <span class="comment"># event handling
loop</span></p>

		<p class="noindent mono"><span class="line-number">216.</span>            if
event.type == QUIT:</p>

		<p class="noindent mono"><span class="line-number">217.</span>                 terminate()</p>

</div>

	<p>The first thing that is checked in the event handling loop
is if the <span class="mono">QUIT</span> event has been generated. If so, then
the program should be terminated.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">219.</span>             elif
event.type == KEYDOWN:</p>

		<p class="noindent mono"><span class="line-number">220.</span>                if
event.key in (K_UP, K_w):</p>

		<p class="noindent mono"><span class="line-number">221.</span>                    moveDown
= False</p>

		<p class="noindent mono"><span class="line-number">222.</span>                    moveUp
= True</p>

		<p class="noindent mono"><span class="line-number">223.</span>                elif
event.key in (K_DOWN, K_s):</p>

		<p class="noindent mono"><span class="line-number">224.</span>                    moveUp
= False</p>

		<p class="noindent mono"><span class="line-number">225.</span>                     moveDown
= True</p>

</div>

	<p>If the up or down arrow keys have been pressed (or their
WASD equivalents), then the move variable (<span class="mono">moveRight</span>,
<span class="mono">moveDown</span>, etc.) for that direction should be set to <span
class="mono">True</span> and the move variable for the opposite direction
should be set to <span class="mono">False</span>.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">226.</span>                 elif
event.key in (K_LEFT, K_a):</p>

		<p class="noindent mono"><span class="line-number">227.</span>                    moveRight
= False</p>

		<p class="noindent mono"><span class="line-number">228.</span>                    moveLeft
= True</p>

		<p class="noindent mono"><span class="line-number">229.</span>                    if
playerObj['facing'] == RIGHT: <span class="comment"># change player
image</span></p>

		<p class="noindent mono"><span class="line-number">230.</span>                        playerObj['surface']
= pygame.transform.scale(L_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">231.</span>                    playerObj['facing']
= LEFT</p>

		<p class="noindent mono"><span class="line-number">232.</span>                elif
event.key in (K_RIGHT, K_d):</p>

		<p class="noindent mono"><span class="line-number">233.</span>                    moveLeft
= False</p>

		<p class="noindent mono"><span class="line-number">234.</span>                    moveRight
= True</p>

		<p class="noindent mono"><span class="line-number">235.</span>                    if
playerObj['facing'] == LEFT: <span class="comment"># change player
image</span></p>

		<p class="noindent mono"><span class="line-number">236.</span>                        playerObj['surface']
= pygame.transform.scale(R_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">237.</span>                     playerObj['facing']
= RIGHT</p>

</div>

	<p>The <span class="mono">moveLeft</span> and <span
class="mono">moveRight</span> variables should also be set when the left or
right arrow keys are pressed. Also, the value in <span class="mono">playerObj['facing']</span>
should be updated to either <span class="mono">LEFT</span> or <span
class="mono">RIGHT</span>. If the player squirrel is now facing a new
direction, the <span class="mono">playerObj['surface']</span> value should be
replaced with a correctly scaled image of the squirrel facing the new
direction.</p>

	<p>Line 229 is run if the left arrow key was pressed and checks
if the player squirrel was facing right. If that was so, then a new scaled
Surface object of the player squirrel image is stored in <span class="mono">playerObj['surface']</span>.
The code in line 232’s <span class="mono">elif</span> statement handles the
opposite case.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">238.</span>                 elif
winMode and event.key == K_r:</p>

		<p class="noindent mono"><span class="line-number">239.</span>                     return</p>

</div>

	<p>If the player has won the game by growing large enough (in
which case, <span class="mono">winMode</span> will be set to <span
class="mono">True</span>) and the R key has been pressed, then <span
class="mono">runGame()</span> should return. This will end the current game,
and a new game will start the next time that <span class="mono">runGame()</span>
gets called.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">241.</span>             elif
event.type == KEYUP:</p>

		<p class="noindent mono"><span class="line-number">242.</span>                <span
class="comment"># stop moving the player's squirrel</span></p>

		<p class="noindent mono"><span class="line-number">243.</span>                if
event.key in (K_LEFT, K_a):</p>

		<p class="noindent mono"><span class="line-number">244.</span>                    moveLeft
= False</p>

		<p class="noindent mono"><span class="line-number">245.</span>                elif
event.key in (K_RIGHT, K_d):</p>

		<p class="noindent mono"><span class="line-number">246.</span>                    moveRight
= False</p>

		<p class="noindent mono"><span class="line-number">247.</span>                elif
event.key in (K_UP, K_w):</p>

		<p class="noindent mono"><span class="line-number">248.</span>                    moveUp
= False</p>

		<p class="noindent mono"><span class="line-number">249.</span>                elif
event.key in (K_DOWN, K_s):</p>

		<p class="noindent mono"><span class="line-number">250.</span>                     moveDown
= False</p>

</div>

	<p>If the player lets up on any of the arrow or WASD keys, then
the code should set the move variable for that direction to <span
class="mono">False</span>. This will stop the squirrel from moving in that
direction any more.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">252.</span>                 elif
event.key == K_ESCAPE:</p>

		<p class="noindent mono"><span class="line-number">253.</span>                     terminate()</p>

</div>

	<p>If the key that was pressed was the Esc key, then terminate
the program.</p>

	<h1 class="subheading" id="">Moving the Player, and Accounting for Bounce</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">255.</span>         if
not gameOverMode:</p>

		<p class="noindent mono"><span class="line-number">256.</span>            <span
class="comment"># actually move the player</span></p>

		<p class="noindent mono"><span class="line-number">257.</span>            if
moveLeft:</p>

		<p class="noindent mono"><span class="line-number">258.</span>                playerObj['x']
-= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">259.</span>            if
moveRight:</p>

		<p class="noindent mono"><span class="line-number">260.</span>                playerObj['x']
+= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">261.</span>            if
moveUp:</p>

		<p class="noindent mono"><span class="line-number">262.</span>                playerObj['y']
-= MOVERATE</p>

		<p class="noindent mono"><span class="line-number">263.</span>            if
moveDown:</p>

		<p class="noindent mono"><span class="line-number">264.</span>                 playerObj['y']
+= MOVERATE</p>

</div>

	<p>The code inside the <span class="mono">if</span> statement
on line 255 will move the player’s squirrel around only if the game is not
over. (This is why pressing on the arrow keys after the player’s squirrel dies
will have no effect.) Depending on which of the move variables is set to <span
class="mono">True</span>, the <span class="mono">playerObj</span> dictionary
should have its <span class="mono">playerObj['x']</span> and <span
class="mono">playerObj['y']</span> values changed by <span class="mono">MOVERATE</span>.
(This is why a larger value in <span class="mono">MOVERATE</span> makes the
squirrel move faster.)</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">266.</span>             if
(moveLeft or moveRight or moveUp or moveDown) or playerObj['bounce'] != 0:</p>

		<p class="noindent mono"><span class="line-number">267.</span>                playerObj['bounce']
+= 1</p>

		<p class="noindent mono"><span class="line-number">268.</span></p>

		<p class="noindent mono"><span class="line-number">269.</span>            if
playerObj['bounce'] &gt; BOUNCERATE:</p>

		<p class="noindent mono"><span class="line-number">270.</span>                 playerObj['bounce']
= 0 <span class="comment"># reset bounce amount</span></p>

</div>

	<p>The value in <span class="mono">playerObj['bounce']</span>
keeps track of at what point in bouncing the player is at. This variable stores
an integer value from <span class="mono">0</span> to <span class="mono">BOUNCERATE</span>.
Just like the bounce value for the enemy squirrels, a <span class="mono">playerObj['bounce']</span>
value of <span class="mono">0</span> means the player squirrel is at the start
of a bounce and a value of <span class="mono">BOUNCERATE</span> means the
player squirrel is at the end of the bounce.</p>

	<p>The player squirrel will bounce whenever the player is
moving, or if the player has stopped moving but the squirrel hasn’t finished
its current bounce. This condition is captured in the <span class="mono">if</span>
statement on line 266. If any of the move variables is set to <span
class="mono">True</span> or the current <span class="mono">playerObj['bounce']</span>
is not <span class="mono">0</span> (which means the player is currently in a
bounce), then the variable should be incremented on line 267.</p>

	<p>Because the <span class="mono">playerObj['bounce']</span>
variable should only be in the range of <span class="mono">0</span> to <span
class="mono">BOUNCERATE</span>, if incrementing it makes it larger than <span
class="mono">BOUNCERATE</span>, it should be reset back to <span
class="mono">0</span>.</p>

	<h1 class="subheading" id="">Collision Detection: Eat or Be Eaten</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">272.</span>             <span
class="comment"># check if the player has collided with any squirrels</span></p>

		<p class="noindent mono"><span class="line-number">273.</span>            for
i in range(len(squirrelObjs)-1, -1, -1):</p>

		<p class="noindent mono"><span class="line-number">274.</span>                 sqObj
= squirrelObjs[i]</p>

</div>

	<p>The <span class="mono">for</span> loop on 273 will go run
code on each of the enemy squirrel game objects in <span class="mono">squirrelObjs</span>.
Notice that the parameters to <span class="mono">range()</span> on line 273
start at the last index of <span class="mono">squirrelObjs</span> and
decrement. This is because the code inside this <span class="mono">for</span>
loop may end up deleting some of these enemy squirrel game objects (if the
player’s squirrel ends up eating them), so it is important to iterate from the
end down to the front. The reason why was explained previously in the “When
Deleting Items in a List, Iterate Over the List in Reverse” section.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">275.</span>                 if
'rect' in sqObj and playerObj['rect'].colliderect(sqObj['rect']):</p>

		<p class="noindent mono"><span class="line-number">276.</span>                    <span
class="comment"># a player/squirrel collision has occurred</span></p>

		<p class="noindent mono"><span class="line-number">277.</span></p>

		<p class="noindent mono"><span class="line-number">278.</span>                    if
sqObj['width'] * sqObj['height'] &lt;= playerObj['size']**2:</p>

		<p class="noindent mono"><span class="line-number">279.</span>                        <span
class="comment"># player is larger and eats the squirrel</span></p>

		<p class="noindent mono"><span class="line-number">280.</span>                        playerObj['size']
+= int( (sqObj['width'] * sqObj['height'])**0.2 ) + 1</p>

		<p class="noindent mono"><span class="line-number">281.</span>                         del
squirrelObjs[i]</p>

</div>

	<p>If the player’s squirrel is equal or larger than the size of
the enemy squirrel it has collided with, then the player’s squirrel will eat
that squirrel and grow. The number that is added to the <span class="mono">'size'</span>
key in the player object (that is, the growth) is calculated based on the enemy
squirrel’s size on line 280. Here’s a graph showing the growth from different
sized squirrels. Notice that larger squirrels cause more growth:</p>

	<p>So, according to the chart, eating a squirrel that has a
width and height of 45 (that is, an area of 1600 pixels) would cause the player
to grow 5 pixels wider and taller.</p>

	<p>Line 281 deletes the eaten squirrel object from the <span
class="mono">squirrelObjs</span> list so that it will no longer appear on the
screen or have its position updated.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">283.</span>                         if
playerObj['facing'] == LEFT:</p>

		<p class="noindent mono"><span class="line-number">284.</span>                            playerObj['surface']
= pygame.transform.scale(L_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

		<p class="noindent mono"><span class="line-number">285.</span>                        if
playerObj['facing'] == RIGHT:</p>

		<p class="noindent mono"><span class="line-number">286.</span>                             playerObj['surface']
= pygame.transform.scale(R_SQUIR_IMG, (playerObj['size'], playerObj['size']))</p>

</div>

	<p>The player’s squirrel image needs to be updated now that the
squirrel is larger. This can be done by passing the original squirrel image in <span
class="mono">L_SQUIR_IMG</span> or <span class="mono">R_SQUIR_IMG</span> to
the <span class="mono">pygame.transform.scale()</span> function, which will
return an enlarged version of the image. Depending on whether <span
class="mono">playerObj['facing']</span> is equal to <span class="mono">LEFT</span>
or <span class="mono">RIGHT</span> determines which original squirrel image we
pass to the function.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">288.</span>                         if
playerObj['size'] &gt; WINSIZE:</p>

		<p class="noindent mono"><span class="line-number">289.</span>                             winMode
= True <span class="comment"># turn on &quot;win mode&quot;</span></p>

</div>

	<p>The way the player wins the game is by getting the squirrel
to have a size larger than the integer stored in the <span class="mono">WINSIZE</span>
constant variable. If this is true, then the <span class="mono">winMode</span>
variable is set to <span class="mono">True</span>. Code in the other parts of
this function will handle displaying the congratulations text and checking for
the player to press the R key to restart the game.</p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">291.</span>                     elif
not invulnerableMode:</p>

		<p class="noindent mono"><span class="line-number">292.</span>                        <span
class="comment"># player is smaller and takes damage</span></p>

		<p class="noindent mono"><span class="line-number">293.</span>                        invulnerableMode
= True</p>

		<p class="noindent mono"><span class="line-number">294.</span>                        invulnerableStartTime
= time.time()</p>

		<p class="noindent mono"><span class="line-number">295.</span>                        playerObj['health']
-= 1</p>

		<p class="noindent mono"><span class="line-number">296.</span>                        if
playerObj['health'] == 0:</p>

		<p class="noindent mono"><span class="line-number">297.</span>                            gameOverMode
= True <span class="comment"># turn on &quot;game over mode&quot;</span></p>

		<p class="noindent mono"><span class="line-number">298.</span>                             gameOverStartTime
= time.time()</p>

</div>

	<p>If the player’s area was not equal to or larger than the area
of the enemy squirrel, and <span class="mono">invulnerableMode</span> was not
set to <span class="mono">True</span>, then the player will take damage from
colliding with this larger squirrel.</p>

	<p>To prevent the player from being damaged several times by
the same squirrel immediately, we will briefly make the player invulnerable to
further squirrel attacks by setting <span class="mono">invulnerableMode</span>
to <span class="mono">True</span> on line 293. Line 294 will set <span
class="mono">invulnerableStartTime</span> to the current time (which is
returned by <span class="mono">time.time()</span>) so that lines 133 and 134
can know when to set <span class="mono">invulnerableMode</span> to <span
class="mono">False</span>.</p>

	<p>Line 295 decrements the player’s health by <span
class="mono">1</span>. Because there is a chance that the player’s health is
now at <span class="mono">0</span>, line 296 checks for this and, if so, sets <span
class="mono">gameOverMode</span> to <span class="mono">True</span> and <span
class="mono">gameOverStartTime</span> to the current time.</p>

	<h1 class="subheading" id="">The Game Over Screen</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">299.</span>         else:</p>

		<p class="noindent mono"><span class="line-number">300.</span>            <span
class="comment"># game is over, show &quot;game over&quot; text</span></p>

		<p class="noindent mono"><span class="line-number">301.</span>            DISPLAYSURF.blit(gameOverSurf,
gameOverRect)</p>

		<p class="noindent mono"><span class="line-number">302.</span>            if
time.time() - gameOverStartTime &gt; GAMEOVERTIME:</p>

		<p class="noindent mono"><span class="line-number">303.</span>                 return
<span class="comment"># end the current game</span></p>

</div>

	<p>When the player has died, the “Game Over” text (which is on
the Surface object in the <span class="mono">gameOverSurf</span> variable)
will be shown on the screen for the number of seconds that is in the <span
class="mono">GAMEOVERTIME</span> constant. Once this amount of time has
elapsed, then the <span class="mono">runGame()</span> function will return.</p>

	<p>This lets the enemy squirrels continue to be animated and
moving around for a few seconds after the player dies and before the next game
starts. The “game over screen” in Squirrel Eat Squirrel does not wait until the
player presses a key before a new game starts.</p>

	<h1 class="subheading" id="">Winning</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">305.</span>         <span
class="comment"># check if the player has won.</span></p>

		<p class="noindent mono"><span class="line-number">306.</span>        if
winMode:</p>

		<p class="noindent mono"><span class="line-number">307.</span>            DISPLAYSURF.blit(winSurf,
winRect)</p>

		<p class="noindent mono"><span class="line-number">308.</span>            DISPLAYSURF.blit(winSurf2,
winRect2)</p>

		<p class="noindent mono"><span class="line-number">309.</span></p>

		<p class="noindent mono"><span class="line-number">310.</span>        pygame.display.update()</p>

		<p class="noindent mono"><span class="line-number">311.</span>         FPSCLOCK.tick(FPS)</p>

</div>

	<p>The <span class="mono">winMode</span> variable is set to <span
class="mono">True</span> on line 289 if the player has reached a certain size
(which is dictated by the <span class="mono">WINSIZE</span> constant). All
that happens when the player has won is that the “You have achieved OMEGA
SQUIRREL!” text (which is on the Surface object stored in the <span
class="mono">winSurf</span> variable) and the “(Press “r” to restart.)” text
(which is on the Surface object stored in the <span class="mono">winSurf2</span>
variable) appears on the screen. The game continues until the user presses the
R key, at which point the program execution will return from <span
class="mono">runGame()</span>. The event handling code for the R key is done
on lines 238 and 239.</p>

	<h1 class="subheading" id="">Drawing a Graphical Health Meter</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">316.</span> def
drawHealthMeter(currentHealth):</p>

		<p class="noindent mono"><span class="line-number">317.</span>    for
i in range(currentHealth): <span class="comment"># draw red health bars</span></p>

		<p class="noindent mono"><span class="line-number">318.</span>        pygame.draw.rect(DISPLAYSURF,
RED,   (15, 5 + (10 * MAXHEALTH) - i * 10, 20, 10))</p>

		<p class="noindent mono"><span class="line-number">319.</span>    for
i in range(MAXHEALTH): <span class="comment"># draw the white outlines</span></p>

		<p class="noindent mono"><span class="line-number">320.</span>         pygame.draw.rect(DISPLAYSURF,
WHITE, (15, 5 + (10 * MAXHEALTH) - i * 10, 20, 10), 1)</p>

</div>

	<p>To draw the health meter, first the <span class="mono">for</span>
loop on line 317 draws the filled-in red rectangle for the amount of health the
player has. Then the <span class="mono">for</span> loop on line 319 draws an unfilled
white rectangle for all of the possible health the player could have (which is
the integer value stored in the <span class="mono">MAXHEALTH</span> constant).
Note that the <span class="mono">pygame.display.update()</span> function is
not called in <span class="mono">drawHealthMeter()</span>.</p>

<h2><a name="_Toc316488726">The Same Old </a><span class="mono">terminate()</span>
Function</h2>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">323.</span> def
terminate():</p>

		<p class="noindent mono"><span class="line-number">324.</span>    pygame.quit()</p>

		<p class="noindent mono"><span class="line-number">325.</span>     sys.exit()</p>

</div>

	<p>The <span class="mono">terminate()</span> function works
the same as in the previous game programs.</p>

	<h1 class="subheading" id="">The Mathematics of the Sine Function</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">328.</span> def
getBounceAmount(currentBounce, bounceRate, bounceHeight):</p>

		<p class="noindent mono"><span class="line-number">329.</span>    <span
class="comment"># Returns the number of pixels to offset based on the
bounce.</span></p>

		<p class="noindent mono"><span class="line-number">330.</span>    <span
class="comment"># Larger bounceRate means a slower bounce.</span></p>

		<p class="noindent mono"><span class="line-number">331.</span>    <span
class="comment"># Larger bounceHeight means a higher bounce.</span></p>

		<p class="noindent mono"><span class="line-number">332.</span>     <span
class="comment"># currentBounce will always be less than bounceRate</span></p>

		<p class="noindent mono"><span class="line-number">333.</span>    return
int(math.sin( (math.pi / float(bounceRate)) * currentBounce ) * bounceHeight)</p>

		<p class="noindent mono"><span class="line-number">334.</span></p>

</div>

	<p>There is a mathematical function (which is similar to
functions in programming in that they both “return” or “evaluate” to a number
based on their parameters) called <a href="glossary.xhtml#sine"><b>sine</b></a>
(pronounced like “sign” and often abbreviated as “sin”). You may have learned
about it in math class, but if you haven’t it will be explained here. Python
has this mathematic function as a Python function in the <span class="mono">math</span>
module. You can pass an int or float value to <span class="mono">math.sin()</span>,
and it will return a float value that is called the “sine value”</p>

	<p>In the interactive shell, let’s see what <span
class="mono">math.sin()</span> returns for some values:</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; import math</p>
		<p class="noindent mono">&gt;&gt;&gt; math.sin(1)</p>
		<p class="noindent mono">0.8414709848078965</p>
		<p class="noindent mono">&gt;&gt;&gt; math.sin(2)</p>
		<p class="noindent mono">0.90929742682568171</p>
		<p class="noindent mono">&gt;&gt;&gt; math.sin(3)</p>
		<p class="noindent mono">0.14112000805986721</p>
		<p class="noindent mono">&gt;&gt;&gt; math.sin(4)</p>
		<p class="noindent mono">-0.7568024953079282</p>
		<p class="noindent mono">&gt;&gt;&gt; math.sin(5)</p>
		<p class="noindent mono">-0.95892427466313845</p>
	</div>

	<p>It seems really hard to predict what value <span
class="mono">math.sin()</span> is going to return based on what value we pass
it (which might make you wonder what <span class="mono">math.sin()</span> is
useful for). But if we graph the sine values of the integers <span
class="mono">1</span> through <span class="mono">10</span> on a graph, we
would get this:</p>

	<p>You can kind of see a wavy pattern in the values returned by
<span class="mono">math.sin()</span>. If you figure out the sine values for
more numbers besides integers (for example, <span class="mono">1.5</span> and <span
class="mono">2.5</span> and so on) and then connect the dots with lines, you
can see this wavy pattern more easily:</p>

	<p>In fact, if you kept adding more and more data points to
this graph, you would see that the sine wave looks like this:</p>


	<p>Notice that <span class="mono">math.sin(0)</span> returns <span
class="mono">0</span>, then gradually increases until <span class="mono">math.sin(3.14
/ 2)</span> returns <span class="mono">1</span>, then it begins to decrease
until <span class="mono">math.sin(3.14)</span> returns <span class="mono">0</span>.
The number <span class="mono">3.14</span> is a special number in mathematics
called <a href="glossary.xhtml#pi"><b>pi</b></a> (pronounced the same as delicious
“pie”). This value is also stored in the constant variable <span class="mono">pi</span>
in the <span class="mono">math</span> module (which is why line 333 uses the
variable, <span class="mono">math.pi</span>), which is technically the float value
<span class="mono">3.1415926535897931</span>. Since we want a wavy-looking
bounce for our squirrel, we’ll only pay attention to the return values of <span
class="mono">math.sin()</span> for the arguments <span class="mono">0</span>
to <span class="mono">3.14</span>:</p>


	<p>Let’s take a look at the return value of <span
class="mono">getBounceAmount()</span> and figure out what it does exactly.</p>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">333.</span>     return int(math.sin( (math.pi / float(bounceRate)) * currentBounce ) * bounceHeight)</p>
	</div>

	<p>Remember that on line 21 we set the <span class="mono">BOUNCERATE</span>
constant to <span class="mono">6</span>. This means that our code will only
increment <span class="mono">playerObj['bounce']</span> from <span
class="mono">0</span> to <span class="mono">6</span> and that we want to
split up the range of floating-point values from <span class="mono">0</span>
to <span class="mono">3.14</span> into <span class="mono">6</span> parts,
which we can do with simple division: <span class="mono">3.14 / 6 = 0.5235</span>.
Each of the <span class="mono">6</span> equal parts of the <span
class="mono">3.14</span> length on the graph for the “sine wave bounce” is <span
class="mono">0.5235</span>.</p>

	<p>You can see that when <span class="mono">playerObj['bounce']</span>
is at <span class="mono">3</span> (halfway between <span class="mono">0</span>
and <span class="mono">6</span>), the value passed to the <span class="mono">math.sin()</span>
call is <span class="mono">math.pi / 6 * 3</span>, which is <span
class="mono">1.5707</span> (halfway between <span class="mono">0</span> and <span
class="mono">3.1415</span>). Then <span class="mono">math.sin(1.5707)</span>
will return <span class="mono">1.0</span>, which is the highest part of the
sine wave (and the highest part of the sine wave happens half way through the
wave).</p>

	<p>As <span class="mono">playerObj['bounce']</span> gets its
value incremented, the <span class="mono">getBounceAmount()</span> function
will return values that have the same bounce shape that the sine wave has from <span
class="mono">0</span> to <span class="mono">3.14</span>. If you want to make
the bounce higher, than increase the <span class="mono">BOUNCEHEIGHT</span>
constant. If you want to make the bounce slower, than increase the <span
class="mono">BOUNCERATE</span> constant.</p>

	<p>The sine function is a concept from trigonometry
mathematics. If you’d like to learn more about the sine wave, the Wikipedia
page has detailed information: <a href="https://en.wikipedia.org/wiki/Sine">https://en.wikipedia.org/wiki/Sine</a></p>

	<h1 class="subheading" id="">Backwards Compatibility with Python Version 2</h1>

	<p>The reason we call <span class="mono">float()</span> to
convert <span class="mono">bounceRate</span> to a floating point number is
simply so that this program will work in Python version 2. In Python version 3,
the division operator will evaluate to a floating point value even if both of
the operands are integers, like this:</p>

	<div class="python-shell">
		<p class="noindent mono">&gt;&gt;&gt; # Python version 3</p>
		<p class="noindent mono">...</p>
		<p class="noindent mono">&gt;&gt;&gt; 10 / 5</p>
		<p class="noindent mono">2.0</p>
		<p class="noindent mono">&gt;&gt;&gt; 10 / 4</p>
		<p class="noindent mono">2.5</p>
		<p class="noindent mono">&gt;&gt;&gt;</p>
	</div>

	<p>However, in Python version 2, the <span class="mono">/</span>
division operator will only evaluate to a floating point value if one of the
operands is also a floating point value. If both operands are integers, then
Python 2’s division operator will evaluate to an integer value (rounding down
if needed), like this:</p>

	<div class="python-shell">

		<p class="noindent mono">&gt;&gt;&gt; #
Python version 2</p>

		<p class="noindent mono">...</p>

		<p class="noindent mono">&gt;&gt;&gt; 10
/ 5</p>

		<p class="noindent mono">2</p>

		<p class="noindent mono">&gt;&gt;&gt; 10
/ 4</p>

		<p class="noindent mono">2</p>

		<p class="noindent mono">&gt;&gt;&gt; 10
/ 4.0</p>

		<p class="noindent mono">2.5</p>

		<p class="noindent mono">&gt;&gt;&gt;
10.0 / 4</p>

		<p class="noindent mono">2.5</p>

		<p class="noindent mono">&gt;&gt;&gt;
10.0 / 4.0</p>

		<p class="noindent mono">2.5</p>

</div>

	<p>But if we always convert one of the values to a floating
point value with the <span class="mono">float()</span> function, then the
division operator will evaluate to a float value no matter which version of
Python runs this source code. Making these changes so that our code works with
older versions of software is called <a href="glossary.xhtml#backwards-compatibility"><b>backwards
compatibility</b></a>. It is important to maintain backwards compatibility,
because not everyone will always be running the latest version of software and
you want to ensure that the code you write works with as many computers as
possible.</p>

	<p>You can’t always make your Python 3 code backwards
compatible with Python 2, but if it’s possible then you should do it.
Otherwise, when people with Python 2 try to run your games will get error
messages and think that your program is buggy.</p>

	<p>A list of some differences between Python 2 and Python 3 can
be found at <a href="https://inventwithpython.com/appendixa.html">https://inventwithpython.com/appendixa.html</a>.</p>

<h1 class="subheading" id=""><span class="mono">getRandomVelocity()</span> Function</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">335.</span> def getRandomVelocity():</p>
		<p class="noindent mono"><span class="line-number">336.</span> &#160;&#160;&#160;&#160;speed = random.randint(SQUIRRELMINSPEED, SQUIRRELMAXSPEED)</p>
		<p class="noindent mono"><span class="line-number">337.</span> &#160;&#160;&#160;&#160;if random.randint(0, 1) == 0:</p>
		<p class="noindent mono"><span class="line-number">338.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return speed</p>
		<p class="noindent mono"><span class="line-number">339.</span> &#160;&#160;&#160;&#160;else:</p>
		<p class="noindent mono"><span class="line-number">340.</span> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -speed</p>
	</div>

	<p>The <span class="mono">getRandomVelocity()</span> function
is used to randomly determine how fast an enemy squirrel will move. The range
of this velocity is set in the <span class="mono">SQUIRRELMINSPEED</span> and <span
class="mono">SQUIRRELMAXSPEED</span> constants, but on top of that, the speed
is either negative (indicating the squirrel goes to the left or up) or positive
(indicating the squirrel goes to the right or down). There is a fifty-fifty
chance for the random speed to be positive or negative.</p>

	<h1 class="subheading" id="">Finding a Place to Add New Squirrels and Grass</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">343.</span> def getRandomOffCameraPos(camerax, cameray, objWidth, objHeight):</p>
		<p class="noindent mono"><span class="line-number">344.</span>    <span class="comment"># create a Rect of the camera view</span></p>
		<p class="noindent mono"><span class="line-number">345.</span>    cameraRect = pygame.Rect(camerax, cameray, WINWIDTH, WINHEIGHT)</p>
		<p class="noindent mono"><span class="line-number">346.</span>    while True:</p>
		<p class="noindent mono"><span class="line-number">347.</span>        x = random.randint(camerax - WINWIDTH, camerax + (2 * WINWIDTH))</p>
		<p class="noindent mono"><span class="line-number">348.</span>        y = random.randint(cameray - WINHEIGHT, cameray + (2 * WINHEIGHT))</p>
		<p class="noindent mono"><span class="line-number">349.</span> <span class="comment"># create a Rect object with the random coordinates and use colliderect()</span></p>
		<p class="noindent mono"><span class="line-number">350.</span> <span class="comment">         # to make sure the right edge isn't in the camera view.</span></p>
		<p class="noindent mono"><span class="line-number">351.</span>        objRect = pygame.Rect(x, y, objWidth, objHeight)</p>
		<p class="noindent mono"><span class="line-number">352.</span>        if not objRect.colliderect(cameraRect):</p>
		<p class="noindent mono"><span class="line-number">353.</span>            return x, y</p>
	</div>

	<p>When a new squirrel or grass object is created in the game
world, we want it to be within the active area (so that it is near the player’s
squirrel) but not within the view of the camera (so that it doesn’t just
suddenly pop into existence on the screen). To do this, we create a Rect object
that represents the area of the camera (using <span class="mono">camerax</span>,
<span class="mono">cameray</span>, <span class="mono">WINWIDTH</span>, and <span
class="mono">WINHEIGHT</span> constants).</p>

	<p>Next, we randomly generate numbers for the XY coordinates
that would be within the active area. The active area’s left and top edge are <span
class="mono">WINWIDTH</span> and <span class="mono">WINHEIGHT</span> pixels
to the left and up of <span class="mono">camerax</span> and <span
class="mono">cameray</span>. So the active area’s left and top edge are at <span
class="mono">camerax - WINWIDTH</span> and <span class="mono">cameray -
WINHEIGHT</span>. The active area’s width and height are also three times the
size of the <span class="mono">WINWIDTH</span> and <span class="mono">WINHEIGHT</span>,
as you can see in this image (where <span class="mono">WINWIDTH</span> is set
to 640 pixels and <span class="mono">WINHEIGHT</span> set to 480 pixels):</p>

	<p>This means the right and bottom edges will be at <span
class="mono">camerax + (2 * WINWIDTH)</span> and <span class="mono">cameray +
(2 * WINHEIGHT)</span>. Line 352 will check if the random XY coordinates would
collide with the camera view’s Rect object. If not, then those coordinates are
returned. If so, then the <span class="mono">while</span> loop on line 346
will keep generating new coordinates until it finds acceptable ones.</p>

	<h1 class="subheading" id="">Creating Enemy Squirrel Data Structures</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">356.</span> def
makeNewSquirrel(camerax, cameray):</p>

		<p class="noindent mono"><span class="line-number">357.</span>    sq
= {}</p>

		<p class="noindent mono"><span class="line-number">358.</span>    generalSize
= random.randint(5, 25)</p>

		<p class="noindent mono"><span class="line-number">359.</span>    multiplier
= random.randint(1, 3)</p>

		<p class="noindent mono"><span class="line-number">360.</span>    sq['width']
= (generalSize + random.randint(0, 10)) * multiplier</p>

		<p class="noindent mono"><span class="line-number">361.</span>    sq['height']
= (generalSize + random.randint(0, 10)) * multiplier</p>

		<p class="noindent mono"><span class="line-number">362.</span>    sq['x'],
sq['y'] = getRandomOffCameraPos(camerax, cameray, sq['width'], sq['height'])</p>

		<p class="noindent mono"><span class="line-number">363.</span>    sq['movex']
= getRandomVelocity()</p>

		<p class="noindent mono"><span class="line-number">364.</span>    sq['movey']
= getRandomVelocity()</p>

</div>

	<p>Creating enemy squirrel game objects is similar to making
the grass game objects. The data for each enemy squirrel is also stored in a
dictionary. The width and height are set to random sizes on line 360 and 361. The
<span class="mono">generalSize</span> variable is used so that the width and
height of each squirrel aren’t too different from each other. Otherwise, using
completely random numbers for width and height could give us very tall and
skinny squirrels or very short and wide squirrels. The width and height of the
squirrel are this general size with a random number from <span class="mono">0</span>
to <span class="mono">10</span> added to it (for slight variation), and then
multiplied by the <span class="mono">multiplier</span> variable.</p>

	<p>The original XY coordinate position of the squirrel will be
a random location that the camera cannot see, to prevent the squirrels from
just “popping” into existence on the screen.</p>

	<p>The speed and direction are also randomly selected by the <span
class="mono">getRandomVelocity()</span> function.</p>

	<h1 class="subheading" id="">Flipping the Squirrel Image</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">365.</span>     if
sq['movex'] &lt; 0: <span class="comment"># squirrel is facing left</span></p>

		<p class="noindent mono"><span class="line-number">366.</span>        sq['surface']
= pygame.transform.scale(L_SQUIR_IMG, (sq['width'], sq['height']))</p>

		<p class="noindent mono"><span class="line-number">367.</span>    else:
<span class="comment"># squirrel is facing right</span></p>

		<p class="noindent mono"><span class="line-number">368.</span>        sq['surface']
= pygame.transform.scale(R_SQUIR_IMG, (sq['width'], sq['height']))</p>

		<p class="noindent mono"><span class="line-number">369.</span>    sq['bounce']
= 0</p>

		<p class="noindent mono"><span class="line-number">370.</span>    sq['bouncerate']
= random.randint(10, 18)</p>

		<p class="noindent mono"><span class="line-number">371.</span>    sq['bounceheight']
= random.randint(10, 50)</p>

		<p class="noindent mono"><span class="line-number">372.</span>     return
sq</p>

</div>

	<p>The <span class="mono">L_SQUIR_IMG</span> and <span
class="mono">R_SQUIR_IMG</span> constants contain Surface objects with
left-facing and right-facing squirrel images on them. New Surface objects will
be made using the <span class="mono">pygame.transform.scale()</span> function
to match the squirrel’s  width and height (stored in <span class="mono">sq['width']</span>
and <span class="mono">sq['height']</span> respectively).</p>

	<p>After that, the three bounce-related values are randomly
generated (except for <span class="mono">sq['bounce']</span> which is <span
class="mono">0</span> because the squirrel always starts at the beginning of
the bounce) and the dictionary is returned on line 372.</p>

	<h1 class="subheading" id="">Creating Grass Data Structures</h1>

	<div class="python-shell">
		<p class="noindent mono"><span class="line-number">375.</span> def makeNewGrass(camerax, cameray):</p>
		<p class="noindent mono"><span class="line-number">376.</span>    gr = {}</p>
		<p class="noindent mono"><span class="line-number">377.</span>    gr['grassImage'] = random.randint(0, len(GRASSIMAGES) - 1)</p>
		<p class="noindent mono"><span class="line-number">378.</span>    gr['width'] = GRASSIMAGES[0].get_width()</p>
		<p class="noindent mono"><span class="line-number">379.</span>    gr['height'] = GRASSIMAGES[0].get_height()</p>
		<p class="noindent mono"><span class="line-number">380.</span> gr['x'], gr['y'] = getRandomOffCameraPos(camerax, cameray, gr['width'], gr['height'])</p>
		<p class="noindent mono"><span class="line-number">381.</span> gr['rect'] = pygame.Rect( (gr['x'], gr['y'], gr['width'], gr['height']) )</p>
		<p class="noindent mono"><span class="line-number">382.</span>     return gr</p>
	</div>

	<p>The grass game objects are dictionaries with the usual <span
class="mono">'x'</span>, <span class="mono">'y'</span>, <span class="mono">'width'</span>,
<span class="mono">'height'</span>, and <span class="mono">'rect'</span> keys
but also a <span class="mono">'grassImage'</span> key which is a number from <span
class="mono">0</span> to one less than the length of the <span class="mono">GRASSIMAGES</span>
list. This number will determine what image the grass game object has. For
example, if the value of the grass object’s <span class="mono">'grassImage'</span>
key is <span class="mono">3</span>, then it will use the Surface object stored
at <span class="mono">GRASSIMAGES[3]</span> for its image.</p>

	<h1 class="subheading" id="">Checking if Outside the Active Area</h1>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">385.</span> def
isOutsideActiveArea(camerax, cameray, obj):</p>

		<p class="noindent mono"><span class="line-number">386.</span>    <span
class="comment"># Return False if camerax and cameray are more than</span></p>

		<p class="noindent mono"><span class="line-number">387.</span>    <span
class="comment"># a half-window length beyond the edge of the window.</span></p>

		<p class="noindent mono"><span class="line-number">388.</span>    boundsLeftEdge
= camerax - WINWIDTH</p>

		<p class="noindent mono"><span class="line-number">389.</span>    boundsTopEdge
= cameray - WINHEIGHT</p>

		<p class="noindent mono"><span class="line-number">390.</span>    boundsRect
= pygame.Rect(boundsLeftEdge, boundsTopEdge, WINWIDTH * 3, WINHEIGHT * 3)</p>

		<p class="noindent mono"><span class="line-number">391.</span>    objRect
= pygame.Rect(obj['x'], obj['y'], obj['width'], obj['height'])</p>

		<p class="noindent mono"><span class="line-number">392.</span>     return
not boundsRect.colliderect(objRect)</p>

</div>

	<p>The <span class="mono">isOutsideActiveArea()</span> will
return <span class="mono">True</span> if the object you pass it is outside of
the “active area” that is dictated by the <span class="mono">camerax</span>
and <span class="mono">cameray</span> parameters. Remember that the active
area is an area around the camera view the size of the camera view (which has a
width and height set by <span class="mono">WINWIDTH</span> and <span
class="mono">WINHEIGHT</span>), like this:</p>

	<p>We can create a Rect object that represents the active area
by passing <span class="mono">camerax - WINWIDTH</span> for the left edge
value and <span class="mono">cameray - WINHEIGHT</span> for the top edge
value, and then <span class="mono">WINWIDTH * 3</span> and <span
class="mono">WINHEIGHT * 3</span> for the width and height. Once we have the
active area represented as a Rect object, we can use the <span class="mono">colliderect()</span>
method to determine if the object in the <span class="mono">obj</span>
parameter is collides with (that is, is inside of) the active area Rect object.</p>

	<p>Since the player squirrel, enemy squirrel and grass objects
all have <span class="mono">'x'</span>, <span class="mono">'y'</span>, <span
class="mono">'width'</span> and <span class="mono">'height'</span> keys, the <span
class="mono">isOutsideActiveArea()</span> code can work with any type of those
game objects. </p>

	<div class="python-shell">

		<p class="noindent mono"><span class="line-number">395.</span> if
__name__ == '__main__':</p>

		<p class="noindent mono"><span class="line-number">396.</span>     main()</p>

</div>

	<p>Finally, after all the functions have been defined, the
program will run the <span class="mono">main()</span> function and start the
game.</p>

	<h1 class="subheading" id="">Summary</h1>
	<p class="noindent">Squirrel Eat Squirrel was our first game to have multiple enemies moving around the board at once. The key to having several enemies was using a dictionary value with identical keys for each enemy squirrel, so that the same code could be run on each of them during an iteration through the game loop.</p>
	<p>The concept of the camera was also introduced. Cameras weren’t needed for our previous games because the entire game world fit onto one screen. However, when you make your own games that involve a player moving around a large game world, you will need code to handle converting between the game world’s coordinate system and the screen’s pixel coordinate system.</p>
	<p>Finally, the mathematical sine function was introduced to give realistic squirrel hops (no matter how tall or long each hop was). You don’t need to know a lot of math to do programming. In most cases, just knowing addition, multiplication, and negative numbers is fine. However, if you study mathematics, you’ll often find several uses for math to make your games cooler.</p>
	<p>For additional programming practice, you can download buggy versions of Squirrel Eat Squirrel from <a href="https://invpy.com/buggy/squirrel">https://invpy.com/buggy/squirrel</a> and try to figure out how to fix the bugs.</p>

</body>
</html>
